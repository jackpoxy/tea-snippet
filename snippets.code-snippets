{
	"Row": {
		"prefix": "tea-row",
		"body": [
			"<Row gap={20} showSplitLine verticalAlign=${1|\"top\",\"bottom\",\"middle\"|}>",
			"\t$2",
			"</Row>"
		],
		"description": "Log output to console"
	},
	"Col": {
		"prefix": "tea-col",
		"body": [
			"<Col span={$1}>",
			"\t$2",
			"</Col>"
		],
		"description": "Log output to console"
	},
	"日历_基本用法": {
		"prefix": "tea-calendar(日历)",
		"body": [
			"<Calendar",
			"\tonChange={value => console.log(value.format(\"YYYY/MM/DD\"), value)}",
			"/>"
		],
		"description": "Log output to console"
	},
	"日历_range控制可选范围": {
		"prefix": "tea-calendar(日历)",
		"body": [
			"<Calendar",
			"\trange={[moment(\"2019-01-01\"), moment(\"2020-01-01\")]}",
			"\tonChange={value => console.log(value.format(\"YYYY/MM/DD\"), value)}",
			"/>"
		],
		"description": "Log output to console"
	},
	"日历_disabledDate控制可选范": {
		"prefix": "tea-calendar(日历)",
		"body": [
			"<Calendar",
			"\tdisabledDate={date => !date.isAfter(moment())}",
			"\tonChange={value => console.log(value.format(\"YYYY/MM/DD\"), value)}",
			"/>"
		],
		"description": "Log output to console"
	},
	"表单_布局": {
		"prefix": "tea-form(表单布局)",
		"body": [
			"<Form.Title>布局效果</Form.Title>",
			"<Form layout={${1|default,fixed,vertical,inline,inline-vertical|} hideLabel={${2|true,false|}}>",
			"\t<Form.Item label=\"姓名\">",
			"\t\t<Input placeholder=\"你是谁\" />",
			"\t</Form.Item>",
			"\t<Form.Item label=\"性别\">",
			"\t\t<RadioGroup>",
			"\t\t\t<Radio name=\"male\">男</Radio>",
			"\t\t\t<Radio name=\"female\">女</Radio>",
			"\t\t</RadioGroup>",
			"\t</Form.Item>",
			"\t<Form.Item label=\"年龄\">",
			"\t\t<InputNumber defaultValue={18} min={12} max={100} />",
			"\t</Form.Item>",
			"\t<Form.Item label=\"兴趣\">",
			"\t\t<CheckboxGroup>",
			"\t\t\t<Checkbox name=\"code\">编程</Checkbox>",
			"\t\t\t<Checkbox name=\"web\">抠图</Checkbox>",
			"\t\t\t<Checkbox name=\"jinli\">超越</Checkbox>",
			"\t\t</CheckboxGroup>",
			"\t</Form.Item>",
			"\t<Form.Item label=\"自我介绍\" tips=\"100 字以内\">",
			"\t\t<Input multiline placeholder=\"介绍下自己\" />",
			"\t</Form.Item>",
			"</Form>",
			"<Form.Action>",
			"\t<Button type=\"primary\">保存</Button>",
			"\t<Button>取消</Button>",
			"</Form.Action>"
		],
		"description": "Log output to console"
	},
	"表单_验证": {
		"prefix": "tea-form(表单验证)",
		"body": [
			"<Form.Title>表单验证</Form.Title>",
			"<Form>",
			"\t<Form.Item label=\"姓名\" status=\"success\">",
			"\t\t<Input placeholder=\"你是谁\" />",
			"\t</Form.Item>",
			"\t<Form.Item",
			"\t\tlabel=\"性别\"",
			"\t\tstatus=\"error\"",
			"\t\tmessage=\"未选择\"",
			"\t\textra=\"请选择性别\"",
			"\t>",
			"\t\t<RadioGroup>",
			"\t\t\t<Radio name=\"male\">男</Radio>",
			"\t\t\t<Radio name=\"female\">女</Radio>",
			"\t\t</RadioGroup>",
			"\t</Form.Item>",
			"\t<Form.Item label=\"年龄\" status=\"validating\">",
			"\t\t<InputNumber defaultValue={18} min={12} max={100} disabled />",
			"\t</Form.Item>",
			"\t<Form.Item label=\"兴趣\" message=\"选择一项或多项爱好\">",
			"\t\t<CheckboxGroup>",
			"\t\t\t<Checkbox name=\"code\">编程</Checkbox>",
			"\t\t\t<Checkbox name=\"web\">抠图</Checkbox>",
			"\t\t\t<Checkbox name=\"jinli\">超越</Checkbox>",
			"\t\t</CheckboxGroup>",
			"\t</Form.Item>",
			"</Form>",
			"<hr />",
			"<Form.Title>为控件单独使用</Form.Title>",
			"<Form.Control status=\"error\" message=\"设置失败\">",
			"\t<Switch>自动重启</Switch>",
			"</Form.Control>",
			"<Form.Control",
			"\tstatus=\"error\"",
			"\tmessage=\"不能设置超过 200M\"",
			"\tstyle={{ marginTop: 20 }}",
			">",
			"\t<InputAdornment after=\"Mbps\" appearance=\"pure\">",
			"\t\t<InputNumber defaultValue={300} />",
			"\t</InputAdornment>",
			"</Form.Control>"
		],
		"description": "Log output to console"
	},
	"表单_只读": {
		"prefix": "tea-form(只读表单)",
		"body": [
			"<Form readonly>",
			"\t<Form.Item label=\"用户名\">",
			"\t\t<Form.Text>Tea</Form.Text>",
			"\t</Form.Item>",
			"\t<Form.Item label=\"密码\">",
			"\t\t<Form.Text>******</Form.Text>",
			"\t</Form.Item>",
			"\t<Form.Item label=\"生效时间\">",
			"\t\t<Form.Text>2019-03-27</Form.Text>",
			"\t</Form.Item>",
			"</Form>"
		],
		"description": "Log output to console"
	},
	"折叠面板_基本用法": {
		"prefix": "tea-collapse(折叠面板)",
		"body": [
			"<Collapse>",
			"\t<Collapse.Panel id=\"1\" title=\"高级设置\">",
			"\t\t<div",
			"\t\t\tstyle={{",
			"\t\t\t\theight: 40,",
			"\t\t\t\tpadding: 4,",
			"\t\t\t\tbackgroundColor: \"#f2f2f2\",",
			"\t\t\t}}",
			"\t\t>",
			"\t\t\t内容",
			"\t\t</div>",
			"\t</Collapse.Panel>",
			"</Collapse>"
		],
		"description": "Log output to console"
	},
	"折叠面板_多个面板": {
		"prefix": "tea-collapse(折叠面板)",
		"body": [
			"<Collapse defaultActiveIds={[\"1\", \"2\"]}>",
			"\t<Collapse.Panel id=\"1\" title=\"高级设置 1\">",
			"\t\t<div>1</div>",
			"\t</Collapse.Panel>",
			"\t<Collapse.Panel id=\"2\" title=\"高级设置 2\">",
			"\t\t<div>2</div>",
			"\t</Collapse.Panel>",
			"\t<Collapse.Panel id=\"3\" title=\"高级设置 3\">",
			"\t\t<div>3</div>",
			"\t</Collapse.Panel>",
			"\t<Collapse.Panel id=\"4\" title=\"高级设置 4\">",
			"\t\t<div>4</div>",
			"\t</Collapse.Panel>",
			"</Collapse>"
		],
		"description": "Log output to console"
	},
	"折叠面板_手风琴模式": {
		"prefix": "tea-collapse(折叠面板)",
		"body": [
			"<Collapse accordion defaultActiveIds={[\"1\"]}>",
			"\t<Collapse.Panel id=\"1\" title=\"高级设置 1\">",
			"\t\t<div>1</div>",
			"\t</Collapse.Panel>",
			"\t<Collapse.Panel id=\"2\" title=\"高级设置 2\">",
			"\t\t<div>2</div>",
			"\t</Collapse.Panel>",
			"\t<Collapse.Panel id=\"3\" title=\"高级设置 3\">",
			"\t\t<div>3</div>",
			"\t</Collapse.Panel>",
			"\t<Collapse.Panel id=\"4\" title=\"高级设置 4\">",
			"\t\t<div>4</div>",
			"\t</Collapse.Panel>",
			"</Collapse>"
		],
		"description": "Log output to console"
	},
	"折叠面板_自定义图标": {
		"prefix": "tea-collapse(折叠面板)",
		"body": [
			"<Collapse",
			"\ticon={active => <Icon type={active ? \"minus\" : \"plus\"} />}",
			"\ticonPosition=\"right\"",
			">",
			"\t<Collapse.Panel id=\"1\" title=\"高级设置\">",
			"\t\t<div",
			"\t\t\tstyle={{",
			"\t\t\t\theight: 40,",
			"\t\t\t\tpadding: 4,",
			"\t\t\t\tbackgroundColor: \"#f2f2f2\",",
			"\t\t\t}}",
			"\t\t>",
			"\t\t\t内容",
			"\t\t</div>",
			"\t</Collapse.Panel>",
			"</Collapse>"
		],
		"description": "Log output to console"
	},
	"卡片": {
		"prefix": "tea-card(卡片)",
		"body": [
			"<Card bordered={borderVisible}>",
			"\t<Card.Header>",
			"\t\t<H3>卡片头部</H3>",
			"\t</Card.Header>",
			"\t<Card.Body",
			"\t\ttitle=\"内容区标题\"",
			"\t\tsubtitle=\"(小标题)\"",
			"\t\toperation={<Button type=\"link\">操作区</Button>}",
			"\t>",
			"\t\t内容区",
			"\t</Card.Body>",
			"\t<Card.Footer>",
			"\t\t<p className={Padding[\"5n\"]}>卡片底部</p>",
			"\t</Card.Footer>",
			"</Card>"
		],
		"description": "Log output to console"
	},
	"导航菜单": {
		"prefix": "tea-navmenu(导航菜单)",
		"body": [
			"<NavMenu",
			"\tleft={",
			"\t\t<>",
			"\t\t\t<NavMenu.Item type=\"logo\">",
			"\t\t\t\t<img",
			"\t\t\t\t\tsrc=\"https://via.placeholder.com/32.png?text=LOGO\"",
			"\t\t\t\t\talt=\"logo\"",
			"\t\t\t\t/>",
			"\t\t\t</NavMenu.Item>",
			"\t\t\t<NavMenu.Item>总览</NavMenu.Item>",
			"\t\t\t<NavMenu.Item selected>云服务器</NavMenu.Item>",
			"\t\t</>",
			"\t}",
			"\tright={",
			"\t\t<>",
			"\t\t\t<NavMenu.Item",
			"\t\t\t\ttype=\"dropdown\"",
			"\t\t\t\toverlay={close => (",
			"\t\t\t\t\t<List type=\"option\">",
			"\t\t\t\t\t\t<List.Item onClick={close}>账号信息</List.Item>",
			"\t\t\t\t\t\t<List.Item className=\"tea-nav__list-line\" onClick={close}>",
			"\t\t\t\t\t\t\t安全设置",
			"\t\t\t\t\t\t</List.Item>",
			"\t\t\t\t\t\t<List.Item onClick={close}>退出</List.Item>",
			"\t\t\t\t\t</List>",
			"\t\t\t\t)}",
			"\t\t\t>",
			"\t\t\t\t用户名",
			"\t\t\t</NavMenu.Item>",
			"\t\t\t<NavMenu.Item type=\"dropdown\" overlay={<div />} selected>",
			"\t\t\t\t费用",
			"\t\t\t</NavMenu.Item>",
			"\t\t\t<NavMenu.Item>工单</NavMenu.Item>",
			"\t\t\t<NavMenu.Item type=\"icon\" selected>",
			"\t\t\t\t<Icon type=\"news\" />",
			"\t\t\t\t<Badge dark theme=\"danger\">",
			"\t\t\t\t\t7",
			"\t\t\t\t</Badge>",
			"\t\t\t</NavMenu.Item>",
			"\t\t\t<NavMenu.Item type=\"icon\">",
			"\t\t\t\t<Icon type=\"help\" />",
			"\t\t\t</NavMenu.Item>",
			"\t\t</>",
			"\t}",
			"/>"
		],
		"description": "Log output to console"
	},
	"左侧菜单": {
		"prefix": "tea-menu(左侧菜单)",
		"body": [
			"<Menu",
			"\tback={{",
			"\t\ttitle: \"产品名称产品名称产品名称\",",
			"\t\tdescription: \"数据测试\",",
			"\t\ttooltip: \"产品名称产品名称产品名称 - 数据测试勿删\",",
			"\t\tonClick: () => console.log(\"back\"),",
			"\t}}",
			">",
			"\t<Menu.Item title=\"一级菜单\" {...getMenuItemProps(\"1\")} />",
			"\t<Menu.SubMenu title=\"一级菜单\">",
			"\t\t<Menu.Item title=\"二级菜单\" {...getMenuItemProps(\"2-1\")} />",
			"\t\t<Menu.Item title=\"二级菜单\" {...getMenuItemProps(\"2-2\")} />",
			"\t</Menu.SubMenu>",
			"\t<Menu.Group title=\"菜单分组\">",
			"\t\t<Menu.Item",
			"\t\t\ttitle={",
			"\t\t\t\t<>",
			"\t\t\t\t\t一级菜单",
			"\t\t\t\t\t<Icon type=\"externallink\" />",
			"\t\t\t\t</>",
			"\t\t\t}",
			"\t\t\t{...getMenuItemProps(\"3\")}",
			"\t\t/>",
			"\t</Menu.Group>",
			"",
			"\t<Menu.Group title=\"菜单分组\">",
			"\t\t<Menu.SubMenu title=\"一级菜单\">",
			"\t\t\t<Menu.Item title=\"二级菜单\" {...getMenuItemProps(\"4-1\")} />",
			"\t\t\t<Menu.Item title=\"二级菜单\" {...getMenuItemProps(\"4-2\")} />",
			"\t\t</Menu.SubMenu>",
			"\t</Menu.Group>",
			"</Menu>",
			"${BLOCK_COMMENT_START}",
			"const [selected, setSelected] = useState(\"2-1\");",
			"",
			"const getMenuItemProps = id => ({",
			"\tselected: selected === id,",
			"\tonClick: () => setSelected(id),",
			"});",
			"${BLOCK_COMMENT_END}"
		],
		"description": "Log output to console"
	},
	"链接": {
		"prefix": "tea-link(链接)",
		"body": [
			"<ExternalLink href=\"${1:https://console.cloud.tencent.com}\"${2| , weak|}>",
			"\t控制台",
			"</ExternalLink>"
		],
		"description": "Log output to console"
	},
	"跳转": {
		"prefix": "tea-jumper(跳转)",
		"body": [
			"<Jumper",
			"\tshowCurrent",
			"\tdirection=\"${1|updown,leftright|}\"",
			"\tnoBordered={${2|true,false|}}",
			"\t{...jumperProps}",
			"/>",
			"",
			"${BLOCK_COMMENT_START}",
			"const [day, setDay] = useState(1);",
			"const maxDay = 5;",
			"",
			"let prevDisabled = false;",
			"let nextDisabled = false;",
			"let prevTitle = \"前一天\";",
			"let nextTitle = \"后一天\";",
			"const curTitle = \"今天\";",
			"",
			"if (day === 1) {",
			"\tprevDisabled = true;",
			"\tprevTitle = \"当前在第一天\";",
			"} else if (day === maxDay) {",
			"\tnextDisabled = true;",
			"\tnextTitle = \"当前在最后一天\";",
			"}",
			"",
			"const jumperProps = {",
			"\tprevDisabled,",
			"\tnextDisabled,",
			"\tprevTitle,",
			"\tnextTitle,",
			"\tcurTitle,",
			"\tisCurrent: day === curDay,",
			"\tonNext: () => setDay(day + 1),",
			"\tonPrev: () => setDay(day - 1),",
			"\tonCurrent: () => setDay(curDay),",
			"};",
			"${BLOCK_COMMENT_END}"
		],
		"description": "Log output to console"
	},
	"面包屑": {
		"prefix": "tea-breadcrumb(面包屑)",
		"body": [
			"<Breadcrumb>",
			"\t<Breadcrumb.Item>",
			"\t\t<a href=\"\">Home</a>",
			"\t</Breadcrumb.Item>",
			"\t<Breadcrumb.Item>",
			"\t\t<a href=\"\">Application</a>",
			"\t</Breadcrumb.Item>",
			"\t<Breadcrumb.Item>About</Breadcrumb.Item>",
			"</Breadcrumb>"
		],
		"description": "Log output to console"
	},
	"端对齐_左右对齐": {
		"prefix": "tea-justify(端对齐)",
		"body": [
			"<Justify",
			"\tleft={",
			"\t\t<>",
			"\t\t\t<Button type=\"primary\">新建</Button>",
			"\t\t\t<Button>开机</Button>",
			"\t\t</>",
			"\t}",
			"\tright={",
			"\t\t<>",
			"\t\t\t<SearchBox />",
			"\t\t\t<Button icon=\"setting\" />",
			"\t\t\t<Button icon=\"refresh\" />",
			"\t\t\t<Button icon=\"download\" />",
			"\t\t</>",
			"\t}",
			"/>"
		],
		"description": "Log output to console"
	},
	"端对齐_顶部 / 底部对齐": {
		"prefix": "tea-justify(端对齐)",
		"body": [
			"<Justify",
			"\t${1|top,bottom|}",
			"\tleft={<H3>hello</H3>}",
			"\tright={<Button type=\"link\">文本按钮</Button>}",
			"/>"
		],
		"description": "Log output to console"
	},
	"输入框_单行文本输入": {
		"prefix": "tea-input(输入框_单行文本输入)",
		"body": [
			"<Input",
			"\tsize=\"full\"",
			"\tvalue=\"\"",
			"\tonChange={(value, context) => {",
			"\t\tconsole.log(value, context);",
			"\t}}",
			"\tplaceholder=\"输入文本内容\"",
			"/>"
		],
		"description": "Log output to console"
	},
	"输入框_密码输入": {
		"prefix": "tea-input(输入框_密码输入)",
		"body": [
			"<Password onChange={(value, { valid }) => console.log(value, valid)} />",
			"${BLOCK_COMMENT_START}",
			"const { Password } = Input;",
			"${BLOCK_COMMENT_END}"
		],
		"description": "Log output to console"
	},
	"输入框_多行文本输入": {
		"prefix": "tea-input(输入框_多行文本输入)",
		"body": [
			"<TextArea",
			"\tshowCount",
			"\tsize=\"${1|full,l,m,s,xs,auto|}\"",
			"\tvalue=\"$2\"",
			"\tonChange={(value, context) => {",
			"\t\tconsole.log(value, context);",
			"\t}}",
			"\tplaceholder=\"${3:输入文本内容}\"",
			"\tdisabled={false}",
			"\treadonly={false}",
			"/>",
			"${BLOCK_COMMENT_START}",
			"const { TextArea } = Input;",
			"${BLOCK_COMMENT_END}"
		],
		"description": "Log output to console"
	},
	"主要按钮": {
		"prefix": "tea-button(主要按钮)",
		"body": [
			"<Button type=\"primary\"${1|>, loading>, disabled>|}",
			"\t${2:主要按钮}",
			"</Button>"
		],
		"description": "Log output to console"
	},
	"次要按钮": {
		"prefix": "tea-button(次要按钮)",
		"body": [
			"<Button type=\"weak\"${1|>, loading>, disabled>|}",
			"\t${2:次要按钮}",
			"</Button>"
		],
		"description": "Log output to console"
	},
	"支付类按钮": {
		"prefix": "tea-button(支付类按钮)",
		"body": [
			"<Button type=\"pay\"${1|>, loading>, disabled>|}",
			"\t${2:支付按钮}",
			"</Button>"
		],
		"description": "Log output to console"
	},
	"错误类按钮": {
		"prefix": "tea-button(错误类按钮)",
		"body": [
			"<Button type=\"error\"${1|>, loading>, disabled>|}",
			"\t${2:错误按钮}",
			"</Button>"
		],
		"description": "Log output to console"
	},
	"文本按钮": {
		"prefix": "tea-button(文本按钮)",
		"body": [
			"<Button type=\"text\"${1|>, disabled>|}",
			"\t${2:文本按钮}",
			"</Button>"
		],
		"description": "Log output to console"
	},
	"链接按钮": {
		"prefix": "tea-button(链接按钮)",
		"body": [
			"<Button type=\"link\"${1|>, disabled>|}",
			"\t${2:链接按钮}",
			"</Button>"
		],
		"description": "Log output to console"
	},
	"图标按钮": {
		"prefix": "tea-button-icon(图标按钮)",
		"body": [
			"<Button icon=\"${1:monitor}\" title=\"$2\" ${3|/>, disabled />|}"
		],
		"description": "Log output to console"
	},
	"警示_基本用法": {
		"prefix": "tea-alert(警示)",
		"body": [
			"<Alert${1|>, type=\"success\">, type=\"warning\">, type=\"error\">|}",
			"\t${2:提示}",
			"</Alert>"
		],
		"description": "Log output to console"
	},
	"警示_公告栏": {
		"prefix": "tea-alert(警示)",
		"body": [
			"<Alert.Notice",
			"\tdefaultOpen",
			"\ttitle=\"【公告】关于硬盘快照将于2019年7月正式商业化的通知\"",
			">",
			"\t<List type=\"bullet\">",
			"\t\t<List.Item>小程序云服务器有奖内测中，即刻成为产品体验官</List.Item>",
			"\t\t<List.Item>",
			"\t\t\t云服务器限时秒杀，首购1C1G仅需99元/年，还有多款配置供您选择",
			"\t\t</List.Item>",
			"\t\t<List.Item>",
			"\t\t\t让企业普惠上云，云服务器最低至2.5折，还有更多产品更低折扣满足您的需求",
			"\t\t</List.Item>",
			"\t</List>",
			"</Alert.Notice>"
		],
		"description": "Log output to console"
	},
	"警示_可关闭": {
		"prefix": "tea-alert(警示)",
		"body": [
			"<Alert",
			"\ttype=\"warning\"",
			"\tvisible={alertVisible}",
			"\tonClose={() => setAlertVisible(false)}",
			"\textra={",
			"\t\t<Button type=\"link\" onClick={() => setAlertVisible(false)}>",
			"\t\t\t关闭",
			"\t\t</Button>",
			"\t}",
			">",
			"\t受控关闭",
			"</Alert>",
			"${BLOCK_COMMENT_START}",
			"const [alertVisible, setAlertVisible] = useState(true);",
			"${BLOCK_COMMENT_END}"
		],
		"description": "Log output to console"
	},
	"警示_列表形式": {
		"prefix": "tea-alert(警示)",
		"body": [
			"<Alert type=\"warning\">",
			"\t<h4 style={{ marginBottom: 8 }}>重要声明</h4>",
			"\t<p>本功能将在 2019 年 2 月 29 日下线，请注意做好下列迁移工作：</p>",
			"\t<List type=\"bullet\">",
			"\t\t<List.Item>小程序云服务器有奖内测中，即刻成为产品体验官</List.Item>",
			"\t\t<List.Item>",
			"\t\t\t云服务器限时秒杀，首购1C1G仅需99元/年，还有多款配置供您选择",
			"\t\t</List.Item>",
			"\t\t<List.Item>",
			"\t\t\t让企业普惠上云，云服务器最低至2.5折，还有更多产品更低折扣满足您的需求",
			"\t\t</List.Item>",
			"\t</List>",
			"\t<Collapse iconPosition=\"right\" style={{ marginTop: 8 }}>",
			"\t\t<Collapse.Panel",
			"\t\t\tid=\"1\"",
			"\t\t\ttitle={active => (active ? \"收起\" : \"展开\")}",
			"\t\t\tposition=\"top\"",
			"\t\t>",
			"\t\t\t<List type=\"bullet\" style={{ marginTop: 8 }}>",
			"\t\t\t\t<List.Item>更多提示语</List.Item>",
			"\t\t\t\t<List.Item>More</List.Item>",
			"\t\t\t</List>",
			"\t\t</Collapse.Panel>",
			"\t</Collapse>",
			"</Alert>"
		],
		"description": "Log output to console"
	},
	"警示_轮播": {
		"prefix": "tea-alert(警示)",
		"body": [
			"<Alert carouselMode defaultVisible>",
			"\t<>小程序云服务器有奖内测中，即刻成为产品体验官</>",
			"\t<>云服务器限时秒杀，首购1C1G仅需99元/年</>",
			"\t<>让企业普惠上云，云服务器最低至2.5折</>",
			"</Alert>"
		],
		"description": "Log output to console"
	},
	"徽章_基本用法": {
		"prefix": "tea-badge(徽章)",
		"body": [
			"<Badge${1| , dark |}theme=\"${2|success,warning,danger|}\">",
			"\t徽章",
			"</Badge>"
		],
		"description": "Log output to console"
	},
	"徽章_点和环": {
		"prefix": "tea-badge(徽章)",
		"body": [
			"<Badge ${1|dot,ring|}${2| , theme=\"success\" , theme=\"warning\" , theme=\"danger\" |}/>"
		],
		"description": "Log output to console"
	},
	"徽章_Segment中使用": {
		"prefix": "tea-badge(徽章)",
		"body": [
			"<Segment",
			"\tvalue={value.toString()}",
			"\tonChange={value => setValue(parseInt(value, 10))}",
			"\toptions={[",
			"\t\t{ text: \"1个月\", value: \"1\" },",
			"\t\t{ text: \"2个月\", value: \"2\" },",
			"\t\t{",
			"\t\t\ttext: (",
			"\t\t\t\t<>",
			"\t\t\t\t\t3个月",
			"\t\t\t\t\t<Badge theme=\"${1|success,warning,danger|}\" dark>",
			"\t\t\t\t\t\t8.8折",
			"\t\t\t\t\t</Badge>",
			"\t\t\t\t</>",
			"\t\t\t),",
			"\t\t\tvalue: \"3\",",
			"\t\t},",
			"\t\t{ text: \"半年\", value: \"6\" },",
			"\t]}",
			"/>"
		],
		"description": "Log output to console"
	},
	"状态": {
		"prefix": "tea-status(状态)",
		"body": [
			"<Status",
			"\t// @ts-ignore",
			"\ticon=\"${1|blank,chart,loading,network,no-permission,pay,search,upload|}\"",
			"\t// @ts-ignore",
			"\tsize=\"${2|l,m,s,xs|}\"",
			"\ttitle={\"暂无数据\"}",
			"\tdescription=\"该状态的详细描述\"",
			"\toperation={<a>立即新建</a>}",
			"/>"
		],
		"description": "Log output to console"
	},
	"加载状态提示": {
		"prefix": "tea-statustip(加载状态提示)",
		"body": [
			"<StatusTip",
			"\t// @ts-ignore",
			"\tstatus={value}",
			"\tonClear={() => console.log(\"onClear\")}",
			"\tonRetry={() => console.log(\"onRetry\")}",
			"/>"
		],
		"description": "Log output to console"
	},
	"选项卡": {
		"prefix": "tea-tabs(选项卡)",
		"body": [
			"<Tabs tabs={tabs} activeId={activeId} placement=\"${1|top,left|}\">",
			"\t<TabPanel id=\"basic\">基本信息</TabPanel>",
			"\t<TabPanel id=\"network\">性网卡</TabPanel>",
			"\t<TabPanel id=\"monitor\">基本信息</TabPanel>",
			"\t<TabPanel id=\"sg\">安全组</TabPanel>",
			"\t<TabPanel id=\"oplog\">操作日志</TabPanel>",
			"</Tabs>",
			"${BLOCK_COMMENT_START}",
			"const tabs = [",
			"\t{ id: \"basic\", label: \"基本信息\" },",
			"\t{ id: \"network\", label: \"弹性网卡\" },",
			"\t{ id: \"monitor\", label: \"监控信息\" },",
			"\t{ id: \"sg\", label: \"安全组\", disabled: true },",
			"\t{ id: \"oplog\", label: \"操作日志\" },",
			"];",
			"${BLOCK_COMMENT_END}"
		],
		"description": "Log output to console"
	},
	"分页": {
		"prefix": "tea-pagination(分页)",
		"body": [
			"<Pagination",
			"\trecordCount={1000}",
			"\tpageIndex={1}",
			"\tpageSize={10}",
			"\tstateTextVisible={true}",
			"\tpageSizeVisible={true}",
			"\tpageIndexVisible={true}",
			"\tjumpVisible={true}",
			"\tendJumpVisible={true}",
			"/>",
			"${BLOCK_COMMENT_START}",
			"stateTextVisible 显示状态",
			"pageSizeVisible 显示页长",
			"pageIndexVisible 显示页码",
			"jumpVisible 显示翻页",
			"endJumpVisible 显示头尾",
			"${BLOCK_COMMENT_END}"
		],
		"description": "Log output to console"
	},
	"列表": {
		"prefix": "tea-list(列表)",
		"body": [
			"<List>",
			"\t<List.Item>${1:打开冰箱}</List.Item>",
			"\t<List.Item>${2:把大象放到冰箱里}</List.Item>",
			"\t<List.Item>${3:关闭冰箱门}</List.Item>",
			"</List>"
		],
		"description": "Log output to console"
	},
	"进度条_条形": {
		"prefix": "tea-progress(条形进度条)",
		"body": [
			"<Progress percent={30} theme=\"${1|default,danger,success|}\" text=\"运行中\" />"
		],
		"description": "Log output to console"
	},
	"进度条_环形": {
		"prefix": "tea-progress(环形进度条)",
		"body": [
			"<Progress type=\"circle\" percent={30} tips=\"正在上传应用，请稍等\" />"
		],
		"description": "Log output to console"
	},
	"进度条_自定义": {
		"prefix": "tea-progress(自定义进度条)",
		"body": [
			"<Progress",
			"\ttype=\"${1|line,circle|}\"",
			"\tpercent={10}",
			"\tstrokeColor=\"#faa3c4\"",
			"\tstrokeWidth={16}",
			"\twidth={240}",
			"/>"
		],
		"description": "Log output to console"
	},
	"文本": {
		"prefix": "tea-text(文本)",
		"body": [
			"<Text theme=\"${1|text,label,weak,strong,primary,success,warning,danger|}\"${2|>, overflow>|}${3:文本内容}</Text>",
			"${BLOCK_COMMENT_START}",
			"如果设置了 overflow，需要给 Text 设置一个宽度才能生效",
			"${BLOCK_COMMENT_END}"
		],
		"description": "Log output to console"
	},
	"步骤": {
		"prefix": "tea-stepper(步骤)",
		"body": [
			"<Stepper",
			"\t// @ts-ignore",
			"\ttype={\"${1|default, vertical|}\"}",
			"\tsteps={",
			"\t\t[",
			"\t\t\t{",
			"\t\t\t\tid: \"prepare\",",
			"\t\t\t\tlabel: \"验证备案类型\",",
			"\t\t\t},",
			"\t\t\t{ id: \"info\", label: \"填写备案信息\" },",
			"\t\t\t{",
			"\t\t\t\tid: \"upload\",",
			"\t\t\t\tlabel: \"上传资料\",",
			"\t\t\t\tdetail: (",
			"\t\t\t\t\t<p>",
			"\t\t\t\t\t\t<ExternalLink>上传资料说明</ExternalLink>",
			"\t\t\t\t\t</p>",
			"\t\t\t\t),",
			"\t\t\t},",
			"\t\t\t{ id: \"photo\", label: \"办理拍照\" },",
			"\t\t\t{ id: \"finish\", label: \"完成备案\" },",
			"\t\t]",
			"\t}",
			"\tcurrent=\"info\"",
			"/>"
		],
		"description": "Log output to console"
	},
	"就地确认": {
		"prefix": "tea-popConfirm(就地确认)",
		"body": [
			"<PopConfirm",
			"\ttitle=\"确定要解除关联？\"",
			"\tmessage=\"解除后，配置将不再生效，也不做关联。\"",
			"\tfooter={close => (",
			"\t\t<>",
			"\t\t\t<Button",
			"\t\t\t\ttype=\"link\"",
			"\t\t\t\tonClick={() => {",
			"\t\t\t\t\tclose();",
			"\t\t\t\t\tconsole.log(\"已解除\");",
			"\t\t\t\t}}",
			"\t\t\t>",
			"\t\t\t\t解除",
			"\t\t\t</Button>",
			"\t\t\t<Button",
			"\t\t\t\ttype=\"text\"",
			"\t\t\t\tonClick={() => {",
			"\t\t\t\t\tclose();",
			"\t\t\t\t\tconsole.log(\"已取消\");",
			"\t\t\t\t}}",
			"\t\t\t>",
			"\t\t\t\t取消",
			"\t\t\t</Button>",
			"\t\t</>",
			"\t)}",
			"\tplacement=\"top-start\"",
			">",
			"\t<Button type=\"text\">解除关联</Button>",
			"</PopConfirm>"
		],
		"description": "Log output to console"
	},
	"布局": {
		"prefix": "tea-layout(布局)",
		"body": [
			"<Layout className=\"demo-layout-l\">",
			"\t<Header>",
			"\t\t<NavMenu",
			"\t\t\tleft={",
			"\t\t\t\t<>",
			"\t\t\t\t\t<NavMenu.Item type=\"logo\">",
			"\t\t\t\t\t\t<img",
			"\t\t\t\t\t\t\tsrc=\"https://via.placeholder.com/32.png?text=LOGO\"",
			"\t\t\t\t\t\t\talt=\"logo\"",
			"\t\t\t\t\t\t/>",
			"\t\t\t\t\t</NavMenu.Item>",
			"\t\t\t\t\t<NavMenu.Item>总览</NavMenu.Item>",
			"\t\t\t\t</>",
			"\t\t\t}",
			"\t\t/>",
			"\t</Header>",
			"\t<Body>",
			"\t\t<Content>",
			"\t\t\t<Content.Header",
			"\t\t\t\tshowBackButton",
			"\t\t\t\tonBackButtonClick={console.log}",
			"\t\t\t\ttitle=\"内容标题\"",
			"\t\t\t\tsubtitle={",
			"\t\t\t\t\t<>",
			"\t\t\t\t\t\t说明文字 <Text theme=\"label\">带颜色说明文字</Text>",
			"\t\t\t\t\t</>",
			"\t\t\t\t}",
			"\t\t\t\toperation={<ExternalLink weak>内容帮助</ExternalLink>}",
			"\t\t\t/>",
			"\t\t\t<Content.Body full>",
			"\t\t\t\t{/* 内容区域一般使用 Card 组件显示内容 */}",
			"\t\t\t\t<Card>",
			"\t\t\t\t\t<Card.Body>内容卡片</Card.Body>",
			"\t\t\t\t</Card>",
			"\t\t\t</Content.Body>",
			"\t\t</Content>",
			"\t</Body>",
			"</Layout>"
		],
		"description": "Log output to console"
	},
	"表格_基本用法": {
		"prefix": "tea-table(表格_基本用法)",
		"body": [
			"<Table",
			"\tcompact={compact}",
			"\tbordered={bordered}",
			"\tverticalTop={verticalTop}",
			"\tdisableTextOverflow={disableTextOverflow}",
			"\trecords={status === \"empty\" ? [] : cvmList}",
			"\trecordKey=\"instanceId\"",
			"\trowDisabled={record => record.status === \"stopped\"}",
			"\trowClassName={record => record.status}",
			"\tcolumns={[",
			"\t\t{",
			"\t\t\tkey: \"instance\",",
			"\t\t\theader: \"ID/实例名\",",
			"\t\t\trender: cvm => (",
			"\t\t\t\t<>",
			"\t\t\t\t\t<p>",
			"\t\t\t\t\t\t<a>{cvm.instanceId}</a>",
			"\t\t\t\t\t</p>",
			"\t\t\t\t\t<p>{cvm.instanceName}</p>",
			"\t\t\t\t</>",
			"\t\t\t),",
			"\t\t},",
			"\t\t{",
			"\t\t\tkey: \"status\",",
			"\t\t\theader: \"状态\",",
			"\t\t\twidth: 100,",
			"\t\t\trender: cvm => {",
			"\t\t\t\tif (cvm.status === \"running\") {",
			"\t\t\t\t\treturn <span style={{ color: \"green\" }}>运行中</span>;",
			"\t\t\t\t}",
			"\t\t\t\tif (cvm.status === \"stopped\") {",
			"\t\t\t\t\treturn <span style={{ color: \"red\" }}>已关机</span>;",
			"\t\t\t\t}",
			"\t\t\t\treturn cvm.status;",
			"\t\t\t},",
			"\t\t},",
			"\t\t{",
			"\t\t\tkey: \"area\",",
			"\t\t\theader: \"可用区域\",",
			"\t\t},",
			"\t\t{",
			"\t\t\tkey: \"areaDetail.zone\",",
			"\t\t\theader: \"所在区\",",
			"\t\t},",
			"\t\t{",
			"\t\t\tkey: \"modal\",",
			"\t\t\theader: \"主机型号\",",
			"\t\t},",
			"\t\t{",
			"\t\t\tkey: \"publicIP\",",
			"\t\t\theader: \"IP 地址\",",
			"\t\t},",
			"\t\t{",
			"\t\t\tkey: \"desc\",",
			"\t\t\theader: \"描述\",",
			"\t\t\talign: \"right\",",
			"\t\t},",
			"\t]}",
			"\ttopTip={",
			"\t\tstatus !== \"none\" && (",
			"\t\t\t<StatusTip",
			"\t\t\t\t// @ts-ignore",
			"\t\t\t\tstatus={status}",
			"\t\t\t\tonClear={() => setStatus(\"loading\")}",
			"\t\t\t\tonRetry={() => setStatus(\"loading\")}",
			"\t\t\t/>",
			"\t\t)",
			"\t}",
			"/>"
		],
		"description": "Log output to console"
	},
	"标签_基本用法": {
		"prefix": "tea-tag(标签_基本用法)",
		"body": [
			"<Tag",
			"\tkey={id}",
			"\tonClose={() => {}}",
			">",
			"\t这是一个标签",
			"</Tag>"
		],
		"description": "Log output to console"
	},
	"树形控件_基本用法": {
		"prefix": "tea-tree(树形控件_基本用法)",
		"body": [
			"const [selectIds, setSelectIds] = useState([\"0-0-0-1\"]);",
			"return (",
			"\t<Tree",
			"\t\tselectable",
			"\t\tselectedIds={selectIds}",
			"\t\tonSelect={(value, context) => {",
			"\t\t\tconsole.log(value, context);",
			"\t\t\tsetSelectIds(value);",
			"\t\t}}",
			"\t\tdefaultExpandedIds={[\"0-0\", \"0-0-0\"]}",
			"\t>",
			"\t\t<Tree.Node id=\"0-0\" content=\"0-0\">",
			"\t\t\t<Tree.Node id=\"0-0-0\" content=\"0-0-0\">",
			"\t\t\t\t<Tree.Node id=\"0-0-0-1\" content=\"0-0-0-1\" />",
			"\t\t\t\t<Tree.Node id=\"0-0-0-2\" content=\"0-0-0-2\" />",
			"\t\t\t</Tree.Node>",
			"\t\t\t<Tree.Node id=\"0-0-1\" content=\"0-0-1\">",
			"\t\t\t\t<Tree.Node id=\"0-0-1-1\" content=\"0-0-1-1\" />",
			"\t\t\t\t<Tree.Node id=\"0-0-1-2\" content=\"0-0-1-2\" />",
			"\t\t\t</Tree.Node>",
			"\t\t</Tree.Node>",
			"\t</Tree>",
			");"
		],
		"description": "Log output to console"
	},
	"树形控件_包含操作": {
		"prefix": "tea-tree(树形控件_包含操作)",
		"body": [
			"const [selectIds, setSelectIds] = useState([]);",
			"return (",
			"\t<Tree",
			"\t\tselectable",
			"\t\tselectedIds={selectIds}",
			"\t\tonSelect={(value, context) => {",
			"\t\t\tconsole.log(value, context);",
			"\t\t\tsetSelectIds(value);",
			"\t\t}}",
			"\t>",
			"\t\t<Tree.Node",
			"\t\t\tid=\"0-0\"",
			"\t\t\tcontent=\"分组一很长很长很长很长很长很长很长很长很长很长很长很长很长很长很长很长很长很长很长很长很长很长\"",
			"\t\t\toperation={<Tree.Node.ActionLink>新增</Tree.Node.ActionLink>}",
			"\t\t>",
			"\t\t\t<Tree.Node id=\"0-0-0\" content=\"0-0-0\" />",
			"\t\t</Tree.Node>",
			"\t\t<Tree.Node",
			"\t\t\tid=\"0-1\"",
			"\t\t\tcontent=\"0-1\"",
			"\t\t\toperation={",
			"\t\t\t\t<Dropdown appearance=\"link\" button=\"操作\">",
			"\t\t\t\t\t<List type=\"option\">",
			"\t\t\t\t\t\t<List.Item>操作一</List.Item>",
			"\t\t\t\t\t\t<List.Item>操作二</List.Item>",
			"\t\t\t\t\t</List>",
			"\t\t\t\t</Dropdown>",
			"\t\t\t}",
			"\t\t>",
			"\t\t\t<Tree.Node id=\"0-1-0\" content=\"0-1-0\">",
			"\t\t\t\t<Tree.Node id=\"0-1-0-1\" content=\"0-1-0-1\" />",
			"\t\t\t\t<Tree.Node id=\"0-1-0-2\" content=\"0-1-0-2\" />",
			"\t\t\t</Tree.Node>",
			"\t\t</Tree.Node>",
			"\t</Tree>",
			");"
		],
		"description": "Log output to console"
	},
	"自动补全_基本用法": {
		"prefix": "tea-autocomplete(自动补全_基本用法)",
		"body": [
			"<AutoComplete",
			"\toptions={options.filter(({ text }) => text.includes(inputValue1))}",
			"\tgroups={groups}",
			"\tkeyword={inputValue1}",
			"\ttips=\"没有匹配的标签\"",
			"\tonChange={value => {",
			"\t\tconst option = options.find(opt => opt.value === value);",
			"\t\tsetInputValue1(option.text);",
			"\t\tconsole.log(value);",
			"\t}}",
			"\tonScrollBottom={event => console.log(event)}",
			">",
			"\t{ref => (",
			"\t\t<Input",
			"\t\t\tref={ref}",
			"\t\t\tvalue={inputValue1}",
			"\t\t\tonChange={value => setInputValue1(value)}",
			"\t\t/>",
			"\t)}",
			"</AutoComplete>",
			"${BLOCK_COMMENT_START}",
			"const options = [",
			"\t{ groupKey: \"fruit\", value: \"strawberry\", text: \"草莓\", tooltip: \"甜甜甜\" },",
			"\t{ groupKey: \"fruit\", value: \"cranberry\", text: \"红莓\", disabled: true },",
			"\t{ groupKey: \"fruit\", value: \"raspberry\", text: \"树莓\" },",
			"\t{ groupKey: \"drink\", value: \"coca-cola\", text: \"可口可乐\" },",
			"\t{",
			"\t\tgroupKey: \"drink\",",
			"\t\tvalue: \"pepsi-cola\",",
			"\t\ttext: \"百事可乐\",",
			"\t\ttooltip: \"百事可乐为什么比可口可乐好喝？\",",
			"\t},",
			"];",
			"const groups = {",
			"\tfruit: \"水果\",",
			"\tdrink: \"饮料\",",
			"};",
			"const [inputValue1, setInputValue1] = useState(\"\");",
			"${BLOCK_COMMENT_END}"
		],
		"description": "Log output to console"
	},
	"自动补全_支持 options 外输入": {
		"prefix": "tea-autocomplete(支持 options 外输入)",
		"body": [
			"<AutoComplete",
			"\toptions={withInputOption(options, inputValue2)}",
			"\tgroups={groups}",
			"\tkeyword={inputValue2}",
			"\tonChange={value => {",
			"\t\tconst option = withInputOption(options, inputValue2).find(",
			"\t\t\topt => opt.value === value",
			"\t\t);",
			"\t\tsetInputValue2(option.text);",
			"\t\tconsole.log(value);",
			"\t}}",
			">",
			"\t{ref => (",
			"\t\t<Input",
			"\t\t\tref={ref}",
			"\t\t\tvalue={inputValue2}",
			"\t\t\tonChange={value => setInputValue2(value)}",
			"\t\t/>",
			"\t)}",
			"</AutoComplete>",
			"${BLOCK_COMMENT_START}",
			"const tabs = [",
			"const INPUT_VALUE = \"__user_input__\";",
			"const withInputOption = (options, text) => {",
			"\tconst filteredOptions = options.filter(opt => opt.text.includes(text));",
			"\tif (!filteredOptions.length) {",
			"\t\tfilteredOptions.push({ value: INPUT_VALUE, text });",
			"\t}",
			"\treturn filteredOptions;",
			"};",
			"const groups = {",
			"\tfruit: \"水果\",",
			"\tdrink: \"饮料\",",
			"};",
			"const [inputValue2, setInputValue2] = useState(\"\");",
			"${BLOCK_COMMENT_END}"
		],
		"description": "Log output to console"
	},
	"自动补全_异步加载": {
		"prefix": "tea-autocomplete(自动补全_异步加载)",
		"body": [
			"const [options, setOptions] = useState([]);",
			"",
			"const [loading, setLoading] = useState(true);",
			"const [error, setError] = useState(false);",
			"",
			"const [inputValue, setInputValue] = useState(\"\");",
			"const inputRef = useRef(null);",
			"const timerRef = useRef(null);",
			"",
			"useEffect(() => {",
			"\tfetchOptions();",
			"\treturn () => timerRef.current && clearTimeout(timerRef.current);",
			"}, []);",
			"",
			"async function fetchOptions(keyword = \"\") {",
			"\ttry {",
			"\t\tconst options = await new Promise((resolve, reject) => {",
			"\t\t\tsetTimeout(() => {",
			"\t\t\t\tif (Math.random() > 0.8) {",
			"\t\t\t\t\treject(new Error());",
			"\t\t\t\t\treturn;",
			"\t\t\t\t}",
			"\t\t\t\tresolve(remoteOptions.filter(({ text }) => text.includes(keyword)));",
			"\t\t\t}, 800);",
			"\t\t});",
			"\t\tif (inputRef.current !== keyword) {",
			"\t\t\treturn;",
			"\t\t}",
			"\t\tsetOptions(options);",
			"\t} catch (err) {",
			"\t\tsetError(true);",
			"\t}",
			"\tsetLoading(false);",
			"}",
			"",
			"return (",
			"\t<AutoComplete",
			"\t\toptions={options}",
			"\t\tkeyword={inputValue}",
			"\t\ttips={",
			"\t\t\t<StatusTip",
			"\t\t\t\tstatus={loading ? \"loading\" : error ? \"error\" : \"empty\"} // eslint-disable-line no-nested-ternary",
			"\t\t\t\tonRetry={() => {",
			"\t\t\t\t\tsetError(false);",
			"\t\t\t\t\tsetLoading(true);",
			"\t\t\t\t\tfetchOptions(inputValue);",
			"\t\t\t\t}}",
			"\t\t\t/>",
			"\t\t}",
			"\t\tonChange={value => {",
			"\t\t\tconst option = options.find(opt => opt.value === value);",
			"\t\t\tsetInputValue(option.text);",
			"\t\t\tconsole.log(value);",
			"\t\t}}",
			"\t>",
			"\t\t{ref => (",
			"\t\t\t<Input",
			"\t\t\t\tsize=\"full\"",
			"\t\t\t\tref={ref}",
			"\t\t\t\tvalue={inputValue}",
			"\t\t\t\tonChange={value => {",
			"\t\t\t\t\tif (timerRef.current) {",
			"\t\t\t\t\t\tclearTimeout(timerRef.current);",
			"\t\t\t\t\t}",
			"\t\t\t\t\tinputRef.current = value;",
			"\t\t\t\t\ttimerRef.current = setTimeout(() => fetchOptions(value), 500);",
			"\t\t\t\t\tsetLoading(true);",
			"\t\t\t\t\tsetOptions([]);",
			"\t\t\t\t\tsetInputValue(value);",
			"\t\t\t\t}}",
			"\t\t\t/>",
			"\t\t)}",
			"\t</AutoComplete>",
			");",
			"${BLOCK_COMMENT_START}",
			"const remoteOptions = [",
			"\t{ value: \"strawberry\", text: \"草莓\", tooltip: \"甜甜甜\" },",
			"\t{ value: \"apple\", text: \"红莓\", disabled: true },",
			"\t{ value: \"orange\", text: \"树莓\" },",
			"\t{ value: \"coca-cola\", text: \"可口可乐\" },",
			"\t{",
			"\t\tvalue: \"pepsi-cola\",",
			"\t\ttext: \"百事可乐\",",
			"\t\ttooltip: \"百事可乐为什么比可口可乐好喝？\",",
			"\t},",
			"];",
			"${BLOCK_COMMENT_END}"
		],
		"description": "Log output to console"
	},
	"多选": {
		"prefix": "tea-checkbox(多选)",
		"body": [
			"<Checkbox.Group value={taste} onChange={value => setTaste(value)}${1|>, layout=\"column\">|}",
			"\t<Checkbox name=\"la\">加辣</Checkbox>",
			"\t<Checkbox name=\"ma\">加麻</Checkbox>",
			"\t<Checkbox name=\"nocong\">不要葱花</Checkbox>",
			"</Checkbox.Group>",
			"${BLOCK_COMMENT_START}",
			"const [taste, setTaste] = useState([]);",
			"layout=\"column\" 垂直分布",
			"${BLOCK_COMMENT_END}"
		],
		"description": "Log output to console"
	},
	"级联选择_基本用法": {
		"prefix": "tea-cascader(级联选择_基本用法)",
		"body": [
			"<Cascader",
			"${1| ,multiple|} // 单选，多选",
			"\tclearable",
			"\ttype=\"menu\"",
			"\tdata={data}",
			"\tmultiple={false}",
			"\tonChange={(value, { options }) => console.log(value, options)}",
			"/>",
			"${BLOCK_COMMENT_START}",
			"const data = [",
			"\t{",
			"\t\tlabel: \"北京市\",",
			"\t\tvalue: \"bj\",",
			"\t\tchildren: [",
			"\t\t\t{ label: \"朝阳区\", value: \"cy\" },",
			"\t\t\t{ label: \"海淀区\", value: \"hd\" },",
			"\t\t],",
			"\t},",
			"\t{",
			"\t\tlabel: \"上海市\",",
			"\t\tvalue: \"sh\",",
			"\t\tchildren: [",
			"\t\t\t{ label: \"徐汇区\", value: \"xh\" },",
			"\t\t\t{ label: \"黄埔区\", value: \"hp\" },",
			"\t\t],",
			"\t},",
			"\t{",
			"\t\tlabel: \"广东省\",",
			"\t\tvalue: \"gd\",",
			"\t\tchildren: [",
			"\t\t\t{",
			"\t\t\t\tlabel: \"深圳市\",",
			"\t\t\t\tvalue: \"sz\",",
			"\t\t\t\tchildren: [",
			"\t\t\t\t\t{ label: \"南山区\", value: \"ns\" },",
			"\t\t\t\t\t{ label: \"宝安区\", value: \"ba\" },",
			"\t\t\t\t\t{ label: \"福田区\", value: \"ft\", disabled: true },",
			"\t\t\t\t],",
			"\t\t\t},",
			"\t\t],",
			"\t},",
			"];",
			"${BLOCK_COMMENT_END}"
		],
		"description": "Log output to console"
	},
	"级联选择_包含全选": {
		"prefix": "tea-cascader(级联选择_包含全选)",
		"body": [
			"<Cascader",
			"\tall",
			"\tmultiple={${1|false,true|}}",
			"\tclearable",
			"\ttype=\"menu\"",
			"\tdata={data}",
			"\tonChange={(value, { options }) => console.log(value, options)}",
			"/>",
			"${BLOCK_COMMENT_START}",
			"const data = [",
			"\t{",
			"\t\tlabel: \"北京市\",",
			"\t\tvalue: \"bj\",",
			"\t\tchildren: [",
			"\t\t\t{ label: \"朝阳区\", value: \"cy\" },",
			"\t\t\t{ label: \"海淀区\", value: \"hd\" },",
			"\t\t],",
			"\t},",
			"\t{",
			"\t\tlabel: \"上海市\",",
			"\t\tvalue: \"sh\",",
			"\t\tchildren: [",
			"\t\t\t{ label: \"徐汇区\", value: \"xh\" },",
			"\t\t\t{ label: \"黄埔区\", value: \"hp\" },",
			"\t\t],",
			"\t},",
			"\t{",
			"\t\tlabel: \"广东省\",",
			"\t\tvalue: \"gd\",",
			"\t\tchildren: [",
			"\t\t\t{",
			"\t\t\t\tlabel: \"深圳市\",",
			"\t\t\t\tvalue: \"sz\",",
			"\t\t\t\tchildren: [",
			"\t\t\t\t\t{ label: \"南山区\", value: \"ns\" },",
			"\t\t\t\t\t{ label: \"宝安区\", value: \"ba\" },",
			"\t\t\t\t\t{ label: \"福田区\", value: \"ft\", disabled: true },",
			"\t\t\t\t],",
			"\t\t\t},",
			"\t\t],",
			"\t},",
			"];",
			"${BLOCK_COMMENT_END}"
		],
		"description": "Log output to console"
	},
	"级联选择_可搜索": {
		"prefix": "tea-cascader(级联选择_可搜索)",
		"body": [
			"<Cascader",
			"\texpandTrigger=\"hover\"",
			"\ttype=\"menu\"",
			"\tclearable",
			"\tsearchable",
			"\tdata={data}",
			"\tonChange={(value, { options }) => console.log(value, options)}",
			"\tmultiple={${1|false,true|}}",
			"/>",
			"${BLOCK_COMMENT_START}",
			"const data = [",
			"\t{",
			"\t\tlabel: \"北京市\",",
			"\t\tvalue: \"bj\",",
			"\t\tchildren: [",
			"\t\t\t{ label: \"朝阳区\", value: \"cy\" },",
			"\t\t\t{ label: \"海淀区\", value: \"hd\" },",
			"\t\t],",
			"\t},",
			"\t{",
			"\t\tlabel: \"上海市\",",
			"\t\tvalue: \"sh\",",
			"\t\tchildren: [",
			"\t\t\t{ label: \"徐汇区\", value: \"xh\" },",
			"\t\t\t{ label: \"黄埔区\", value: \"hp\" },",
			"\t\t],",
			"\t},",
			"\t{",
			"\t\tlabel: \"广东省\",",
			"\t\tvalue: \"gd\",",
			"\t\tchildren: [",
			"\t\t\t{",
			"\t\t\t\tlabel: \"深圳市\",",
			"\t\t\t\tvalue: \"sz\",",
			"\t\t\t\tchildren: [",
			"\t\t\t\t\t{ label: \"南山区\", value: \"ns\" },",
			"\t\t\t\t\t{ label: \"宝安区\", value: \"ba\" },",
			"\t\t\t\t\t{ label: \"福田区\", value: \"ft\", disabled: true },",
			"\t\t\t\t],",
			"\t\t\t},",
			"\t\t],",
			"\t},",
			"];",
			"${BLOCK_COMMENT_END}"
		],
		"description": "Log output to console"
	},
	"级联选择_移入触发": {
		"prefix": "tea-cascader(级联选择_移入触发)",
		"body": [
			"<Cascader",
			"\texpandTrigger=\"hover\"",
			"\ttype=\"menu\"",
			"\tclearable",
			"\tsearchable",
			"\tdata={data}",
			"\tonChange={(value, { options }) => console.log(value, options)}",
			"\tmultiple={${1|false,true|}}",
			"/>",
			"${BLOCK_COMMENT_START}",
			"const data = [",
			"\t{",
			"\t\tlabel: \"北京市\",",
			"\t\tvalue: \"bj\",",
			"\t\tchildren: [",
			"\t\t\t{ label: \"朝阳区\", value: \"cy\" },",
			"\t\t\t{ label: \"海淀区\", value: \"hd\" },",
			"\t\t],",
			"\t},",
			"\t{",
			"\t\tlabel: \"上海市\",",
			"\t\tvalue: \"sh\",",
			"\t\tchildren: [",
			"\t\t\t{ label: \"徐汇区\", value: \"xh\" },",
			"\t\t\t{ label: \"黄埔区\", value: \"hp\" },",
			"\t\t],",
			"\t},",
			"\t{",
			"\t\tlabel: \"广东省\",",
			"\t\tvalue: \"gd\",",
			"\t\tchildren: [",
			"\t\t\t{",
			"\t\t\t\tlabel: \"深圳市\",",
			"\t\t\t\tvalue: \"sz\",",
			"\t\t\t\tchildren: [",
			"\t\t\t\t\t{ label: \"南山区\", value: \"ns\" },",
			"\t\t\t\t\t{ label: \"宝安区\", value: \"ba\" },",
			"\t\t\t\t\t{ label: \"福田区\", value: \"ft\", disabled: true },",
			"\t\t\t\t],",
			"\t\t\t},",
			"\t\t],",
			"\t},",
			"];",
			"${BLOCK_COMMENT_END}"
		],
		"description": "Log output to console"
	},
	"日期选择_基本用法": {
		"prefix": "tea-datepicker(日期选择)",
		"body": [
			"<DatePicker",
			"\tdefaultValue={moment(\"2020-10-01\")}",
			"\tonChange={value => console.log(value.format(\"YYYY/MM/DD\"))}",
			"\tonOpenChange={open => console.log(open ? \"open\" : \"close\")}",
			"/>"
		],
		"description": "Log output to console"
	},
	"日期选择_自定义格式": {
		"prefix": "tea-datepicker(日期选择)",
		"body": [
			"<DatePicker",
			"\tformat=\"LL\"",
			"\tdefaultValue={moment(\"2020-10-01\")}",
			"\tonChange={value => console.log(value.format(\"YYYY/MM/DD\"))}",
			"/>",
			"${BLOCK_COMMENT_START}",
			"format 日期展示格式 string \"YYYY-MM-DD\" 或 \"YYYY-MM-DD HH:mm:ss\"（包含时间选择时）",
			"${BLOCK_COMMENT_END}"
		],
		"description": "Log output to console"
	},
	"日期选择_包含时间": {
		"prefix": "tea-datepicker(日期选择)",
		"body": [
			"<DatePicker showTime onChange={value => console.log(value.format())} />"
		],
		"description": "Log output to console"
	},
	"日期选择_自定义时间格式": {
		"prefix": "tea-datepicker(日期选择)",
		"body": [
			"<DatePicker",
			"\tformat=\"YYYY-MM-DD HH:mm\"",
			"\tshowTime={{ format: \"HH:mm\", minuteStep: 30 }}",
			"\tdefaultValue={moment(\"2020-10-01 10:30\")}",
			"\tonChange={value => console.log(value.format())}",
			"/>"
		],
		"description": "Log output to console"
	},
	"日期选择_月份选择": {
		"prefix": "tea-datepicker(日期选择_月份选择)",
		"body": [
			"<MonthPicker",
			"\tdefaultValue={moment(\"2020-12\")}",
			"\tonChange={value => console.log(value.format())}",
			"/>",
			"${BLOCK_COMMENT_START}",
			"const { MonthPicker } = DatePicker;",
			"${BLOCK_COMMENT_END}"
		],
		"description": "Log output to console"
	},
	"区间选择_基本用法": {
		"prefix": "tea-datepicker(日期选择_区间选择)",
		"body": [
			"<RangePicker",
			"\tdefaultValue={[moment(\"2020-10-01\"), moment(\"2020-11-11\")]}",
			"\tonChange={value =>",
			"\t\tconsole.log(",
			"\t\t\tvalue[0].format(\"YYYY/MM/DD\"),",
			"\t\t\tvalue[1].format(\"YYYY/MM/DD\")",
			"\t\t)",
			"\t}",
			"\tonOpenChange={open => console.log(open ? \"open\" : \"close\")}",
			"/>"
		],
		"description": "Log output to console"
	},
	"区间选择_包含时间": {
		"prefix": "tea-datepicker(日期选择_区间选择)",
		"body": [
			"<RangePicker",
			"\tdefaultValue={[moment(\"2020-10-01\"), moment(\"2020-11-11\")]}",
			"\tshowTime",
			"\tonChange={value => console.log(value[0].format(), value[1].format())}",
			"/>"
		],
		"description": "Log output to console"
	},
	"区间选择_自定义时间格式": {
		"prefix": "tea-datepicker(日期选择_区间选择)",
		"body": [
			"<RangePicker",
			"\tseparator=\"至\"",
			"\tformat=\"YYYY-MM-DD HH:mm\"",
			"\tshowTime={{ format: \"HH:mm\", minuteStep: 30 }}",
			"\tdefaultValue={[",
			"\t\tmoment(\"2020-10-01 10:30\"),",
			"\t\tmoment(\"2020-11-11 22:30\"),",
			"\t]}",
			"\tonChange={value => console.log(value[0].format(), value[1].format())}",
			"/>",
			"${BLOCK_COMMENT_START}",
			"const { RangePicker } = DatePicker;",
			"${BLOCK_COMMENT_END}"
		],
		"description": "Log output to console"
	},
	"disabledDate 限制": {
		"prefix": "tea-datepicker(日期选择_限制可选范围)",
		"body": [
			"<RangePicker",
			"\tdisabledDate={disabledDate}",
			"\tonChange={value =>",
			"\t\tconsole.log(",
			"\t\t\tvalue[0].format(\"YYYY/MM/DD\"),",
			"\t\t\tvalue[1].format(\"YYYY/MM/DD\")",
			"\t\t)",
			"\t}",
			"/>",
			"${BLOCK_COMMENT_START}",
			"const { RangePicker, MonthPicker } = DatePicker;",
			"function disabledDate(date, start) {",
			"\t// 选择范围在今天之前，且选择跨度不大于七天",
			"\tconst isAfterToday = date.isAfter(moment(), \"day\");",
			"\tif (moment.isMoment(start)) {",
			"\t\treturn (",
			"\t\t\t!isAfterToday &&",
			"\t\t\t!(",
			"\t\t\t\tmoment(date)",
			"\t\t\t\t\t.subtract(6, \"day\")",
			"\t\t\t\t\t.isAfter(start, \"day\") ||",
			"\t\t\t\tmoment(date)",
			"\t\t\t\t\t.add(6, \"day\")",
			"\t\t\t\t\t.isBefore(start, \"day\")",
			"\t\t\t)",
			"\t\t);",
			"\t}",
			"\treturn !isAfterToday;",
			"}",
			"${BLOCK_COMMENT_END}"
		],
		"description": "Log output to console"
	},
	"disabledTime 限制": {
		"prefix": "tea-datepicker(日期选择_限制可选范围)",
		"body": [
			"<RangePicker",
			"\tshowTime={{ minuteStep: 5, secondStep: 30 }}",
			"\tdisabledDate={disabledDate}",
			"\tdisabledTime={disabledTime}",
			"\tonChange={value => console.log(value[0].format(), value[1].format())}",
			"/>",
			"${BLOCK_COMMENT_START}",
			"const { RangePicker, MonthPicker } = DatePicker;",
			"",
			"const range = (s, t) =>",
			"\tArray(t - s + 1)",
			"\t\t.fill(0)",
			"\t\t.map((_, i) => s + i);",
			"",
			"function disabledDate(date, start) {",
			"\t// 选择范围在今天之前，且选择跨度不大于七天",
			"\tconst isAfterToday = date.isAfter(moment(), \"day\");",
			"\tif (moment.isMoment(start)) {",
			"\t\treturn (",
			"\t\t\t!isAfterToday &&",
			"\t\t\t!(",
			"\t\t\t\tmoment(date)",
			"\t\t\t\t\t.subtract(6, \"day\")",
			"\t\t\t\t\t.isAfter(start, \"day\") ||",
			"\t\t\t\tmoment(date)",
			"\t\t\t\t\t.add(6, \"day\")",
			"\t\t\t\t\t.isBefore(start, \"day\")",
			"\t\t\t)",
			"\t\t);",
			"\t}",
			"\treturn !isAfterToday;",
			"}",
			"",
			"function disabledTime(dates, partial) {",
			"\t// const [start, end] = dates;",
			"\tif (partial === \"start\") {",
			"\t\treturn {",
			"\t\t\tdisabledHours: () => [...range(0, 8), ...range(18, 23)],",
			"\t\t\tdisabledMinutes: hour => (hour === 9 ? range(0, 29) : []),",
			"\t\t};",
			"\t}",
			"\treturn {",
			"\t\tdisabledHours: () => range(17, 19),",
			"\t\tdisabledSeconds: () => range(1, 59),",
			"\t};",
			"}",
			"${BLOCK_COMMENT_END}"
		],
		"description": "Log output to console"
	},
	"日期选择 range": {
		"prefix": "tea-datepicker(日期选择_限制可选范围)",
		"body": [
			"<DatePicker",
			"\tdefaultValue={moment(\"2020-10-01\")}",
			"\trange={[moment(\"2020-09-01\"), moment(\"2020-11-11\")]}",
			"\tonChange={value => console.log(value.format(\"YYYY/MM/DD\"))}",
			"/>"
		],
		"description": "Log output to console"
	},
	"包含时间的日期选择 range": {
		"prefix": "tea-datepicker(日期选择_限制可选范围)",
		"body": [
			"<DatePicker",
			"\tshowTime",
			"\trange={[moment(\"2019-12-02 12:30:00\"), moment(\"2020-12-12 12:30:00\")]}",
			"\tonChange={value => console.log(value.format())}",
			"/>",
			"${BLOCK_COMMENT_END}"
		],
		"description": "Log output to console"
	},
	"月份选择 range": {
		"prefix": "tea-datepicker(日期选择_限制可选范围)",
		"body": [
			"<MonthPicker",
			"\tdefaultValue={moment(\"2020-10-01\")}",
			"\trange={[moment(\"2019-09\"), moment(\"2020-12\")]}",
			"\tonChange={value => console.log(value.format(\"YYYY/MM/DD\"))}",
			"/>"
		],
		"description": "Log output to console"
	},
	"包含时间的范围选择 range": {
		"prefix": "tea-datepicker(日期选择_限制可选范围)",
		"body": [
			"<RangePicker",
			"\trange={[",
			"\t\tmoment()",
			"\t\t\t.subtract(6, \"d\")",
			"\t\t\t.startOf(\"d\"),",
			"\t\tmoment().endOf(\"d\"),",
			"\t]}",
			"\tdefaultValue={[",
			"\t\tmoment()",
			"\t\t\t.subtract(6, \"d\")",
			"\t\t\t.startOf(\"d\"),",
			"\t\tmoment().endOf(\"d\"),",
			"\t]}",
			"\tshowTime={{",
			"\t\tdefaultValue: [",
			"\t\t\tmoment(\"00:00:00\", \"HH:mm:ss\"),",
			"\t\t\tmoment(\"23:59:59\", \"HH:mm:ss\"),",
			"\t\t],",
			"\t}}",
			"\tonChange={value => console.log(value[0].format(), value[1].format())}",
			"/>"
		],
		"description": "Log output to console"
	},
	"日期选择_可清空": {
		"prefix": "tea-datepicker(日期选择_可清空)",
		"body": [
			"<RangePicker",
			"\tshowTime",
			"\tclearable",
			"\tonChange={value => console.log(value)}",
			"\tstyle={{ marginTop: 12 }}",
			"/>",
			"${BLOCK_COMMENT_START}",
			"const { MonthPicker, RangePicker } = DatePicker;",
			"${BLOCK_COMMENT_END}"
		],
		"description": "Log output to console"
	},
	"包含时区_日期选择": {
		"prefix": "tea-datepicker(日期选择_包含时区)",
		"body": [
			"{/* 时区变化后通过设置 key 重置日历面板 */}",
			"<DatePicker",
			"\tkey={timezone}",
			"\trange={[",
			"\t\tmoment()",
			"\t\t\t.tz(timezone)",
			"\t\t\t.subtract(2, \"d\")",
			"\t\t\t.startOf(\"d\"),",
			"\t\tmoment()",
			"\t\t\t.tz(timezone)",
			"\t\t\t.add(2, \"d\")",
			"\t\t\t.endOf(\"d\"),",
			"\t]}",
			"\tvalue={value}",
			"\tonChange={value => {",
			"\t\tsetValue(value);",
			"\t\tconsole.log(value.format(), value.tz());",
			"\t}}",
			"/>",
			"${BLOCK_COMMENT_START}",
			"const options = data.map(({ desc, id }) => ({",
			"\tvalue: id,",
			"\ttext: `${desc} - ${id}`,",
			"}));",
			"",
			"const [timezone, setTimezone] = useState(moment.tz.guess());",
			"const [value, setValue] = useState(moment().tz(timezone));",
			"${BLOCK_COMMENT_END}"
		],
		"description": "Log output to console"
	},
	"包含时区_包含时间和日期": {
		"prefix": "tea-datepicker(日期选择_包含时区)",
		"body": [
			"<DatePicker",
			"\tshowTime",
			"\tkey={timezone}",
			"\trange={[",
			"\t\tmoment()",
			"\t\t\t.tz(timezone)",
			"\t\t\t.subtract(2, \"d\")",
			"\t\t\t.startOf(\"d\"),",
			"\t\tmoment()",
			"\t\t\t.tz(timezone)",
			"\t\t\t.add(2, \"d\")",
			"\t\t\t.endOf(\"d\"),",
			"\t]}",
			"\tvalue={value}",
			"\tonChange={value => {",
			"\t\tsetValue(value);",
			"\t\tconsole.log(value.format(), value.tz());",
			"\t}}",
			"/>",
			"${BLOCK_COMMENT_START}",
			"const options = data.map(({ desc, id }) => ({",
			"\tvalue: id,",
			"\ttext: `${desc} - ${id}`,",
			"}));",
			"",
			"const [timezone, setTimezone] = useState(moment.tz.guess());",
			"const [value, setValue] = useState(moment().tz(timezone));",
			"${BLOCK_COMMENT_END}"
		],
		"description": "Log output to console"
	},
	"包含时区_时区选择": {
		"prefix": "tea-datepicker(日期选择_包含时区)",
		"body": [
			"<Select",
			"\tsearchable",
			"\ttype=\"simulate\"",
			"\tappearance=\"button\"",
			"\tsize=\"l\"",
			"\tboxSizeSync",
			"\toptions={options}",
			"\tvalue={timezone}",
			"\tonChange={tz => {",
			"\t\tsetTimezone(tz);",
			"\t\tsetValue(moment(value).tz(tz));",
			"\t\tconsole.log(tz);",
			"\t}}",
			"/>",
			"${BLOCK_COMMENT_START}",
			"const options = data.map(({ desc, id }) => ({",
			"\tvalue: id,",
			"\ttext: `${desc} - ${id}`,",
			"}));",
			"",
			"const [timezone, setTimezone] = useState(moment.tz.guess());",
			"const [value, setValue] = useState(moment().tz(timezone));",
			"${BLOCK_COMMENT_END}"
		],
		"description": "Log output to console"
	},
	"文本装饰_前部装饰": {
		"prefix": "tea-inputAdornment(输入装饰_文本装饰)",
		"body": [
			"<InputAdornment before=\"www.\">",
			"\t<Input />",
			"</InputAdornment>"
		],
		"description": "Log output to console"
	},
	"文本装饰_前后装饰": {
		"prefix": "tea-inputAdornment(输入装饰_文本装饰)",
		"body": [
			"<InputAdornment before=\"$\" after=\".00\">",
			"\t<Input size=\"s\" />",
			"</InputAdornment>"
		],
		"description": "Log output to console"
	},
	"文本装饰_后部装饰": {
		"prefix": "tea-inputAdornment(输入装饰_文本装饰)",
		"body": [
			"<InputAdornment after=\".com\">{domainSelect}</InputAdornment>"
		],
		"description": "Log output to console"
	},
	"文本装饰_数字输入装饰": {
		"prefix": "tea-inputAdornment(输入装饰_文本装饰)",
		"body": [
			"<InputAdornment after=\"Mbps\" appearance=\"pure\">",
			"\t<InputNumber />",
			"</InputAdornment>",
			"${BLOCK_COMMENT_START}",
			"const domainSelect = (",
			"\t<Select",
			"\t\toptions={[\"tencent\", \"qq\", \"cloud.tencent\"].map(value => ({ value }))}",
			"\t\tdefaultValue=\"tencent\"",
			"\t\tstyle={{ width: \"auto\" }}",
			"\t/>",
			");",
			"${BLOCK_COMMENT_END}"
		],
		"description": "Log output to console"
	},
	"下拉列表装饰_前部装饰": {
		"prefix": "tea-inputAdornment(输入装饰_下拉列表装饰)",
		"body": [
			"<InputAdornment before={protocolSelect}>",
			"\t<Input />",
			"</InputAdornment>",
			"${BLOCK_COMMENT_START}",
			"const protocolSelect = (",
			"\t<Select",
			"\t\toptions={[\"http://\", \"https://\"].map(value => ({ value }))}",
			"\t\tdefaultValue=\"http://\"",
			"\t\tstyle={{ width: \"auto\" }}",
			"\t/>",
			");",
			"${BLOCK_COMMENT_END}"
		],
		"description": "Log output to console"
	},
	"下拉列表装饰_后部装饰": {
		"prefix": "tea-inputAdornment(输入装饰_下拉列表装饰)",
		"body": [
			"<InputAdornment after={tldSelect}>",
			"\t<Input />",
			"</InputAdornment>",
			"${BLOCK_COMMENT_START}",
			"const tldSelect = (",
			"\t<Select",
			"\t\toptions={[\".com\", \".cn\", \".net\", \".org\"].map(value => ({ value }))}",
			"\t\tdefaultValue=\".cn\"",
			"\t\tstyle={{ width: \"auto\" }}",
			"\t/>",
			");",
			"${BLOCK_COMMENT_END}"
		],
		"description": "Log output to console"
	},
	"下拉列表装饰_前后装饰": {
		"prefix": "tea-inputAdornment(输入装饰_下拉列表装饰)",
		"body": [
			"<InputAdornment before={protocolSelect} after={tldSelect}>",
			"\t<Input />",
			"</InputAdornment>",
			"${BLOCK_COMMENT_START}",
			"const protocolSelect = (",
			"\t<Select",
			"\t\toptions={[\"http://\", \"https://\"].map(value => ({ value }))}",
			"\t\tdefaultValue=\"http://\"",
			"\t\tstyle={{ width: \"auto\" }}",
			"\t/>",
			");",
			"",
			"const tldSelect = (",
			"\t<Select",
			"\t\toptions={[\".com\", \".cn\", \".net\", \".org\"].map(value => ({ value }))}",
			"\t\tdefaultValue=\".cn\"",
			"\t\tstyle={{ width: \"auto\" }}",
			"\t/>",
			");",
			"${BLOCK_COMMENT_END}"
		],
		"description": "Log output to console"
	},
	"数字输入_基本用法": {
		"prefix": "tea-inputNumber(数字输入)",
		"body": [
			"<InputNumber",
			"\tvalue={value}",
			"\tonChange={value => {",
			"\t\tconsole.log(value);",
			"\t\tsetValue(value);",
			"\t}}",
			"\tmin={min}",
			"\tmax={max}",
			"\tstep={step}",
			"\tunit=\"台\"",
			"/>",
			"${BLOCK_COMMENT_START}",
			"const [min, setMin] = useState(0);",
			"const [max, setMax] = useState(10);",
			"const [step, setStep] = useState(1);",
			"const [value, setValue] = useState(0);",
			"${BLOCK_COMMENT_END}"
		],
		"description": "Log output to console"
	},
	"单选组": {
		"prefix": "tea-radio(单选)",
		"body": [
			"<Radio.Group value={gender} layout=\"${1|inline,column|}\" onChange={value => setGender(value)}>",
			"\t<Radio name=\"male\">男性</Radio>",
			"\t<Radio name=\"female\">女性</Radio>",
			"</Radio.Group>",
			"${BLOCK_COMMENT_START}",
			"const [gender, setGender] = useState(null);",
			"${BLOCK_COMMENT_END}"
		],
		"description": "Log output to console"
	},
	"受控 Radio": {
		"prefix": "tea-radio(单选)",
		"body": [
			"<Radio value={false}>",
			"\t未选中",
			"</Radio>"
		],
		"description": "Log output to console"
	},
	"搜索_基本用法": {
		"prefix": "tea-searchBox(搜索)",
		"body": [
			"<SearchBox",
			"\tshowHelp={${1|false,true|}}",
			"\tmultiline={${2|false,true|}}",
			"\tonSearch={console.log}",
			"\tonClear={() => console.log(\"clear\")}",
			"\tonHelp={() => console.log(\"help\")}",
			"/>"
		],
		"description": "Log output to console"
	},
	"分段选择_常规用法": {
		"prefix": "tea-segment(分段选择)",
		"body": [
			"<Segment",
			"\trimless={rimless}",
			"\tvalue={value.toString()}",
			"\tonChange={value => setValue(parseInt(value, 10))}",
			"\toptions={[",
			"\t\t{ text: \"1个月\", value: \"1\" },",
			"\t\t{ text: \"2个月\", value: \"2\" },",
			"\t\t{ text: \"3个月\", value: \"3\" },",
			"\t\t{",
			"\t\t\ttext: (",
			"\t\t\t\t<>",
			"\t\t\t\t\t半年",
			"\t\t\t\t\t<Badge theme=\"warning\" dark>",
			"\t\t\t\t\t\t8.8折",
			"\t\t\t\t\t</Badge>",
			"\t\t\t\t</>",
			"\t\t\t),",
			"\t\t\tvalue: \"6\",",
			"\t\t},",
			"\t\t{ text: \"1年\", value: \"12\" },",
			"\t\t{ text: \"2年\", value: \"24\", bubble: \"2 年享九折优惠\" },",
			"\t\t{",
			"\t\t\ttext: \"3年\",",
			"\t\t\tvalue: \"36\",",
			"\t\t\tdisabled: true,",
			"\t\t\ttooltip: \"暂时不支持购买 3 年\",",
			"\t\t},",
			"\t]}",
			"/>",
			"${BLOCK_COMMENT_START}",
			"const [value, setValue] = useState(2);",
			"${BLOCK_COMMENT_END}"
		],
		"description": "Log output to console"
	},
	"分段选择_分组": {
		"prefix": "tea-Segment(分段选择)",
		"body": [
			"<Segment",
			"\tvalue={value.toString()}",
			"\tonChange={value => setValue(parseInt(value, 10))}",
			"\toptions={options}",
			"\tgroups={groups}",
			"/>",
			"${BLOCK_COMMENT_START}",
			"const groups = {",
			"\thn: \"华南地区\",",
			"\thb: \"华北地区\",",
			"\thd: \"华东地区\",",
			"};",
			"",
			"const options = [",
			"\t{ groupKey: \"hn\", text: \"广州\", value: \"1\" },",
			"\t{ groupKey: \"hn\", text: \"深圳金融\", value: \"2\" },",
			"\t{ groupKey: \"hb\", text: \"北京\", value: \"3\" },",
			"\t{ groupKey: \"hb\", text: \"天津\", value: \"4\" },",
			"\t{ groupKey: \"hd\", text: \"上海\", value: \"5\" },",
			"\t{ groupKey: \"hd\", text: \"上海金融\", value: \"6\", bubble: \"上海金融\" },",
			"\t{",
			"\t\tgroupKey: \"hd\",",
			"\t\ttext: \"南京\",",
			"\t\tvalue: \"7\",",
			"\t\tdisabled: true,",
			"\t\ttooltip: \"暂不支持\",",
			"\t},",
			"];",
			"const [value, setValue] = useState(2);",
			"${BLOCK_COMMENT_END}"
		],
		"description": "Log output to console"
	},
	"下拉选择_单选": {
		"prefix": "tea-select(下拉选择)",
		"body": [
			"<Select",
			"\ttype=\"${1|simulate,native|}\"",
			"\tsize=\"${2|full,l,m,s,xs,auto|}\"",
			"\tappearance=\"${3|button,default,link,filter,pure|}\"",
			"\toptions={${4:[]}}",
			"\tvalue=\"$5\"",
			"\tonChange={(value) => console.log(value)}",
			"\tplaceholder=\"${6:请选择}\"",
			"/>",
			"${BLOCK_COMMENT_START}",
			"type 默认为 native，使用原生下拉框, 设置为 simulate 以使用模拟下拉框",
			"",
			"appearance",
			"下拉按钮的外观：",
			"default 无边框，适用于页面标题和表格内",
			"button 为按钮风格，有边框，多用于操作栏中",
			"link 为超链接风格",
			"filter 为过滤组件风格，多用于表头筛选",
			"pure 无额外样式",
			"${BLOCK_COMMENT_END}"
		],
		"description": "Log output to console"
	},
	"下拉选择_下拉列表宽度": {
		"prefix": "tea-select(下拉选择)",
		"body": [
			"<Select",
			"\tsize=\"m\"",
			"\ttype=\"simulate\"",
			"\tappearance=\"button\"",
			"\tvalue={value}",
			"\tonChange={value => setValue(value)}",
			"\tbutton={value ? `Option - ${value}` : null}",
			"\toptions={options}",
			"\tlistWidth={400}",
			"/>",
			"${BLOCK_COMMENT_START}",
			"模拟单项下拉列表使用了虚拟滚动，对于项内容较长的列表，需要使用 listWidth 属性控制默认宽度。",
			"${BLOCK_COMMENT_END}"
		],
		"description": "Log output to console"
	},
	"下拉选择_下拉列表高度": {
		"prefix": "tea-select(下拉选择)",
		"body": [
			"<Select",
			"\tsize=\"m\"",
			"\ttype=\"simulate\"",
			"\tsearchable",
			"\tboxSizeSync",
			"\tappearance=\"button\"",
			"\toptions={options}",
			"\tlistHeight={600}",
			"/>",
			"${BLOCK_COMMENT_START}",
			"模拟单项下拉列表使用了虚拟滚动，需要使用 listHeight 属性控制高度。",
			"${BLOCK_COMMENT_END}"
		],
		"description": "Log output to console"
	},
	"下拉选择_刷新": {
		"prefix": "tea-select(下拉选择)",
		"body": [
			"<Select",
			"\trefreshable",
			"\tonRefresh={getOptions}",
			"\ttype=\"simulate\"",
			"\tappearance=\"{$1|default,button|}\"",
			"\toptions={options}",
			"\tplaceholder=\"请选择你最爱的水果\"",
			"/>",
			"${BLOCK_COMMENT_START}",
			"appearance",
			"下拉按钮的外观：",
			"default 无边框，适用于页面标题和表格内",
			"button 为按钮风格，有边框，多用于操作栏中",
			"",
			"const defaultOptions = [",
			"\t{ value: \"strawberry\", text: \"草莓\", tooltip: \"甜甜甜\" },",
			"\t{ value: \"apple\", text: \"苹果\", tooltip: \"每日一苹果，医生远离我\" },",
			"\t{ value: \"orange\", text: \"橙子\", tooltip: \"丰富 VC 含量\" },",
			"\t{ value: \"durian\", text: \"榴莲\", disabled: true, tooltip: \"榴莲已售罄\" },",
			"];",
			"",
			"const [options, setOptions] = useState(defaultOptions);",
			"",
			"async function getOptions() {",
			"\tconst options = await new Promise(resolve => {",
			"\t\tsetTimeout(() => {",
			"\t\t\tresolve([",
			"\t\t\t\t...defaultOptions,",
			"\t\t\t\t{ value: \"coca-cola\", text: \"可口可乐\" },",
			"\t\t\t\t{ value: \"pepsi-cola\", text: \"百事可乐\" },",
			"\t\t\t]);",
			"\t\t}, 1000);",
			"\t});",
			"\tsetOptions(options);",
			"}",
			"${BLOCK_COMMENT_END}"			
		],
		"description": "Log output to console"
	},
	"下拉选择_列表底部内容": {
		"prefix": "tea-select(下拉选择)",
		"body": [
			"<Select",
			"\tsize=\"m\"",
			"\ttype=\"simulate\"",
			"\tboxSizeSync",
			"\tappearance=\"button\"",
			"\toptions={options}",
			"\tfooter={<a>新建选项</a>}",
			"/>"
		],
		"description": "Log output to console"
	},
	"下拉选择_动态加载": {
		"prefix": "tea-select(下拉选择)",
		"body": [
			"<Select",
			"\tsearchable",
			"\tboxSizeSync",
			"\tsize=\"m\"",
			"\ttype=\"simulate\"",
			"\tappearance=\"button\"",
			"\tfilter={() => true}",
			"\tonOpen={fetch}",
			"\tonSearch={fetch}",
			"\toptions={options}",
			"\tonChange={value => console.log(value)}",
			"\ttips={",
			"\t\tstatus && (",
			"\t\t\t<StatusTip",
			"\t\t\t\tstatus={status}",
			"\t\t\t\tonRetry={() => fetch(keywordRef.current)}",
			"\t\t\t/>",
			"\t\t)",
			"\t}",
			"/>",
			"${BLOCK_COMMENT_START}",
			"const sleep = ms => new Promise(resolve => setTimeout(resolve, ms));",
			"const [status, setStatus] = useState(null);",
			"const [options, setOptions] = useState([]);",
			"",
			"const timerRef = useRef(null);",
			"const keywordRef = useRef(\"\");",
			"",
			"const fetch = (inputValue = \"\") => {",
			"\tif (timerRef.current) {",
			"\t\tclearTimeout(timerRef.current);",
			"\t\ttimerRef.current = null;",
			"\t}",
			"\tkeywordRef.current = inputValue;",
			"",
			"\tsetStatus(\"loading\");",
			"\tsetOptions([]);",
			"",
			"\tconst mock = async () => {",
			"\t\tsetStatus(\"loading\");",
			"\t\tsetOptions([]);",
			"\t\tawait sleep(1000);",
			"\t\t// 模拟失败",
			"\t\tif (Math.random() > 0.9) {",
			"\t\t\tsetStatus(\"error\");",
			"\t\t\treturn;",
			"\t\t}",
			"\t\tif (keywordRef.current === inputValue) {",
			"\t\t\tsetStatus(null);",
			"\t\t\tsetOptions([",
			"\t\t\t\t{ value: `${inputValue}1`, text: `选项一 ${inputValue}` },",
			"\t\t\t\t{ value: `${inputValue}2`, text: `选项二 ${inputValue}` },",
			"\t\t\t\t{ value: `${inputValue}3`, text: `选项三 ${inputValue}` },",
			"\t\t\t]);",
			"\t\t}",
			"\t};",
			"",
			"\ttimerRef.current = setTimeout(mock, 300);",
			"};",
			"${BLOCK_COMMENT_END}"			
		],
		"description": "Log output to console"
	},
	"下拉选择_多选": {
		"prefix": "tea-select(下拉选择)",
		"body": [
			"<SelectMultiple",
			"\toptions={[",
			"\t\t{ value: \"gz\", text: \"瓜子\", tooltip: \"百煮入味香\" },",
			"\t\t{",
			"\t\t\tvalue: \"hs\",",
			"\t\t\ttext: \"花生\",",
			"\t\t\ttooltip: \"花生已售罄\",",
			"\t\t},",
			"\t\t{ value: \"bmf\", text: \"爆米花\", tooltip: \"焦糖味\" },",
			"\t\t{ value: \"kl\", text: \"可乐\", tooltip: \"肥宅快乐水\" },",
			"\t\t{ value: \"pj\", text: \"啤酒\" },",
			"\t\t{ value: \"kqs\", text: \"矿泉水\" },",
			"\t\t{ value: \"bbz\", text: \"八宝粥\" },",
			"\t]}",
			"\tallOption={{",
			"\t\tvalue: \"all\",",
			"\t\ttext: \"全选\",",
			"\t\ttooltip: \"我都要\",",
			"\t}}",
			"/>",
			"<SelectMultiple",
			"\tstaging={false}",
			"\tappearance=\"button\"",
			"\tdefaultValue={[\"gz\"]}",
			"\toptions={[",
			"\t\t{ value: \"gz\", text: \"瓜子\", tooltip: \"百煮入味香\" },",
			"\t\t{",
			"\t\t\tvalue: \"hs\",",
			"\t\t\ttext: \"花生\",",
			"\t\t\tdisabled: true,",
			"\t\t\ttooltip: \"花生已售罄\",",
			"\t\t},",
			"\t\t{ value: \"bmf\", text: \"爆米花\", tooltip: \"焦糖味\" },",
			"\t\t{ value: \"kl\", text: \"可乐\", tooltip: \"肥宅快乐水\" },",
			"\t\t{ value: \"pj\", text: \"啤酒\" },",
			"\t\t{ value: \"kqs\", text: \"矿泉水\" },",
			"\t\t{ value: \"bbz\", text: \"八宝粥\" },",
			"\t]}",
			"\tbutton={options =>",
			"\t\toptions.length ? (",
			"\t\t\t<Tooltip title={options.map(o => o.text).join(\", \")}>",
			"\t\t\t\t<div>",
			"\t\t\t\t\t<Tag.Group>",
			"\t\t\t\t\t\t{options.map(o => (",
			"\t\t\t\t\t\t\t<Tag key={o.value}>{o.text}</Tag>",
			"\t\t\t\t\t\t))}",
			"\t\t\t\t\t</Tag.Group>",
			"\t\t\t\t</div>",
			"\t\t\t</Tooltip>",
			"\t\t) : (",
			"\t\t\t\"请选择\"",
			"\t\t)",
			"\t}",
			"/>",
			"${BLOCK_COMMENT_START}",
			"通过 staging 控制是否直接触发改变",
			"${BLOCK_COMMENT_END}"
		],
		"description": "Log output to console"
	},
	"分组_原生下拉": {
		"prefix": "tea-select(下拉选择)",
		"body": [
			"<Select",
			"\ttype=\"native\"",
			"\tsize=\"m\"",
			"\tgroups={groups}",
			"\toptions={options}",
			"\tvalue={favorite}",
			"\tonChange={value => setFavorite(value)}",
			"\tplaceholder=\"请选择你最爱的水果\"",
			"/>",
			"${BLOCK_COMMENT_START}",
			"const options = [",
			"\t{ groupKey: \"fruit\", value: \"strawberry\", text: \"草莓\", tooltip: \"甜甜甜\" },",
			"\t{",
			"\t\tgroupKey: \"fruit\",",
			"\t\tvalue: \"apple\",",
			"\t\ttext: \"苹果\",",
			"\t\tdisabled: true,",
			"\t\ttooltip: \"每日一苹果，医生远离我\",",
			"\t},",
			"\t{ groupKey: \"fruit\", value: \"orange\", text: \"橙子\", tooltip: \"丰富 VC 含量\" },",
			"\t{ groupKey: \"drink\", value: \"coca-cola\", text: \"可口可乐\" },",
			"\t{",
			"\t\tgroupKey: \"drink\",",
			"\t\tvalue: \"pepsi-cola\",",
			"\t\ttext: \"百事可乐\",",
			"\t\ttooltip: \"百事可乐为什么比可口可乐好喝？\",",
			"\t},",
			"];",
			"",
			"const groups = {",
			"\tfruit: \"水果\",",
			"\tdrink: \"饮料\",",
			"};",
			"",
			"const [favorite, setFavorite] = useState(null);",
			"const [favorites, setFavorites] = useState([]);",
			"${BLOCK_COMMENT_END}"			
		],
		"description": "Log output to console"
	},
	"分组_模拟下拉": {
		"prefix": "tea-select(下拉选择)",
		"body": [
			"<Select",
			"\ttype=\"simulate\"",
			"\tappearance=\"default\"",
			"\tgroups={groups}",
			"\toptions={options}",
			"\tvalue={favorite}",
			"\tonChange={value => setFavorite(value)}",
			"\tplaceholder=\"请选择你最爱的食品\"",
			"/>",
			"const options = [",
			"\t{ groupKey: \"fruit\", value: \"strawberry\", text: \"草莓\", tooltip: \"甜甜甜\" },",
			"\t{",
			"\t\tgroupKey: \"fruit\",",
			"\t\tvalue: \"apple\",",
			"\t\ttext: \"苹果\",",
			"\t\tdisabled: true,",
			"\t\ttooltip: \"每日一苹果，医生远离我\",",
			"\t},",
			"\t{ groupKey: \"fruit\", value: \"orange\", text: \"橙子\", tooltip: \"丰富 VC 含量\" },",
			"\t{ groupKey: \"drink\", value: \"coca-cola\", text: \"可口可乐\" },",
			"\t{",
			"\t\tgroupKey: \"drink\",",
			"\t\tvalue: \"pepsi-cola\",",
			"\t\ttext: \"百事可乐\",",
			"\t\ttooltip: \"百事可乐为什么比可口可乐好喝？\",",
			"\t},",
			"];",
			"",
			"const groups = {",
			"\tfruit: \"水果\",",
			"\tdrink: \"饮料\",",
			"};",
			"",
			"const [favorite, setFavorite] = useState(null);",
			"const [favorites, setFavorites] = useState([]);"
		],
		"description": "Log output to console"
	},
	"分组_模拟下拉（分割线）": {
		"prefix": "tea-select(下拉选择)",
		"body": [
			"<Select",
			"\ttype=\"simulate\"",
			"\tappearance=\"default\"",
			"\toptions={options}",
			"\tvalue={favorite}",
			"\tonChange={value => setFavorite(value)}",
			"\tplaceholder=\"请选择你最爱的食品\"",
			"/>",
			"const options = [",
			"\t{ groupKey: \"fruit\", value: \"strawberry\", text: \"草莓\", tooltip: \"甜甜甜\" },",
			"\t{",
			"\t\tgroupKey: \"fruit\",",
			"\t\tvalue: \"apple\",",
			"\t\ttext: \"苹果\",",
			"\t\tdisabled: true,",
			"\t\ttooltip: \"每日一苹果，医生远离我\",",
			"\t},",
			"\t{ groupKey: \"fruit\", value: \"orange\", text: \"橙子\", tooltip: \"丰富 VC 含量\" },",
			"\t{ groupKey: \"drink\", value: \"coca-cola\", text: \"可口可乐\" },",
			"\t{",
			"\t\tgroupKey: \"drink\",",
			"\t\tvalue: \"pepsi-cola\",",
			"\t\ttext: \"百事可乐\",",
			"\t\ttooltip: \"百事可乐为什么比可口可乐好喝？\",",
			"\t},",
			"];",
			"",
			"const groups = {",
			"\tfruit: \"水果\",",
			"\tdrink: \"饮料\",",
			"};",
			"",
			"const [favorite, setFavorite] = useState(null);",
			"const [favorites, setFavorites] = useState([]);"
		],
		"description": "Log output to console"
	},
	"分组_多选": {
		"prefix": "tea-select(下拉选择)",
		"body": [
			"<SelectMultiple",
			"\tappearance=\"default\"",
			"\tgroups={groups}",
			"\toptions={options}",
			"\tvalue={favorites}",
			"\tonChange={value => setFavorites(value)}",
			"\tplaceholder=\"请选择你喜欢的食品\"",
			"\tallOption={{",
			"\t\tvalue: \"all\",",
			"\t\ttext: \"全选\",",
			"\t\ttooltip: \"我都要\",",
			"\t}}",
			"/>",
			"const options = [",
			"\t{ groupKey: \"fruit\", value: \"strawberry\", text: \"草莓\", tooltip: \"甜甜甜\" },",
			"\t{",
			"\t\tgroupKey: \"fruit\",",
			"\t\tvalue: \"apple\",",
			"\t\ttext: \"苹果\",",
			"\t\tdisabled: true,",
			"\t\ttooltip: \"每日一苹果，医生远离我\",",
			"\t},",
			"\t{ groupKey: \"fruit\", value: \"orange\", text: \"橙子\", tooltip: \"丰富 VC 含量\" },",
			"\t{ groupKey: \"drink\", value: \"coca-cola\", text: \"可口可乐\" },",
			"\t{",
			"\t\tgroupKey: \"drink\",",
			"\t\tvalue: \"pepsi-cola\",",
			"\t\ttext: \"百事可乐\",",
			"\t\ttooltip: \"百事可乐为什么比可口可乐好喝？\",",
			"\t},",
			"];",
			"",
			"const groups = {",
			"\tfruit: \"水果\",",
			"\tdrink: \"饮料\",",
			"};",
			"",
			"const [favorite, setFavorite] = useState(null);",
			"const [favorites, setFavorites] = useState([]);"
		],
		"description": "Log output to console"
	},
	"可搜索_单选": {
		"prefix": "tea-select(下拉选择)",
		"body": [
			"<Select",
			"\tsearchable",
			"\tboxSizeSync",
			"\tsize=\"m\"",
			"\ttype=\"simulate\"",
			"\tappearance=\"button\"",
			"\toptions={options}",
			"\tvalue={favorite}",
			"\tonChange={value => setFavorite(value)}",
			"/>",
			"const options = [",
			"\t{ value: \"strawberry\", text: \"草莓\", tooltip: \"甜甜甜\" },",
			"\t{ value: \"apple\", text: \"苹果\", tooltip: \"每日一苹果，医生远离我\" },",
			"\t{ value: \"orange\", text: \"橙子\", tooltip: \"丰富 VC 含量\" },",
			"\t{ value: \"durian\", text: \"榴莲\", disabled: true, tooltip: \"榴莲已售罄\" },",
			"\t{ value: \"coca-cola\", text: \"可口可乐\" },",
			"\t{ value: \"pepsi-cola\", text: \"百事可乐\" },",
			"];",
			"",
			"const [favorite, setFavorite] = useState(null);"
		],
		"description": "Log output to console"
	},
	"可搜索_多选": {
		"prefix": "tea-select(下拉选择)",
		"body": [
			"<SelectMultiple",
			"\tstaging={false}",
			"\tsearchable",
			"\tsize=\"m\"",
			"\tappearance=\"button\"",
			"\toptions={options}",
			"/>",
			"const options = [",
			"\t{ value: \"strawberry\", text: \"草莓\", tooltip: \"甜甜甜\" },",
			"\t{ value: \"apple\", text: \"苹果\", tooltip: \"每日一苹果，医生远离我\" },",
			"\t{ value: \"orange\", text: \"橙子\", tooltip: \"丰富 VC 含量\" },",
			"\t{ value: \"durian\", text: \"榴莲\", disabled: true, tooltip: \"榴莲已售罄\" },",
			"\t{ value: \"coca-cola\", text: \"可口可乐\" },",
			"\t{ value: \"pepsi-cola\", text: \"百事可乐\" },",
			"];",
			"",
			"const [favorite, setFavorite] = useState(null);"
		],
		"description": "Log output to console"
	},
	"可清空_单选": {
		"prefix": "tea-select(下拉选择)",
		"body": [
			"<Select",
			"\tclearable",
			"\tboxSizeSync",
			"\ttype=\"simulate\"",
			"\tappearance=\"button\"",
			"\toptions={options}",
			"\tsize=\"m\"",
			"/>",
			"${BLOCK_COMMENT_START}",
			"const options = [",
			"\t{ value: \"strawberry\", text: \"草莓\", tooltip: \"甜甜甜\" },",
			"\t{ value: \"apple\", text: \"苹果\", tooltip: \"每日一苹果，医生远离我\" },",
			"\t{ value: \"orange\", text: \"橙子\", tooltip: \"丰富 VC 含量\" },",
			"\t{ value: \"durian\", text: \"榴莲\", disabled: true, tooltip: \"榴莲已售罄\" },",
			"];",
			"${BLOCK_COMMENT_END}"
		],
		"description": "Log output to console"
	},
	"可清空_多选": {
		"prefix": "tea-select(下拉选择)",
		"body": [
			"<SelectMultiple",
			"\tclearable",
			"\tappearance=\"button\"",
			"\toptions={[",
			"\t\t{ value: \"gz\", text: \"瓜子\", tooltip: \"百煮入味香\" },",
			"\t\t{",
			"\t\t\tvalue: \"hs\",",
			"\t\t\ttext: \"花生\",",
			"\t\t\ttooltip: \"花生已售罄\",",
			"\t\t},",
			"\t\t{ value: \"bmf\", text: \"爆米花\", tooltip: \"焦糖味\" },",
			"\t\t{ value: \"kl\", text: \"可乐\", tooltip: \"肥宅快乐水\" },",
			"\t\t{ value: \"pj\", text: \"啤酒\" },",
			"\t\t{ value: \"kqs\", text: \"矿泉水\" },",
			"\t\t{ value: \"bbz\", text: \"八宝粥\" },",
			"\t]}",
			"\tallOption={{",
			"\t\tvalue: \"all\",",
			"\t\ttext: \"全选\",",
			"\t\ttooltip: \"我都要\",",
			"\t}}",
			"\tsize=\"m\"",
			"/>",
			"${BLOCK_COMMENT_START}",
			"const options = [",
			"\t{ value: \"strawberry\", text: \"草莓\", tooltip: \"甜甜甜\" },",
			"\t{ value: \"apple\", text: \"苹果\", tooltip: \"每日一苹果，医生远离我\" },",
			"\t{ value: \"orange\", text: \"橙子\", tooltip: \"丰富 VC 含量\" },",
			"\t{ value: \"durian\", text: \"榴莲\", disabled: true, tooltip: \"榴莲已售罄\" },",
			"];",
			"${BLOCK_COMMENT_END}"
		],
		"description": "Log output to console"
	},
	"下拉选择_加载更多": {
		"prefix": "tea-select(下拉选择)",
		"body": [
			"<Select",
			"\tsearchable",
			"\tboxSizeSync",
			"\tsize=\"m\"",
			"\ttype=\"simulate\"",
			"\tappearance=\"button\"",
			"\tfilter={() => true}",
			"\tautoClearSearchValue={false}",
			"\tonOpen={() => {",
			"\t\tsetFirst(false);",
			"\t}}",
			"\tonSearch={value => {",
			"\t\tsetKeyword(value);",
			"\t\tsetPage(1);",
			"\t\tsetOptions([]);",
			"\t}}",
			"\tonScrollBottom={() => {",
			"\t\tif (!loading && page < MAX_PAGE) {",
			"\t\t\tsetPage(page => page + 1);",
			"\t\t}",
			"\t}}",
			"\toptions={options || []}",
			"\tonChange={value => console.log(value)}",
			"\ttips=\"共 40 项\"",
			"\tbottomTips={loading && <LoadingTip />}",
			"/>",
			"${BLOCK_COMMENT_START}",
			"const sleep = ms => new Promise(resolve => setTimeout(resolve, ms));",
			"",
			"const MAX_PAGE = 4;",
			"",
			"const [first, setFirst] = useState(true);",
			"const [loading, setLoading] = useState(false);",
			"const [options, setOptions] = useState([]);",
			"",
			"const [keyword, setKeyword] = useState(\"\");",
			"const [page, setPage] = useState(1);",
			"",
			"const timerRef = useRef(null);",
			"",
			"const fetch = useCallback(() => {",
			"\tif (timerRef.current) {",
			"\t\tclearTimeout(timerRef.current);",
			"\t\ttimerRef.current = null;",
			"\t}",
			"",
			"\tconst id = setTimeout(mock, 300);",
			"\ttimerRef.current = id;",
			"",
			"\tasync function mock() {",
			"\t\tawait sleep(1000);",
			"",
			"\t\tif (id !== timerRef.current) {",
			"\t\t\treturn;",
			"\t\t}",
			"",
			"\t\tconst res = Array(10)",
			"\t\t\t.fill(null)",
			"\t\t\t.map((_, i) => ({",
			"\t\t\t\tvalue: `${keyword}${(page - 1) * 10 + i}`,",
			"\t\t\t\ttext: `选项${(page - 1) * 10 + i} ${keyword}`,",
			"\t\t\t}));",
			"",
			"\t\tif (page === 1) {",
			"\t\t\tsetOptions(res);",
			"\t\t} else {",
			"\t\t\tsetOptions(options => [...options, ...res]);",
			"\t\t}",
			"",
			"\t\tsetLoading(false);",
			"\t}",
			"",
			"\tsetLoading(true);",
			"}, [keyword, page]);",
			"",
			"useEffect(() => {",
			"\tif (!first) {",
			"\t\tfetch();",
			"\t}",
			"}, [fetch, first, keyword, page]);",
			"${BLOCK_COMMENT_END}"			
		],
		"description": "Log output to console"
	},
	"滑块_基本用法": {
		"prefix": "tea-slider(滑块)",
		"body": [
			"<Slider",
			"\tmin={0}",
			"\tmax={100}",
			"\tmarks={marks}",
			"\tonChange={value => console.log(\"onChange\", value)}",
			"\tonUpdate={value => console.log(\"onUpdate\", value)}",
			"/>",
			"${BLOCK_COMMENT_START}",
			"const marks = [{ value: 0 }, { value: 20 }, { value: 50 }, { value: 100 }];",
			"${BLOCK_COMMENT_END}"
		],
		"description": "Log output to console"
	},
	"滑块_双滑块": {
		"prefix": "tea-slider(滑块)",
		"body": [
			"<Slider",
			"\trangeMode",
			"\tmin={0}",
			"\tmax={100}",
			"\tmarks={marks}",
			"\tdefaultValue={[10, 50]}",
			"\tonChange={value => console.log(\"onChange\", value)}",
			"\tonUpdate={value => console.log(\"onUpdate\", value)}",
			"/>",
			"${BLOCK_COMMENT_START}",
			"const marks = [{ value: 0 }, { value: 20 }, { value: 50 }, { value: 100 }];",
			"${BLOCK_COMMENT_END}"
		],
		"description": "Log output to console"
	},
	"滑块_受控组件": {
		"prefix": "tea-slider(滑块)",
		"body": [
			"<Slider",
			"\tmin={0}",
			"\tmax={100}",
			"\tmarks={marks}",
			"\tvalue={value1}",
			"\tonChange={value => {",
			"\t\t// onChange 的时候不更新值，则会一直使用传入的 value",
			"\t\t// setValue1(value);",
			"\t\tconsole.log(\"onChange\", value);",
			"\t}}",
			"\tonUpdate={value => console.log(\"onUpdate\", value)}",
			"\tafter={",
			"\t\t<InputNumber",
			"\t\t\tmin={0}",
			"\t\t\tmax={100}",
			"\t\t\tvalue={value1}",
			"\t\t\tonChange={value => setValue1(value)}",
			"\t\t/>",
			"\t}",
			"/>",
			"${BLOCK_COMMENT_START}",
			"const marks = [{ value: 0 }, { value: 20 }, { value: 50 }, { value: 100 }];",
			"",
			"const [value1, setValue1] = useState(20);",
			"${BLOCK_COMMENT_END}"
		],
		"description": "Log output to console"
	},
	"滑块_格式化提示": {
		"prefix": "tea-slider(滑块)",
		"body": [
			"<Slider",
			"\tmin={0}",
			"\tmax={100}",
			"\ttipFormatter={value => `${value} 台`}",
			"\tmarks={marks.map(({ value }) => ({ value, label: `${value} 台` }))}",
			"\tvalue={value2}",
			"\tonChange={value => {",
			"\t\tsetValue2(value);",
			"\t\tconsole.log(value);",
			"\t}}",
			"\tafter={",
			"\t\t<InputAdornment after=\"台\" appearance=\"pure\">",
			"\t\t\t<InputNumber",
			"\t\t\t\tmin={0}",
			"\t\t\t\tmax={100}",
			"\t\t\t\tstep={5}",
			"\t\t\t\tvalue={value2}",
			"\t\t\t\tonChange={value => setValue2(value)}",
			"\t\t\t/>",
			"\t\t</InputAdornment>",
			"\t}",
			"/>",
			"${BLOCK_COMMENT_START}",
			"const marks = [{ value: 0 }, { value: 20 }, { value: 50 }, { value: 100 }];",
			"",
			"const [value2, setValue2] = useState(50);",
			"${BLOCK_COMMENT_END}"
		],
		"description": "Log output to console"
	},
	"滑块_滑轨提示": {
		"prefix": "tea-slider(滑块)",
		"body": [
			"<Slider",
			"\tmin={0}",
			"\tmax={100}",
			"\tmarks={marks}",
			"\tdefaultValue={0}",
			"\tenableTrackTip",
			"/>",
			"${BLOCK_COMMENT_START}",
			"const marks = [{ value: 0 }, { value: 20 }, { value: 50 }, { value: 100 }];",
			"${BLOCK_COMMENT_END}"
		],
		"description": "Log output to console"
	},
	"滑块_可拖动范围": {
		"prefix": "tea-slider(滑块)",
		"body": [
			"<Slider",
			"\tmin={0}",
			"\tmax={100}",
			"\trange={[20, 90]}",
			"\tmarks={marks}",
			"\tonChange={value => console.log(\"onChange\", value)}",
			"\tonUpdate={value => console.log(\"onUpdate\", value)}",
			"/>",
			"${BLOCK_COMMENT_START}",
			"const marks = [{ value: 0 }, { value: 20 }, { value: 50 }, { value: 100 }];",
			"${BLOCK_COMMENT_END}"
		],
		"description": "Log output to console"
	},
	"滑块_步长调整": {
		"prefix": "tea-slider(滑块)",
		"body": [
			"<Slider",
			"\tmin={0}",
			"\tmax={100}",
			"\tstep={5}",
			"\tmarks={marks}",
			"\tdefaultValue={20}",
			"\tonChange={value => console.log(value)}",
			"/>",
			
			"${BLOCK_COMMENT_START}",
			"const marks = [{ value: 0 }, { value: 20 }, { value: 50 }, { value: 100 }];",
			"${BLOCK_COMMENT_END}"
		],
		"description": "Log output to console"
	},
	"滑块_只能移动至刻度": {
		"prefix": "tea-slider(滑块)",
		"body": [
			"<Slider",
			"\tmin={0}",
			"\tmax={100}",
			"\tstep={5}",
			"\tmarks={marks}",
			"\tmarkValueOnly",
			"\tdefaultValue={50}",
			"\tonChange={value => console.log(value)}",
			"/>",
			"${BLOCK_COMMENT_START}",
			"const marks = [{ value: 0 }, { value: 20 }, { value: 50 }, { value: 100 }];",
			"",
			"const [value1, setValue1] = useState(20);",
			"const [value2, setValue2] = useState(50);",
			"${BLOCK_COMMENT_END}"
		],
		"description": "Log output to console"
	},
	"滑块_禁用": {
		"prefix": "tea-slider(滑块)",
		"body": [
			"<Slider disabled min={0} max={100} marks={marks} defaultValue={50} />",
			"${BLOCK_COMMENT_START}",
			"const marks = [{ value: 0 }, { value: 20 }, { value: 50 }, { value: 100 }];",
			"${BLOCK_COMMENT_END}"
		],
		"description": "Log output to console"
	},
	"滑块_垂直方向": {
		"prefix": "tea-slider(滑块)",
		"body": [
			"<Slider vertical min={0} max={100} marks={marks} defaultValue={20} />",
			"${BLOCK_COMMENT_START}",
			"const marks = [{ value: 0 }, { value: 20 }, { value: 50 }, { value: 100 }];",
			"${BLOCK_COMMENT_END}"
		],
		"description": "Log output to console"
	},
	"开关_基本用法": {
		"prefix": "tea-switch(开关)",
		"body": [
			"<Switch disabled value={false} loading tooltip=\"\" onChange={() => {console.log(1)}}>",
			"\t${1:我是个开关}",
			"</Switch>"
		],
		"description": "Log output to console"
	},
	"开关_组管理": {
		"prefix": "tea-switch(开关)",
		"body": [
			"<CheckboxGroup",
			"\tvalue={selected}",
			"\tonChange={value => {",
			"\t\tconsole.log(value);",
			"\t\tsetSelected(value);",
			"\t}}",
			">",
			"\t<Switch name=\"gz\">广州市</Switch>",
			"\t<Switch name=\"sz\">深圳市</Switch>",
			"\t<Switch name=\"fs\">佛山市</Switch>",
			"</CheckboxGroup>",
			"${BLOCK_COMMENT_START}",
			"const [selected, setSelected] = useState([]);",
			"${BLOCK_COMMENT_END}"
		],
		"description": "Log output to console"
	},
	"开关_异步示例": {
		"prefix": "tea-switch(开关)",
		"body": [
			"<AsyncSwitch block />",
			"${BLOCK_COMMENT_START}",
			"function AsyncSwitch({ block }) {",
			"\tconst [checked, loading, change] = useAsyncCheck(block, 1000);",
			"\tconst blockText = block ? \"模拟操作失败\" : \"模拟操作成功\";",
			"\treturn (",
			"\t\t<Switch",
			"\t\t\tvalue={checked}",
			"\t\t\tloading={loading}",
			"\t\t\tdisabled={loading}",
			"\t\t\tonChange={value => change(value)}",
			"\t\t>",
			"\t\t\t{loading ? \"请稍候...\" : blockText}",
			"\t\t</Switch>",
			"\t);",
			"}",
			"",
			"// 这里用 React Hooks 实现，使用 class 的同学可以自行改造",
			"/**",
			" * @param {boolean} block 是否模拟失败情形",
			" * @param {number} timeout 模拟的异步时长",
			" * @returns {[boolean, boolean, (checked: boolean) => {}]}",
			" */",
			"function useAsyncCheck(block, timeout) {",
			"\t// 选中和 loading 态",
			"\tconst [checked, setChecked] = useState(false);",
			"\tconst [loading, setLoading] = useState(false);",
			"",
			"\t// 当前执行中的任务",
			"\tconst taskRef = useRef(null);",
			"",
			"\t// 组件 unmount 的时候清理当前任务",
			"\tuseEffect(",
			"\t\t() => () => {",
			"\t\t\tif (taskRef && taskRef.current) {",
			"\t\t\t\ttaskRef.current.cancel();",
			"\t\t\t\ttaskRef.current = null;",
			"\t\t\t}",
			"\t\t},",
			"\t\t[]",
			"\t);",
			"",
			"\t// 处理切换逻辑",
			"\tconst change = async newChecked => {",
			"\t\t// 先切目标状态，给用户操作反馈",
			"\t\tsetChecked(newChecked);",
			"\t\tsetLoading(true);",
			"",
			"\t\t// 创建切换异步任务",
			"\t\tconst task = simulateAsyncTask(block, timeout);",
			"\t\t// 任务挂载起来，可以取消之",
			"\t\ttaskRef.current = task;",
			"",
			"\t\t// 执行异步任务",
			"\t\ttry {",
			"\t\t\tawait task.run();",
			"\t\t} catch (err) {",
			"\t\t\t// 失败了恢复到原来的勾选状态",
			"\t\t\tsetChecked(checked);",
			"\t\t\tModal.error({ message: \"切换失败\", description: err.message });",
			"\t\t} finally {",
			"\t\t\t// 无论成功失败，都退出 loading 态，并清理任务引用",
			"\t\t\ttaskRef.current = null;",
			"\t\t\tsetLoading(false);",
			"\t\t}",
			"\t};",
			"",
			"\treturn [checked, loading, change];",
			"}",
			"",
			"function simulateAsyncTask(block, timeout) {",
			"\tlet timer;",
			"\treturn {",
			"\t\tcancel: () => clearTimeout(timer),",
			"\t\trun: () =>",
			"\t\t\tnew Promise((resolve, reject) => {",
			"\t\t\t\ttimer = setTimeout(",
			"\t\t\t\t\t() => (!block ? resolve() : reject(new Error(\"blocked!\"))),",
			"\t\t\t\t\ttimeout",
			"\t\t\t\t);",
			"\t\t\t}),",
			"\t};",
			"}",
			"${BLOCK_COMMENT_END}"
		],
		"description": "Log output to console"
	},
	"标签选择_基本用法": {
		"prefix": "tea-tagSelect(标签选择)",
		"body": [
			"<TagSelect",
			"\t// optionsOnly",
			"\toptions={options}",
			"\tdefaultValue={tagSelectValue}",
			"\tonChange={tags => console.log(tags)}",
			"/>",
			"${BLOCK_COMMENT_START}",
			"const tagSelectValue = [\"link\"];",
			"",
			"const options = [",
			"\t{ text: \"link\", value: \"link\" },",
			"\t{ text: \"zelda\", value: \"zelda\" },",
			"\t{ text: \"mario\", value: \"mario\" },",
			"\t{ text: \"peach\", value: \"peach\", disabled: true },",
			"\t{ name: \"luigi\", value: \"luigi\" },",
			"];",
			"${BLOCK_COMMENT_END}"
		],
		"description": "Log output to console"
	},
	"标签选择_动态加载": {
		"prefix": "tea-tagSelect(标签选择)",
		"body": [
			"<TagSelect",
			"\toptionsOnly",
			"\tonSearch={fetch}",
			"\toptions={options}",
			"\tonChange={value => {",
			"\t\tconsole.log(value);",
			"\t\tsetOptions([]);",
			"\t}}",
			"\tplaceholder=\"输入关键词搜索\"",
			"\ttips={",
			"\t\tstatus && (",
			"\t\t\t<StatusTip",
			"\t\t\t\tstatus={status}",
			"\t\t\t\tonRetry={() => fetch(keywordRef.current)}",
			"\t\t\t\temptyText=\"输入关键词搜索\"",
			"\t\t\t/>",
			"\t\t)",
			"\t}",
			"/>",
			"const sleep = ms => new Promise(resolve => setTimeout(resolve, ms));",
			"",
			"const [status, setStatus] = useState(null);",
			"const [options, setOptions] = useState([]);",
			"",
			"const timerRef = useRef(null);",
			"const keywordRef = useRef(\"\");",
			"",
			"const fetch = (inputValue = \"\") => {",
			"\tif (timerRef.current) {",
			"\t\tclearTimeout(timerRef.current);",
			"\t\ttimerRef.current = null;",
			"\t}",
			"\tkeywordRef.current = inputValue;",
			"",
			"\tsetStatus(\"loading\");",
			"\tsetOptions([]);",
			"",
			"\tconst mock = async () => {",
			"\t\tsetStatus(\"loading\");",
			"\t\tsetOptions([]);",
			"\t\tawait sleep(800);",
			"\t\t// 模拟失败",
			"\t\tif (Math.random() > 0.8) {",
			"\t\t\tsetStatus(\"error\");",
			"\t\t\treturn;",
			"\t\t}",
			"\t\tif (keywordRef.current === inputValue) {",
			"\t\t\tsetStatus(null);",
			"\t\t\tsetOptions([",
			"\t\t\t\t{ value: `${inputValue}1`, text: `${inputValue} - 1` },",
			"\t\t\t\t{ value: `${inputValue}2`, text: `${inputValue} - 2` },",
			"\t\t\t\t{ value: `${inputValue}3`, text: `${inputValue} - 3` },",
			"\t\t\t]);",
			"\t\t}",
			"\t};",
			"",
			"\ttimerRef.current = setTimeout(mock, 300);",
			"};"
		],
		"description": "Log output to console"
	},
	"标签选择_选项分组": {
		"prefix": "tea-tagSelect(标签选择)",
		"body": [
			"<TagSelect",
			"\toptionsOnly",
			"\tgroups={groups}",
			"\toptions={options}",
			"\tdefaultValue={[\"pepsi-cola\"]}",
			"\tonChange={tags => console.log(tags)}",
			"/>",
			"${BLOCK_COMMENT_START}",
			"const options = [",
			"\t{ groupKey: \"fruit\", value: \"strawberry\", text: \"草莓\", tooltip: \"甜甜甜\" },",
			"\t{",
			"\t\tgroupKey: \"fruit\",",
			"\t\tvalue: \"apple\",",
			"\t\ttext: \"苹果\",",
			"\t\tdisabled: true,",
			"\t\ttooltip: \"每日一苹果，医生远离我\",",
			"\t},",
			"\t{ groupKey: \"fruit\", value: \"orange\", text: \"橙子\", tooltip: \"丰富 VC 含量\" },",
			"\t{ groupKey: \"drink\", value: \"coca-cola\", text: \"可口可乐\" },",
			"\t{",
			"\t\tgroupKey: \"drink\",",
			"\t\tvalue: \"pepsi-cola\",",
			"\t\ttext: \"百事可乐\",",
			"\t\ttooltip: \"百事可乐为什么比可口可乐好喝？\",",
			"\t},",
			"];",
			"",
			"const groups = {",
			"\tfruit: \"水果\",",
			"\tdrink: \"饮料\",",
			"};",
			"${BLOCK_COMMENT_END}"
		],
		"description": "Log output to console"
	},
	"时间选择_基本用法": {
		"prefix": "tea-timePicker(时间选择)",
		"body": [
			"<TimePicker",
			"\tdefaultValue={moment(\"23:30:00\", \"HH:mm:ss\")}",
			"\tonChange={value => console.log(value.format(\"HH:mm:ss\"))}",
			"\tonOpenChange={open => console.log(open ? \"open\" : \"close\")}",
			"/>"
		],
		"description": "Log output to console"
	},
	"时间选择_限制可选范围(disabled函数)": {
		"prefix": "tea-timePicker(时间选择)",
		"body": [
			"<TimePicker",
			"\tsecondStep={30}",
			"\tdisabledHours={() => [...range(0, 8), ...range(13, 14), ...range(18, 23)]}",
			"\tdisabledMinutes={hour => (hour === 12 ? range(30, 59) : [])}",
			"\tonChange={value => console.log(value.format(\"HH:mm:ss\"))}",
			"/>",
			"${BLOCK_COMMENT_START}",
			"const range = (s, t) =>",
			"ray(t - s + 1)",
			".fill(0)",
			".map((_, i) => s + i);",
			"${BLOCK_COMMENT_END}"
		],
		"description": "Log output to console"
	},
	"时间选择_限制可选范围(range)": {
		"prefix": "tea-timePicker(时间选择)",
		"body": [
			"<TimePicker",
			"\tvalue={time}",
			"\trange={[moment(\"09:30:00\", \"HH:mm:ss\"), moment(\"17:30:00\", \"HH:mm:ss\")]}",
			"\tonChange={value => {",
			"\t\tsetTime(value);",
			"\t\tconsole.log(value.format(\"HH:mm:ss\"));",
			"\t}}",
			"/>",
			"${BLOCK_COMMENT_START}",
			"const [time, setTime] = useState(null);",
			"${BLOCK_COMMENT_END}"
		],
		"description": "Log output to console"
	},
	"时间选择_时间范围选择": {
		"prefix": "tea-timePicker(时间选择)",
		"body": [
			"<RangePicker",
			"\tformat=\"HH:mm\"",
			"\trange={[moment(\"09:30\", \"HH:mm\"), moment(\"23:30\", \"HH:mm\")]}",
			"\tonChange={value =>",
			"\t\tconsole.log(value[0].format(\"HH:mm\"), value[1].format(\"HH:mm\"))",
			"\t}",
			"/>"
		],
		"description": "Log output to console"
	},
	"上传_文件上传": {
		"prefix": "tea-upload(上传)",
		"body": [
			"<Form.Control",
			"\tstatus={status}",
			"\tmessage=\"请上传 png 格式文件，大小 100KB 以内\"",
			">",
			"\t<Upload",
			"\t\taction=\"https://run.mocky.io/v3/68ed7204-0487-4135-857d-0e4366b2cfad\"",
			"\t\taccept=\"image/png\"",
			"\t\tmaxSize={100 * 1024}",
			"\t\tonStart={handleStart}",
			"\t\tonProgress={handleProgress}",
			"\t\tonSuccess={handleSuccess}",
			"\t\tonError={handleError}",
			"\t\tbeforeUpload={beforeUpload}",
			"\t>",
			"\t\t{({ open }) => (",
			"\t\t\t<Upload.File",
			"\t\t\t\tfilename={file && file.name}",
			"\t\t\t\tpercent={percent}",
			"\t\t\t\tbutton={",
			"\t\t\t\t\tstatus === \"validating\" ? (",
			"\t\t\t\t\t\t<Button onClick={handleAbort}>取消上传</Button>",
			"\t\t\t\t\t) : (",
			"\t\t\t\t\t\t<>",
			"\t\t\t\t\t\t\t<Button onClick={open}>",
			"\t\t\t\t\t\t\t\t{status ? \"重新上传\" : \"选择文件\"}",
			"\t\t\t\t\t\t\t</Button>",
			"\t\t\t\t\t\t\t{status && (",
			"\t\t\t\t\t\t\t\t<Button",
			"\t\t\t\t\t\t\t\t\ttype=\"link\"",
			"\t\t\t\t\t\t\t\t\tstyle={{ marginLeft: 8 }}",
			"\t\t\t\t\t\t\t\t\tonClick={handleAbort}",
			"\t\t\t\t\t\t\t\t>",
			"\t\t\t\t\t\t\t\t\t删除",
			"\t\t\t\t\t\t\t\t</Button>",
			"\t\t\t\t\t\t\t)}",
			"\t\t\t\t\t\t</>",
			"\t\t\t\t\t)",
			"\t\t\t\t}",
			"\t\t\t/>",
			"\t\t)}",
			"\t</Upload>",
			"</Form.Control>",
			"${BLOCK_COMMENT_START}",
			"const [file, setFile] = useState(null);",
			"const [status, setStatus] = useState(null);",
			"const [percent, setPercent] = useState(null);",
			"",
			"const xhrRef = useRef(null);",
			"",
			"function handleStart(file, { xhr }) {",
			"\tsetFile(file);",
			"\tsetStatus(\"validating\");",
			"\txhrRef.current = xhr;",
			"}",
			"",
			"function handleProgress({ percent }) {",
			"\tsetPercent(percent);",
			"}",
			"",
			"function handleSuccess(result) {",
			"\tconsole.log(result);",
			"\tsetStatus(\"success\");",
			"}",
			"",
			"function handleError() {",
			"\tsetStatus(\"error\");",
			"\thandleAbort();",
			"\tModal.alert({",
			"\t\ttype: \"error\",",
			"\t\tmessage: \"错误\",",
			"\t\tdescription: \"请求服务器失败\",",
			"\t});",
			"}",
			"",
			"function beforeUpload(file, fileList, isAccepted) {",
			"\tif (!isAccepted) {",
			"\t\tsetStatus(\"error\");",
			"\t}",
			"\treturn isAccepted;",
			"}",
			"",
			"function handleAbort() {",
			"\tif (xhrRef.current) {",
			"\t\txhrRef.current.abort();",
			"\t}",
			"\tsetFile(null);",
			"\tsetStatus(null);",
			"\tsetPercent(null);",
			"}",
			"${BLOCK_COMMENT_END}"
		],
		"description": "Log output to console"
	},
	"上传_图片上传": {
		"prefix": "tea-upload(上传)",
		"body": [
			"<Form.Control status={status} message=\"请上传 png 格式文件，大小 1MB 以内\">",
			"\t<Upload",
			"\t\taction=\"https://run.mocky.io/v3/68ed7204-0487-4135-857d-0e4366b2cfad\"",
			"\t\taccept=\"image/png\"",
			"\t\tmaxSize={1024 * 1024}",
			"\t\tonStart={handleStart}",
			"\t\tonProgress={handleProgress}",
			"\t\tonSuccess={handleSuccess}",
			"\t\tonError={handleError}",
			"\t\tbeforeUpload={beforeUpload}",
			"\t>",
			"\t\t{({ open }) => (",
			"\t\t\t<Upload.Image",
			"\t\t\t\tfilename={file ? file.name : <Text theme=\"weak\">还未选择图片</Text>}",
			"\t\t\t\timage={",
			"\t\t\t\t\tfile",
			"\t\t\t\t\t\t? image",
			"\t\t\t\t\t\t: \"//imgcache.qq.com/open_proj/proj_qcloud_v2/tea-style/dist/assets/image/upload-thumb.png\"",
			"\t\t\t\t}",
			"\t\t\t\tpercent={percent}",
			"\t\t\t\tdescription={",
			"\t\t\t\t\tfile && (",
			"\t\t\t\t\t\t<>",
			"\t\t\t\t\t\t\t<p>文件大小：{Math.floor(file.size / 1024)}K</p>",
			"\t\t\t\t\t\t\t<p>上传日期：-</p>",
			"\t\t\t\t\t\t</>",
			"\t\t\t\t\t)",
			"\t\t\t\t}",
			"\t\t\t\tbutton={",
			"\t\t\t\t\tstatus === \"validating\" ? (",
			"\t\t\t\t\t\t<Button onClick={handleAbort}>取消上传</Button>",
			"\t\t\t\t\t) : (",
			"\t\t\t\t\t\t<>",
			"\t\t\t\t\t\t\t<Button onClick={open}>",
			"\t\t\t\t\t\t\t\t{status ? \"重新上传\" : \"选择图片\"}",
			"\t\t\t\t\t\t\t</Button>",
			"\t\t\t\t\t\t\t{file && (",
			"\t\t\t\t\t\t\t\t<Button",
			"\t\t\t\t\t\t\t\t\ttype=\"link\"",
			"\t\t\t\t\t\t\t\t\tstyle={{ marginLeft: 8 }}",
			"\t\t\t\t\t\t\t\t\tonClick={handleAbort}",
			"\t\t\t\t\t\t\t\t>",
			"\t\t\t\t\t\t\t\t\t删除",
			"\t\t\t\t\t\t\t\t</Button>",
			"\t\t\t\t\t\t\t)}",
			"\t\t\t\t\t\t</>",
			"\t\t\t\t\t)",
			"\t\t\t\t}",
			"\t\t\t/>",
			"\t\t)}",
			"\t</Upload>",
			"</Form.Control>",
			"${BLOCK_COMMENT_START}",
			"const [file, setFile] = useState(null);",
			"const [image, setImage] = useState(null);",
			"const [status, setStatus] = useState(null);",
			"const [percent, setPercent] = useState(null);",
			"",
			"const xhrRef = useRef(null);",
			"",
			"function handleStart(file, { xhr }) {",
			"\tsetFile(file);",
			"\tgetBase64(file);",
			"\tsetStatus(\"validating\");",
			"\txhrRef.current = xhr;",
			"}",
			"",
			"function handleProgress({ percent }) {",
			"\tsetPercent(percent);",
			"}",
			"",
			"function handleSuccess(result) {",
			"\tconsole.log(result);",
			"\tsetStatus(\"success\");",
			"}",
			"",
			"function handleError() {",
			"\tsetStatus(\"error\");",
			"\tModal.alert({",
			"\t\ttype: \"error\",",
			"\t\tmessage: \"错误\",",
			"\t\tdescription: \"请求服务器失败\",",
			"\t});",
			"}",
			"",
			"function beforeUpload(file, fileList, isAccepted) {",
			"\tif (!isAccepted) {",
			"\t\tsetStatus(\"error\");",
			"\t}",
			"\treturn isAccepted;",
			"}",
			"",
			"function handleAbort() {",
			"\tif (xhrRef.current) {",
			"\t\txhrRef.current.abort();",
			"\t}",
			"\tsetFile(null);",
			"\tsetStatus(null);",
			"\tsetPercent(null);",
			"}",
			"",
			"function getBase64(file) {",
			"\tconst reader = new FileReader();",
			"\treader.onloadend = () => {",
			"\t\tsetImage(reader.result);",
			"\t};",
			"\treader.readAsDataURL(file);",
			"}",
			"${BLOCK_COMMENT_END}"
		],
		"description": "Log output to console"
	},
	"上传_拖拽上传": {
		"prefix": "tea-upload(上传)",
		"body": [
			"<Form.Control status={status} message=\"请上传 zip 格式文件，大小 1MB 以内\">",
			"\t<Upload",
			"\t\taction=\"https://run.mocky.io/v3/68ed7204-0487-4135-857d-0e4366b2cfad\"",
			"\t\taccept=\"application/zip,application/x-zip,application/x-zip-compressed\"",
			"\t\tmaxSize={1024 * 1024}",
			"\t\tonStart={handleStart}",
			"\t\tonProgress={handleProgress}",
			"\t\tonSuccess={handleSuccess}",
			"\t\tonError={handleError}",
			"\t\tbeforeUpload={beforeUpload}",
			"\t>",
			"\t\t{({ open, isDragging }) => (",
			"\t\t\t<Upload.Dragger",
			"\t\t\t\tfilename={file && file.name}",
			"\t\t\t\tpercent={percent}",
			"\t\t\t\tdescription={",
			"\t\t\t\t\tfile && (",
			"\t\t\t\t\t\t<>",
			"\t\t\t\t\t\t\t<p>文件大小：{Math.floor(file.size / 1024)}K</p>",
			"\t\t\t\t\t\t\t<p>上传日期：-</p>",
			"\t\t\t\t\t\t</>",
			"\t\t\t\t\t)",
			"\t\t\t\t}",
			"\t\t\t\tbutton={",
			"\t\t\t\t\tstatus === \"validating\" ? (",
			"\t\t\t\t\t\t<Button type=\"link\" onClick={handleAbort}>",
			"\t\t\t\t\t\t\t取消上传",
			"\t\t\t\t\t\t</Button>",
			"\t\t\t\t\t) : (",
			"\t\t\t\t\t\t<>",
			"\t\t\t\t\t\t\t<Button type=\"link\" onClick={open}>",
			"\t\t\t\t\t\t\t\t重新上传",
			"\t\t\t\t\t\t\t</Button>",
			"\t\t\t\t\t\t\t<Button",
			"\t\t\t\t\t\t\t\ttype=\"link\"",
			"\t\t\t\t\t\t\t\tstyle={{ marginLeft: 8 }}",
			"\t\t\t\t\t\t\t\tonClick={() => setFile(null)}",
			"\t\t\t\t\t\t\t>",
			"\t\t\t\t\t\t\t\t删除",
			"\t\t\t\t\t\t\t</Button>",
			"\t\t\t\t\t\t</>",
			"\t\t\t\t\t)",
			"\t\t\t\t}",
			"\t\t\t>",
			"\t\t\t\t{isDragging ? (",
			"\t\t\t\t\t\"释放鼠标\"",
			"\t\t\t\t) : (",
			"\t\t\t\t\t<>",
			"\t\t\t\t\t\t<a onClick={open}>点击上传</a>",
			"\t\t\t\t\t\t<Text theme=\"weak\">/拖拽到此区域</Text>",
			"\t\t\t\t\t</>",
			"\t\t\t\t)}",
			"\t\t\t</Upload.Dragger>",
			"\t\t)}",
			"\t</Upload>",
			"</Form.Control>",
			"${BLOCK_COMMENT_START}",
			"const [file, setFile] = useState(null);",
			"const [status, setStatus] = useState(null);",
			"const [percent, setPercent] = useState(null);",
			"",
			"const xhrRef = useRef(null);",
			"",
			"function handleStart(file, { xhr }) {",
			"\tsetFile(file);",
			"\tsetStatus(\"validating\");",
			"\txhrRef.current = xhr;",
			"}",
			"",
			"function handleProgress({ percent }) {",
			"\tsetPercent(percent);",
			"}",
			"",
			"function handleSuccess(result) {",
			"\tconsole.log(result);",
			"\tsetStatus(\"success\");",
			"}",
			"",
			"function handleError() {",
			"\tsetStatus(\"error\");",
			"\tModal.alert({",
			"\t\ttype: \"error\",",
			"\t\tmessage: \"错误\",",
			"\t\tdescription: \"请求服务器失败\",",
			"\t});",
			"}",
			"",
			"function beforeUpload(file, fileList, isAccepted) {",
			"\tif (!isAccepted) {",
			"\t\tsetStatus(\"error\");",
			"\t}",
			"\treturn isAccepted;",
			"}",
			"",
			"function handleAbort() {",
			"\tif (xhrRef.current) {",
			"\t\txhrRef.current.abort();",
			"\t}",
			"\tsetFile(null);",
			"\tsetStatus(null);",
			"\tsetPercent(null);",
			"}",
			"${BLOCK_COMMENT_END}"
		],
		"description": "Log output to console"
	},
	"上传_": {
		"prefix": "tea-upload(上传)",
		"body": [
			"<Form.Control status={status} message=\"请上传 png 格式文件，大小 1MB 以内\">",
			"\t<Upload",
			"\t\taction=\"https://run.mocky.io/v3/68ed7204-0487-4135-857d-0e4366b2cfad\"",
			"\t\taccept=\"image/png\"",
			"\t\tmaxSize={1024 * 1024}",
			"\t\tonStart={handleStart}",
			"\t\tonProgress={handleProgress}",
			"\t\tonSuccess={handleSuccess}",
			"\t\tonError={handleError}",
			"\t\tbeforeUpload={beforeUpload}",
			"\t>",
			"\t\t{({ open, isDragging }) => (",
			"\t\t\t<Upload.Dragger",
			"\t\t\t\tfilename={file && file.name}",
			"\t\t\t\timage={image}",
			"\t\t\t\tpercent={percent}",
			"\t\t\t\tdescription={",
			"\t\t\t\t\tfile && (",
			"\t\t\t\t\t\t<>",
			"\t\t\t\t\t\t\t<p>文件大小：{Math.floor(file.size / 1024)}K</p>",
			"\t\t\t\t\t\t\t<p>上传日期：-</p>",
			"\t\t\t\t\t\t</>",
			"\t\t\t\t\t)",
			"\t\t\t\t}",
			"\t\t\t\tbutton={",
			"\t\t\t\t\tstatus === \"validating\" ? (",
			"\t\t\t\t\t\t<Button type=\"link\" onClick={handleAbort}>",
			"\t\t\t\t\t\t\t取消上传",
			"\t\t\t\t\t\t</Button>",
			"\t\t\t\t\t) : (",
			"\t\t\t\t\t\t<>",
			"\t\t\t\t\t\t\t<Button type=\"link\" onClick={open}>",
			"\t\t\t\t\t\t\t\t重新上传",
			"\t\t\t\t\t\t\t</Button>",
			"\t\t\t\t\t\t\t<Button",
			"\t\t\t\t\t\t\t\ttype=\"link\"",
			"\t\t\t\t\t\t\t\tstyle={{ marginLeft: 8 }}",
			"\t\t\t\t\t\t\t\tonClick={handleAbort}",
			"\t\t\t\t\t\t\t>",
			"\t\t\t\t\t\t\t\t删除",
			"\t\t\t\t\t\t\t</Button>",
			"\t\t\t\t\t\t</>",
			"\t\t\t\t\t)",
			"\t\t\t\t}",
			"\t\t\t>",
			"\t\t\t\t{isDragging ? (",
			"\t\t\t\t\t\"释放鼠标\"",
			"\t\t\t\t) : (",
			"\t\t\t\t\t<>",
			"\t\t\t\t\t\t<a onClick={open}>点击上传</a>",
			"\t\t\t\t\t\t<Text theme=\"weak\">/拖拽到此区域</Text>",
			"\t\t\t\t\t</>",
			"\t\t\t\t)}",
			"\t\t\t</Upload.Dragger>",
			"\t\t)}",
			"\t</Upload>",
			"</Form.Control>",
			"${BLOCK_COMMENT_START}",
			"const [file, setFile] = useState(null);",
			"const [image, setImage] = useState(null);",
			"const [status, setStatus] = useState(null);",
			"const [percent, setPercent] = useState(null);",
			"",
			"const xhrRef = useRef(null);",
			"",
			"function handleStart(file, { xhr }) {",
			"\tsetFile(file);",
			"\tgetBase64(file);",
			"\tsetStatus(\"validating\");",
			"\txhrRef.current = xhr;",
			"}",
			"",
			"function handleProgress({ percent }) {",
			"\tsetPercent(percent);",
			"}",
			"",
			"function handleSuccess(result) {",
			"\tconsole.log(result);",
			"\tsetStatus(\"success\");",
			"}",
			"",
			"function handleError() {",
			"\tsetStatus(\"error\");",
			"\tModal.alert({",
			"\t\ttype: \"error\",",
			"\t\tmessage: \"错误\",",
			"\t\tdescription: \"请求服务器失败\",",
			"\t});",
			"}",
			"",
			"function beforeUpload(file, fileList, isAccepted) {",
			"\tif (!isAccepted) {",
			"\t\tsetStatus(\"error\");",
			"\t}",
			"\treturn isAccepted;",
			"}",
			"",
			"function handleAbort() {",
			"\tif (xhrRef.current) {",
			"\t\txhrRef.current.abort();",
			"\t}",
			"\tsetFile(null);",
			"\tsetStatus(null);",
			"\tsetPercent(null);",
			"}",
			"",
			"function getBase64(file) {",
			"\tconst reader = new FileReader();",
			"\treader.onloadend = () => {",
			"\t\tsetImage(reader.result);",
			"\t};",
			"\treader.readAsDataURL(file);",
			"}",
			"${BLOCK_COMMENT_END}"
		],
		"description": "Log output to console"
	},
	"气泡_基本用法": {
		"prefix": "tea-bubble(气泡)",
		"body": [
			"<Bubble",
			"\tarrowPointAtCenter",
			"\tplacement=\"{$1|auto-start,auto,auto-end,top-start,top,top-end,right-start,right,right-end,bottom-end,bottom,bottom-start,left-end,left,left-start|}\"",
			"\tcontent=\"此域名是加速域名 CNAME 到 CDN 节点上的地址\"",
			">",
			"\t<Icon type=\"info\" />",
			"</Bubble>",
			"${BLOCK_COMMENT_START}",
			"placement:Bubble 放置的位置，将影响三角的朝向和位置",
			"${BLOCK_COMMENT_END}"
		],
		"description": "Log output to console"
	},
	"气泡_出现时机": {
		"prefix": "tea-bubble(气泡)",
		"body": [
			"<Bubble",
			"\ttrigger=\"${1|focus,click|}\"",
			"\tcontent={inputError ? \"输入有误，请输入整数\" : content}",
			"\tplacement=\"right\"",
			"\terror={inputError}",
			">",
			"\t<Input",
			"\t\tplaceholder=\"聚焦出现\"",
			"\t\tvalue={inputText}",
			"\t\tonChange={value => setInputText(value)}",
			"\t/>",
			"</Bubble>",
			"${BLOCK_COMMENT_START}",
			"const [inputText, setInputText] = useState(\"\");",
			"const length = parseInt(inputText, 10);",
			"",
			"const inputError = Boolean(inputText) && Number.isNaN(length);",
			"",
			"const content = length",
			"? `面积 S = ${length} x ${length} = ${length * length}`",
			": \"请输入边长，计算正方形面积\";",
			"${BLOCK_COMMENT_END}"
		],
		"description": "Log output to console"
	},
	"抽屉_基本用法": {
		"prefix": "tea-drawer(抽屉)",
		"body": [
			"<Drawer",
			"\t// @ts-ignore",
			"\tsize={${1|m,l|}}",
			"\t// @ts-ignore",
			"\tplacement={${2|left,right|}}",
			"\tdisableAnimation={${3|true,false|}}",
			"\touterClickClosable={${4|false,true|}}",
			"\tshowMask={${5|true,false|}}",
			"\tvisible={visible}",
			"\ttitle=\"标题\"",
			"\tsubtitle=\"说明文字\"",
			"\tfooter={<Button type=\"primary\">操作按钮</Button>}",
			"\tonClose={() => setVisible(false)}",
			">",
			"\t<p style={{ padding: \"20px 0\" }}>",
			"\t\t可以根据实际需求，选则是否需要头尾结构",
			"\t</p>",
			"\t<img",
			"\t\tsrc=\"http://ue.qzone.qq.com/200x400\"",
			"\t\tstyle={{ width: \"100%\", verticalAlign: \"top\" }}",
			"\t\talt=\"\"",
			"\t/>",
			"</Drawer>",
			"${BLOCK_COMMENT_START}",
			"placement 抽屉方向",
			"outerClickClosable 点击面板外是否收起面板",
			"disableAnimation 是否禁用展开 / 收起动效",
			"showMask 是否显示遮罩",
			"${BLOCK_COMMENT_END}"
		],
		"description": "Log output to console"
	},
	"下拉_基本用法": {
		"prefix": "tea-dropdown(下拉)",
		"body": [
			"<Dropdown",
			"\ttrigger={${1|click,hover|}}",
			"\tclickClose={true}",
			"\tbutton=\"按钮样式\"",
			"\tappearance=\"${2|default,link,button,filter,pure|}\"",
			"\tonOpen={() => console.log(\"open\")}",
			"\tonClose={() => console.log(\"close\")}",
			"\tboxSizeSync",
			">",
			"\t{menu}",
			"</Dropdown>",
			"${BLOCK_COMMENT_START}",
			"const menu = close => (",
			"\t<List type=\"option\">",
			"\t\t<List.Item onClick={close}>预付费</List.Item>",
			"\t\t<List.Item onClick={close}>后付费</List.Item>",
			"\t\t<List.SubMenu label=\"更多\">",
			"\t\t\t<List type=\"option\">",
			"\t\t\t\t<List.Item disabled>订阅</List.Item>",
			"\t\t\t\t<List.Item onClick={close}>朋友代付</List.Item>",
			"\t\t\t</List>",
			"\t\t</List.SubMenu>",
			"\t</List>",
			");",
			"",
			"trigger 触发方式",
			"clickClose 是否在下拉内容点击时关闭",
			"boxSizeSync 弹出区域尺寸（宽度）是否同步按钮尺寸",
			"appearance 下拉按钮的外观：",
			"\tdefault 无边框，适用于页面标题和表格内",
			"\tbutton 为按钮风格，有边框，多用于操作栏中",
			"\tlink 为超链接风格",
			"\tfilter 为过滤组件风格，多用于表头筛选",
			"\tpure 无额外样式",
			"${BLOCK_COMMENT_END}"
		],
		"description": "Log output to console"
	},
	"图片预览_基本用法": {
		"prefix": "tea-imagePreview(图片预览)",
		"body": [
			"<ImagePreview",
			"\tsrc=\"http://ue.qzone.qq.com/100\"",
			"\tpreviewSrc=\"http://ue.qzone.qq.com/3000\"",
			"\tpreviewTitle=\"这是一张示例图片\"",
			"/>"
		],
		"description": "Log output to console"
	},
	"图片预览_自定义触发元素": {
		"prefix": "tea-imagePreview(图片预览)",
		"body": [
			"<ImagePreview",
			"\tpreviewSrc=\"http://ue.qzone.qq.com/3000\"",
			"\tpreviewTitle=\"这是一张示例图片\"",
			">",
			"\t{open => <a onClick={open}>查看大图</a>}",
			"</ImagePreview>"
		],
		"description": "Log output to console"
	},
	"提示_基本用法": {
		"prefix": "tea-message(提示)",
		"body": [
			"message.{$1|success,warning,error,loading|}({",
			"\tcontent: \"这是一条提示\",",
			"})"
		],
		"description": "Log output to console"
	},
	"对话框_基本用法": {
		"prefix": "tea-modal(对话框)",
		"body": [
			"<Modal${1| , maskClosable |}${2| , disableEscape |}visible={visible} caption=\"对话框标题\" onClose={close} size=\"${3|s,m,l,xl,auto|}\" icon=\"${4|success,warning,error,pending,infoblue|}\">",
			"\t<Modal.Body>我是对话框内容</Modal.Body>",
			"\t<Modal.Footer>",
			"\t\t<Button type=\"primary\" onClick={close}>",
			"\t\t\t确定",
			"\t\t</Button>",
			"\t\t<Button type=\"weak\" onClick={close}>",
			"\t\t\t取消",
			"\t\t</Button>",
			"\t</Modal.Footer>",
			"</Modal>",
			"${BLOCK_COMMENT_START}",
			"maskClosable 点击遮罩关闭",
			"disableEscape 禁用 ESC 关闭",
			"${BLOCK_COMMENT_END}"
		],
		"description": "Log output to console"
	},
	"对话框_内置方法": {
		"prefix": "tea-modal(对话框)",
		"body": [
			"const askQuestion = async () => {",
			"const yes = await Modal.confirm({",
			"\tmessage: \"确认删除当前所选实例？\",",
			"\tdescription: \"删除后，该实例下的所有配置将会被清空，且无法恢复。\",",
			"\tokText: \"删除\",",
			"\tcancelText: \"取消\",",
			"});",
			"setAnswer(yes ? \"已删除\" : \"未删除\");",
			"};",
			"",
			"const alertSuccess = () =>",
			"Modal.success({",
			"\tmessage: \"路由表更新成功！\",",
			"\tdescription: \"配置将在 1-3 分钟内同步到集群中的路由节点\",",
			"});",
			"",
			"const alertError = () =>",
			"Modal.error({",
			"\tmessage: \"路由表更新失败！\",",
			"\tdescription: \"路由表包含无效的路由转发策略公网网关的网络\",",
			"});",
			"",
			"const alertCustom = () =>",
			"Modal.alert({",
			"\ttype: \"pending\",",
			"\tmessage: \"重启成功\",",
			"\tdescription: \"大约需要 2 分钟，请稍后再登录机器\",",
			"\tbuttons: [",
			"\t\t<Button type=\"primary\" onClick={() => console.log(\"已确认\")}>",
			"\t\t\t确认",
			"\t\t</Button>,",
			"\t\t<Button onClick={() => window.location.reload()}>刷新页面</Button>,",
			"\t],",
			"});"
		],
		"description": "Log output to console"
	},
	"对话框_禁用 ESC 关闭": {
		"prefix": "tea-modal(对话框)",
		"body": [
			"<Modal",
			"\tdisableEscape",
			"\tvisible={visible}",
			"\tcaption=\"对话框标题\"",
			"\tonClose={close}",
			">",
			"\t<Modal.Body>按 ESC 不会关闭</Modal.Body>",
			"\t<Modal.Footer>",
			"\t\t<Button type=\"primary\" onClick={close}>",
			"\t\t\t确定",
			"\t\t</Button>",
			"\t\t<Button type=\"weak\" onClick={close}>",
			"\t\t\t取消",
			"\t\t</Button>",
			"\t</Modal.Footer>",
			"</Modal>",
			"${BLOCK_COMMENT_START}",
			"const [visible, setVisible] = useState(false);",
			"const open = () => setVisible(true);",
			"const close = () => setVisible(false);",
			"${BLOCK_COMMENT_END}"			
		],
		"description": "Log output to console"
	},
	"对话框_Modal.Message": {
		"prefix": "tea-modal(对话框)",
		"body": [
			"<Modal visible={visible} disableCloseIcon onClose={close}>",
			"\t<Modal.Body>",
			"\t\t<Modal.Message",
			"\t\t\ticon=\"success\"",
			"\t\t\tmessage=\"提示消息\"",
			"\t\t\tdescription=\"详细描述\"",
			"\t\t/>",
			"\t</Modal.Body>",
			"\t<Modal.Footer>",
			"\t\t<Button type=\"primary\" onClick={close}>",
			"\t\t\t确定",
			"\t\t</Button>",
			"\t\t<Button type=\"weak\" onClick={close}>",
			"\t\t\t取消",
			"\t\t</Button>",
			"\t</Modal.Footer>",
			"</Modal>",
			"${BLOCK_COMMENT_START}",
			"const [visible, setVisible] = useState(false);",
			"const open = () => setVisible(true);",
			"const close = () => setVisible(false);",
			"${BLOCK_COMMENT_END}"			
		],
		"description": "Log output to console"
	},
	"对话框_尺寸设置": {
		"prefix": "tea-modal(对话框)",
		"body": [
			"<Modal",
			"\tvisible={true}",
			"\t// @ts-ignore",
			"\tsize=\"${1|s,m,l,xl,auto|}\"",
			"\tcaption=\"对话框\"",
			"\tonClose={close(size)}",
			">",
			"\t<Modal.Body>",
			"\t\thello",
			"\t</Modal.Body>",
			"</Modal>"
		],
		"description": "Log output to console"
	},
	"对话框_点击遮罩关闭": {
		"prefix": "tea-modal(对话框)",
		"body": [
			"<Modal",
			"\tmaskClosable",
			"\tvisible={visible}",
			"\tcaption=\"对话框标题\"",
			"\tonClose={close}",
			">",
			"\t<Modal.Body>",
			"\t\t<DatePicker />",
			"\t</Modal.Body>",
			"\t<Modal.Footer />",
			"</Modal>"
		],
		"description": "Log output to console"
	},
	"通知_基本用法": {
		"prefix": "tea-notification(通知)",
		"body": [
			"notification.{$1|success,warning,error|}({",
			"\ttitle: \"标题\",",
			"\tdescription:",
			"\t\t\"文案不限长度，但是展示最大哦显示两行折行的末尾处显示折行的末尾处显示折行的末尾处显示折折行的末尾处显示折折行的末尾处\",",
			"\textra: \"Test\",",
			"\tfooter: <Button type=\"text\">测试</Button>,",
			"})"
		],
		"description": "Log output to console"
	},
	"就地弹出_基本用法": {
		"prefix": "tea-popover(就地弹出)",
		"body": [
			"<Popover",
			"\tplacement=\"top-start\"",
			"\toverlay={",
			"\t\t<div",
			"\t\t\tstyle={{",
			"\t\t\t\tdisplay: \"inline-block\",",
			"\t\t\t\tbackground: \"red\",",
			"\t\t\t\tcolor: \"yellow\",",
			"\t\t\t\tpadding: 2,",
			"\t\t\t}}",
			"\t\t>",
			"\t\t\t这是浮层内容",
			"\t\t</div>",
			"\t}",
			">",
			"\t鼠标上来",
			"</Popover>"
		],
		"description": "Log output to console"
	},
	"文本解释_基本用法": {
		"prefix": "tea-tooltip(文本解释)",
		"body": [
			"<Tooltip title={longContent}>",
			"\t<Text verticalAlign=\"middle\" style={{ maxWidth: 100 }} overflow>",
			"\t\t{longContent}",
			"\t</Text>",
			"</Tooltip>",
			"${BLOCK_COMMENT_START}",
			"const longContent = \"张三，李四，流五，陈六，赵七，王八，李九\";",
			"${BLOCK_COMMENT_END}"
		],
		"description": "Log output to console"
	},
	"穿梭框_基本用法": {
		"prefix": "tea-transfer(穿梭框)",
		"body": [
			"const [modalVisible, setModalVisible] = useState(false);",
			"const close = () => setModalVisible(false);",
			"return (",
			"\t<>",
			"\t\t<section>",
			"\t\t\t<Button onClick={() => setModalVisible(true)}>打开穿梭框</Button>",
			"\t\t\t<Modal caption=\"请选择\" size=\"l\" visible={modalVisible} onClose={close}>",
			"\t\t\t\t<Modal.Body>",
			"\t\t\t\t\t<TransferDemo />",
			"\t\t\t\t</Modal.Body>",
			"\t\t\t\t<Modal.Footer>",
			"\t\t\t\t\t<Button type=\"primary\" onClick={close}>",
			"\t\t\t\t\t\t确定",
			"\t\t\t\t\t</Button>",
			"\t\t\t\t\t<Button type=\"weak\" onClick={close}>",
			"\t\t\t\t\t\t取消",
			"\t\t\t\t\t</Button>",
			"\t\t\t\t</Modal.Footer>",
			"\t\t\t</Modal>",
			"\t\t</section>",
			"",
			"\t\t<section style={{ marginTop: 60 }}>",
			"\t\t\t<TransferDemo />",
			"\t\t</section>",
			"\t</>",
			");",
			"${BLOCK_COMMENT_START}",
			"const { selectable, removeable, scrollable } = Table.addons;",
			"",
			"const cvmList = [",
			"\t{",
			"\t\tinstanceId: \"ins-f5a68io6\",",
			"\t\tinstanceName: \"Hongkong VPN1\",",
			"\t\tstatus: \"running\",",
			"\t},",
			"\t{",
			"\t\tinstanceId: \"ins-4m99aio4\",",
			"\t\tinstanceName: \"Hongkong VPN2\",",
			"\t\tstatus: \"running\",",
			"\t},",
			"\t{",
			"\t\tinstanceId: \"ins-3e7y5ww3\",",
			"\t\tinstanceName: \"Guangzhou Test\",",
			"\t\tstatus: \"stopped\",",
			"\t},",
			"\t{",
			"\t\tinstanceId: \"ins-49as515o\",",
			"\t\tinstanceName: \"Hongkong Test\",",
			"\t\tstatus: \"running\",",
			"\t},",
			"\t{",
			"\t\tinstanceId: \"ins-3e7y5ww2\",",
			"\t\tinstanceName: \"Guangzhou Test\",",
			"\t\tstatus: \"stopped\",",
			"\t},",
			"\t{",
			"\t\tinstanceId: \"ins-49as5151\",",
			"\t\tinstanceName: \"Hongkong Test\",",
			"\t\tstatus: \"running\",",
			"\t},",
			"];",
			"",
			"const columns = [",
			"\t{",
			"\t\tkey: \"instance\",",
			"\t\theader: \"ID/实例名\",",
			"\t\trender: cvm => (",
			"\t\t\t<>",
			"\t\t\t\t<p>",
			"\t\t\t\t\t<a>{cvm.instanceId}</a>",
			"\t\t\t\t</p>",
			"\t\t\t\t<p>{cvm.instanceName}</p>",
			"\t\t\t</>",
			"\t\t),",
			"\t},",
			"\t{",
			"\t\tkey: \"status\",",
			"\t\theader: \"状态\",",
			"\t\twidth: 100,",
			"\t\trender: cvm => {",
			"\t\t\tswitch (cvm.status) {",
			"\t\t\t\tcase \"running\":",
			"\t\t\t\t\treturn <span style={{ color: \"green\" }}>运行中</span>;",
			"\t\t\t\tcase \"stopped\":",
			"\t\t\t\t\treturn <span style={{ color: \"red\" }}>已关机</span>;",
			"\t\t\t}",
			"\t\t\treturn cvm.status;",
			"\t\t},",
			"\t},",
			"];",
			"",
			"function SourceTable({ dataSource, targetKeys, onChange }) {",
			"\treturn (",
			"\t\t<Table",
			"\t\t\trecords={dataSource}",
			"\t\t\trecordKey=\"instanceId\"",
			"\t\t\trowDisabled={record => record.status === \"stopped\"}",
			"\t\t\trowClassName={record => record.status}",
			"\t\t\tcolumns={columns}",
			"\t\t\taddons={[",
			"\t\t\t\tscrollable({",
			"\t\t\t\t\tmaxHeight: 310,",
			"\t\t\t\t\tonScrollBottom: () => console.log(\"到达底部\"),",
			"\t\t\t\t}),",
			"\t\t\t\tselectable({",
			"\t\t\t\t\tvalue: targetKeys,",
			"\t\t\t\t\tonChange,",
			"\t\t\t\t\trowSelect: true,",
			"\t\t\t\t}),",
			"\t\t\t]}",
			"\t\t/>",
			"\t);",
			"}",
			"",
			"function TargetTable({ dataSource, onRemove }) {",
			"\treturn (",
			"\t\t<Table",
			"\t\t\trecords={dataSource}",
			"\t\t\trecordKey=\"instanceId\"",
			"\t\t\tcolumns={columns}",
			"\t\t\taddons={[removeable({ onRemove })]}",
			"\t\t/>",
			"\t);",
			"}",
			"",
			"function TransferDemo() {",
			"\tconst [targetKeys, setTargetKeys] = useState([]);",
			"\tconst [inputValue, setInputValue] = useState(\"\");",
			"",
			"\treturn (",
			"\t\t<Transfer",
			"\t\t\theader={",
			"\t\t\t\t<>",
			"\t\t\t\t\t<h4 style={{ display: \"inline-block\" }}>选择地域</h4>",
			"\t\t\t\t\t<Select placeholder=\"请选择\" options={[]} />",
			"\t\t\t\t</>",
			"\t\t\t}",
			"\t\t\tleftCell={",
			"\t\t\t\t<Transfer.Cell",
			"\t\t\t\t\tscrollable={false}",
			"\t\t\t\t\ttitle=\"选择云服务器\"",
			"\t\t\t\t\ttip=\"支持按住 shift 键进行多选\"",
			"\t\t\t\t\theader={",
			"\t\t\t\t\t\t<SearchBox",
			"\t\t\t\t\t\t\tvalue={inputValue}",
			"\t\t\t\t\t\t\tonChange={value => setInputValue(value)}",
			"\t\t\t\t\t\t/>",
			"\t\t\t\t\t}",
			"\t\t\t\t>",
			"\t\t\t\t\t<SourceTable",
			"\t\t\t\t\t\tdataSource={cvmList.filter(",
			"\t\t\t\t\t\t\ti =>",
			"\t\t\t\t\t\t\t\ti.instanceId.includes(inputValue) ||",
			"\t\t\t\t\t\t\t\ti.instanceName.includes(inputValue)",
			"\t\t\t\t\t\t)}",
			"\t\t\t\t\t\ttargetKeys={targetKeys}",
			"\t\t\t\t\t\tonChange={keys => setTargetKeys(keys)}",
			"\t\t\t\t\t/>",
			"\t\t\t\t</Transfer.Cell>",
			"\t\t\t}",
			"\t\t\trightCell={",
			"\t\t\t\t<Transfer.Cell title={`已选择 (${targetKeys.length})`}>",
			"\t\t\t\t\t<TargetTable",
			"\t\t\t\t\t\tdataSource={cvmList.filter(i => targetKeys.includes(i.instanceId))}",
			"\t\t\t\t\t\tonRemove={key => setTargetKeys(targetKeys.filter(i => i !== key))}",
			"\t\t\t\t\t/>",
			"\t\t\t\t</Transfer.Cell>",
			"\t\t\t}",
			"\t\t/>",
			"\t);",
			"}",
			"${BLOCK_COMMENT_END}"			
		],
		"description": "Log output to console"
	},
	"视频_基本用法": {
		"prefix": "tea-video(视频)",
		"body": [
			"<Video",
			"\tsrc=\"https://cloud.tencent.com/edu/learning/quick-play/1795-20219?auto=1&source=gw.pro.media\"",
			"\ttitle=\"腾讯云 CVM 简介\"",
			">",
			"\t<Card style={{ maxWidth: 300 }}>",
			"\t\t<img",
			"\t\t\tstyle={{ width: \"100%\", display: \"block\" }}",
			"\t\t\tsrc=\"https://mc.qcloudimg.com/static/img/b43aa57660525ebd16bae0ff1da69c86/image.png\"",
			"\t\t\talt=\"bg\"",
			"\t\t/>",
			"\t\t<Card.Body>腾讯云 CVM 简介</Card.Body>",
			"\t</Card>",
			"</Video>"
		],
		"description": "Log output to console"
	},
	"表格_自动提示": {
		"prefix": "tea-table(表格_自动提示)",
		"body": [
			"<>",
			"\t<SearchBox",
			"\t\tdisabled={loading}",
			"\t\tvalue={keywordInput}",
			"\t\tonChange={keywordInput => setKeywordInput(keywordInput)}",
			"\t\tonSearch={keyword => setKeyword(keyword)}",
			"\t\tonClear={() => setKeyword(\"\")}",
			"\t\tplaceholder=\"搜索影片/导演/主演\"",
			"\t/>",
			"\t<Table",
			"\t\tcolumns={[",
			"\t\t\t{",
			"\t\t\t\tkey: \"title\",",
			"\t\t\t\theader: \"电影\",",
			"\t\t\t},",
			"\t\t\t{",
			"\t\t\t\tkey: \"director\",",
			"\t\t\t\theader: \"导演\",",
			"\t\t\t},",
			"\t\t\t{",
			"\t\t\t\tkey: \"actors\",",
			"\t\t\t\theader: \"主演\",",
			"\t\t\t},",
			"\t\t\t{",
			"\t\t\t\tkey: \"region\",",
			"\t\t\t\theader: \"上映地区\",",
			"\t\t\t},",
			"\t\t\t{",
			"\t\t\t\tkey: \"duration\",",
			"\t\t\t\theader: \"长度\",",
			"\t\t\t},",
			"\t\t]}",
			"\t\trecords={movies}",
			"\t\taddons={[",
			"\t\t\tautotip({",
			"\t\t\t\tisLoading: loading,",
			"\t\t\t\tisError: Boolean(error),",
			"\t\t\t\tisFound: Boolean(keyword),",
			"\t\t\t\tonClear: () => setKeyword(\"\"),",
			"\t\t\t\tonRetry: load,",
			"\t\t\t\tfoundKeyword: keyword,",
			"\t\t\t}),",
			"\t\t]}",
			"\t/>",
			"</>",
			"${BLOCK_COMMENT_START}",
			"const { autotip } = Table.addons;",
			"",
			"const [keywordInput, setKeywordInput] = useState(\"\");",
			"const [keyword, setKeyword] = useState(\"\");",
			"const [loading, setLoading] = useState(false);",
			"const [error, setError] = useState(null);",
			"const [movies, setMovies] = useState([]);",
			"",
			"const load = useCallback(",
			"\tasync abortToken => {",
			"\t\tsetLoading(true);",
			"\t\tsetError(null);",
			"\t\ttry {",
			"\t\t\tsetMovies(await loadMovieList(keyword, abortToken));",
			"\t\t} catch (err) {",
			"\t\t\tsetMovies([]);",
			"\t\t\tsetError(err);",
			"\t\t} finally {",
			"\t\t\tsetLoading(false);",
			"\t\t}",
			"\t},",
			"\t[keyword]",
			");",
			"",
			"// keyword 变化重新加载",
			"useEffect(() => {",
			"\tsetKeywordInput(keyword);",
			"\tconst abortToken = {};",
			"\tload(abortToken);",
			"\treturn () => {",
			"\t\tabortToken.aborted = true;",
			"\t};",
			"}, [keyword, load]);",
			"",
			"function loadMovieList(keyword, abortToken) {",
			"\treturn new Promise((resolve, reject) =>",
			"\t\tsetTimeout(() => {",
			"\t\t\t// 如果表示忽略结果，则不返回了",
			"\t\t\tif (abortToken && abortToken.aborted) {",
			"\t\t\t\treturn;",
			"\t\t\t}",
			"\t\t\tif (Math.random() > 0.75) {",
			"\t\t\t\treject(new Error(\"无法加载影片\"));",
			"\t\t\t} else {",
			"\t\t\t\tlet movies = getAllMovies();",
			"\t\t\t\tif (keyword) {",
			"\t\t\t\t\tmovies = movies.filter(",
			"\t\t\t\t\t\tx =>",
			"\t\t\t\t\t\t\tx.title.includes(keyword) ||",
			"\t\t\t\t\t\t\tx.actors.includes(keyword) ||",
			"\t\t\t\t\t\t\tx.director.includes(keyword) ||",
			"\t\t\t\t\t\t\tx.region.includes(keyword)",
			"\t\t\t\t\t);",
			"\t\t\t\t}",
			"\t\t\t\tresolve(movies);",
			"\t\t\t}",
			"\t\t}, 800)",
			"\t);",
			"}",
			"",
			"function getAllMovies() {",
			"\treturn [",
			"\t\t{",
			"\t\t\tid: \"1652592\",",
			"\t\t\ttitle: \"阿丽塔：战斗天使\",",
			"\t\t\tduration: \"122分钟\",",
			"\t\t\tregion: \"美国 加拿大 阿根廷\",",
			"\t\t\tdirector: \"罗伯特·罗德里格兹\",",
			"\t\t\tactors: \"罗莎·萨拉查 / 克里斯托弗·沃尔兹 / 基恩·约翰逊\",",
			"\t\t},",
			"\t\t{",
			"\t\t\tid: \"19899707\",",
			"\t\t\ttitle: \"驯龙高手3\",",
			"\t\t\tduration: \"104分钟\",",
			"\t\t\tregion: \"美国\",",
			"\t\t\tdirector: \"迪恩·德布洛斯\",",
			"\t\t\tactors: \"杰伊·巴鲁切尔 / 亚美莉卡·费雷拉 / 凯特·布兰切特\",",
			"\t\t},",
			"\t\t{",
			"\t\t\tid: \"26266893\",",
			"\t\t\ttitle: \"流浪地球\",",
			"\t\t\tduration: \"125分钟\",",
			"\t\t\tregion: \"中国大陆\",",
			"\t\t\tdirector: \"郭帆\",",
			"\t\t\tactors: \"屈楚萧 / 吴京 / 李光洁\",",
			"\t\t\tvotecount: \"1023916\",",
			"\t\t\tsubject: \"26266893\",",
			"\t\t},",
			"\t\t{",
			"\t\t\tid: \"30163509\",",
			"\t\t\ttitle: \"飞驰人生\",",
			"\t\t\tduration: \"98分钟\",",
			"\t\t\tregion: \"中国大陆\",",
			"\t\t\tdirector: \"韩寒\",",
			"\t\t\tactors: \"沈腾 / 黄景瑜 / 尹正\",",
			"\t\t\tvotecount: \"366158\",",
			"\t\t\tsubject: \"30163509\",",
			"\t\t},",
			"\t\t{",
			"\t\t\tid: \"25986662\",",
			"\t\t\ttitle: \"疯狂的外星人\",",
			"\t\t\tduration: \"116分钟\",",
			"\t\t\tregion: \"中国大陆\",",
			"\t\t\tdirector: \"宁浩\",",
			"\t\t\tactors: \"黄渤 / 沈腾 / 汤姆·派福瑞\",",
			"\t\t\tvotecount: \"336633\",",
			"\t\t\tsubject: \"25986662\",",
			"\t\t},",
			"\t\t{",
			"\t\t\tid: \"4840388\",",
			"\t\t\ttitle: \"新喜剧之王\",",
			"\t\t\tduration: \"91分钟\",",
			"\t\t\tregion: \"中国大陆 香港\",",
			"\t\t\tdirector: \"周星驰\",",
			"\t\t\tactors: \"王宝强 / 鄂靖文 / 张全蛋\",",
			"\t\t\tvotecount: \"154964\",",
			"\t\t\tsubject: \"4840388\",",
			"\t\t},",
			"\t\t{",
			"\t\t\tid: \"27083561\",",
			"\t\t\ttitle: \"朝花夕誓\",",
			"\t\t\tduration: \"115分钟\",",
			"\t\t\tregion: \"日本\",",
			"\t\t\tdirector: \"冈田麿里 筱原俊哉\",",
			"\t\t\tactors: \"石见舞菜香 / 入野自由 / 茅野爱衣\",",
			"\t\t\tvotecount: \"15843\",",
			"\t\t\tsubject: \"27083561\",",
			"\t\t},",
			"\t\t{",
			"\t\t\tid: \"30263995\",",
			"\t\t\ttitle: \"一吻定情\",",
			"\t\t\tduration: \"122分钟\",",
			"\t\t\tregion: \"中国大陆\",",
			"\t\t\tdirector: \"陈玉珊\",",
			"\t\t\tactors: \"王大陆 / 林允 / 陈柏融\",",
			"\t\t\tvotecount: \"22245\",",
			"\t\t\tsubject: \"30263995\",",
			"\t\t},",
			"\t];",
			"}",
			"${BLOCK_COMMENT_END}"			
		],
		"description": "Log output to console"
	},
	"表格_排序": {
		"prefix": "tea-table(表格_排序)",
		"body": [
			"<Table",
			"\t// 如果要在前端排序，可以用 sortable.comparer 生成默认的排序方法",
			"\trecords={[...records].sort(sortable.comparer(sorts))}",
			"\trecordKey=\"name\"",
			"\tcolumns={[",
			"\t\t{ key: \"name\", header: \"姓名\" },",
			"\t\t{ key: \"age\", header: \"年龄\" },",
			"\t\t{ key: \"contact.mail\", header: \"邮箱\" },",
			"\t\t{ key: \"contact.phone\", header: \"电话\" },",
			"\t]}",
			"\taddons={[",
			"\t\tsortable({",
			"\t\t\t// 这两列支持排序，其中 age 列优先倒序，mail 采用自定义排序方法",
			"\t\t\tcolumns: [",
			"\t\t\t\t\"name\",",
			"\t\t\t\t{",
			"\t\t\t\t\tkey: \"age\",",
			"\t\t\t\t\tprefer: \"desc\",",
			"\t\t\t\t},",
			"\t\t\t\t\"contact.mail\",",
			"\t\t\t\t{",
			"\t\t\t\t\tkey: \"contact.phone\",",
			"\t\t\t\t\tprefer: \"desc\",",
			"\t\t\t\t\tsorter: (first, second) => {",
			"\t\t\t\t\t\tif (+first.contact.phone > +second.contact.phone) return 1;",
			"\t\t\t\t\t\tif (+first.contact.phone < +second.contact.phone) return -1;",
			"\t\t\t\t\t\treturn 0;",
			"\t\t\t\t\t},",
			"\t\t\t\t},",
			"\t\t\t],",
			"\t\t\tvalue: sorts,",
			"\t\t\tonChange: value => setSorts(value),",
			"\t\t}),",
			"\t]}",
			"/>",
			"${BLOCK_COMMENT_START}",
			"const { sortable } = Table.addons;",
			"",
			"const records = [",
			"\t{",
			"\t\tname: \"Link\",",
			"\t\tage: 20,",
			"\t\tcontact: { phone: \"88886666\", mail: \"link@qq.com\" },",
			"\t},",
			"\t{",
			"\t\tname: \"Zelda\",",
			"\t\tage: 18,",
			"\t\tcontact: { phone: \"66668888\", mail: \"zelda@qq.com\" },",
			"\t},",
			"\t{",
			"\t\tname: \"Mario\",",
			"\t\tage: 38,",
			"\t\tcontact: { phone: \"88881111\", mail: \"mario@qq.com\" },",
			"\t},",
			"\t{",
			"\t\tname: \"Luigi\",",
			"\t\tage: 48,",
			"\t\tcontact: { phone: \"8123456\", mail: \"luigi@qq.com\" },",
			"\t},",
			"];",
			"",
			"// 当前排序列",
			"const [sorts, setSorts] = useState([]);",
			"${BLOCK_COMMENT_END}"			
		],
		"description": "Log output to console"
	},
	"表格_筛选": {
		"prefix": "tea-table(表格_筛选)",
		"body": [
			"<Table",
			"\trecords={filteredRecords}",
			"\trecordKey={x => x.name}",
			"\tcolumns={[",
			"\t\t{ key: \"name\", header: \"姓名\" },",
			"\t\t{",
			"\t\t\tkey: \"stage\",",
			"\t\t\theader: \"年龄段\",",
			"\t\t\trender: x => STAGE_TEXT[x.stage],",
			"\t\t},",
			"\t\t{",
			"\t\t\tkey: \"marriage\",",
			"\t\t\theader: \"婚姻状态\",",
			"\t\t\trender: x => MARRIAGE_TEXT[x.marriage],",
			"\t\t},",
			"\t]}",
			"\taddons={[",
			"\t\t// 对 age 列增加单选过滤支持",
			"\t\tfilterable({",
			"\t\t\ttype: \"single\",",
			"\t\t\tcolumn: \"stage\",",
			"\t\t\tvalue: stage,",
			"\t\t\tonChange: value => setStage(value),",
			"\t\t\t// 增加 \"全部\" 选项",
			"\t\t\tall: {",
			"\t\t\t\tvalue: ALL_VALUE,",
			"\t\t\t\ttext: \"全部\",",
			"\t\t\t},",
			"\t\t\t// 选项列表",
			"\t\t\toptions: [",
			"\t\t\t\t{ value: \"teenager\", text: \"少年\" },",
			"\t\t\t\t{ value: \"youth\", text: \"青年\" },",
			"\t\t\t\t{ value: \"middle-aged\", text: \"中年\" },",
			"\t\t\t\t{ value: \"elder\", text: \"老年\" },",
			"\t\t\t],",
			"\t\t}),",
			"",
			"\t\t// 对 marriage 列增加多选过滤支持",
			"\t\tfilterable({",
			"\t\t\ttype: \"multiple\",",
			"\t\t\tcolumn: \"marriage\",",
			"\t\t\tvalue: marriages.map(x => String(x)),",
			"\t\t\tonChange: value => {",
			"\t\t\t\tsetMarriages(value.map(x => Number(x)));",
			"\t\t\t},",
			"\t\t\tall: {",
			"\t\t\t\tvalue: ALL_VALUE,",
			"\t\t\t\ttext: \"全部\",",
			"\t\t\t},",
			"\t\t\toptions: MARRIAGE_TEXT.map((text, index) => ({",
			"\t\t\t\tvalue: index.toString(),",
			"\t\t\t\ttext,",
			"\t\t\t})),",
			"\t\t}),",
			"\t]}",
			"/>",
			"${BLOCK_COMMENT_START}",
			"const { filterable } = Table.addons;",
			"",
			"const records = [",
			"\t{ name: \"Mario\", stage: \"teenager\", marriage: 0 },",
			"\t{ name: \"Luigi\", stage: \"youth\", marriage: 0 },",
			"\t{ name: \"Koopa\", stage: \"youth\", marriage: 1 },",
			"\t{ name: \"Yoshi\", stage: \"youth\", marriage: 0 },",
			"\t{ name: \"Link\", stage: \"middle-aged\", marriage: 2 },",
			"\t{ name: \"Zelda\", stage: \"middle-aged\", marriage: 1 },",
			"\t{ name: \"Wario\", stage: \"elder\", marriage: 3 },",
			"\t{ name: \"Pikachu\", stage: \"elder\", marriage: 4 },",
			"];",
			"const MARRIAGE_TEXT = [\"未婚\", \"已婚\", \"离异\", \"再婚\", \"丧偶\"];",
			"const STAGE_TEXT = {",
			"\tteenager: \"少年\",",
			"\tyouth: \"青年\",",
			"\t\"middle-aged\": \"中年\",",
			"\telder: \"老年\",",
			"};",
			"const ALL_VALUE = \"__ALL__\";",
			"",
			"// 当前排序列",
			"// 年龄段筛选值",
			"const [stage, setStage] = useState(ALL_VALUE);",
			"// 婚姻状态筛选值",
			"const [marriages, setMarriages] = useState([]);",
			"",
			"let filteredRecords = records.slice();",
			"",
			"// 根据年龄段筛选",
			"if (stage !== ALL_VALUE) {",
			"\tfilteredRecords = filteredRecords.filter(x => x.stage === stage);",
			"}",
			"",
			"// 根据混音状态",
			"if (marriages.length > 0) {",
			"\tfilteredRecords = filteredRecords.filter(",
			"\t\trecord => marriages.indexOf(record.marriage) > -1",
			"\t);",
			"}",
			"${BLOCK_COMMENT_END}"			
		],
		"description": "Log output to console"
	},
	"表格_行展开_": {
		"prefix": "tea-table(表格_行展开)",
		"body": [
			"<Table",
			"\t// 配置行",
			"\trecords={records}",
			"\t// 配置行键值",
			"\trecordKey={record => {",
			"\t\t// 这里要注意，原始数据中数据类型全是字符串，不转成字符串会导致 key 值匹配不上",
			"\t\treturn String(record.msgList ? record.fType : record.msgType);",
			"\t}}",
			"\t// 配置列",
			"\tcolumns={[",
			"\t\t{",
			"\t\t\tkey: \"name\",",
			"\t\t\theader: \"消息类型\",",
			"\t\t\trender: record => record.name,",
			"\t\t\twidth: 250,",
			"\t\t},",
			"\t\trenderIconColumn(\"enableSiteMsg\", \"站内信\"),",
			"\t\trenderIconColumn(\"enableEMail\", \"邮件\"),",
			"\t\trenderIconColumn(\"enableSms\", \"短信\"),",
			"\t\trenderIconColumn(\"enableWX\", \"微信\"),",
			"\t\t{",
			"\t\t\tkey: \"receivers\",",
			"\t\t\theader: \"接收人\",",
			"\t\t\trender: record => record.receivers || null,",
			"\t\t},",
			"\t\t{",
			"\t\t\tkey: \"settings\",",
			"\t\t\theader: \"操作\",",
			"\t\t\twidth: 100,",
			"\t\t\trender: renderOperationColumn(expandedSet, setExpandedKeys),",
			"\t\t},",
			"\t]}",
			"\t// 配置插件",
			"\taddons={[",
			"\t\texpandable({",
			"\t\t\t// 已经展开的产品",
			"\t\t\texpandedKeys,",
			"\t\t\t// 产品展开为消息行",
			"\t\t\texpand: record => record.msgList || null,",
			"\t\t\t// 发生展开行为时，回调更新展开键值",
			"\t\t\tonExpandedKeysChange: keys => setExpandedKeys(keys),",
			"\t\t\t// 只有产品行允许展开",
			"\t\t\tshouldRecordExpandable: record => Boolean(record.msgList),",
			"\t\t}),",
			"\t\tindentable({",
			"\t\t\t// 缩进放在「消息类型」列上",
			"\t\t\ttargetColumnKey: \"name\",",
			"\t\t\t// 提供层级关系",
			"\t\t\trelations,",
			"\t\t}),",
			"\t]}",
			"/>",
			"${BLOCK_COMMENT_START}",
			"const { expandable, indentable } = Table.addons;",
			"",
			"const records = getMockRecords();",
			"",
			"// 当前展开的产品",
			"const [expandedKeys, setExpandedKeys] = useState([",
			"\t// 默认展开第一个产品",
			"\tString(records[0].fType),",
			"]);",
			"const expandedSet = new Set(expandedKeys);",
			"",
			"/**",
			" * 生成子孙关系信息",
			" */",
			"const getRecordRelations = useCallback(records => {",
			"\t/**",
			"\t * @type {import('@tencent/tea-component/lib/checktree').CheckTreeRelation}",
			"\t */",
			"\tconst relations = {};",
			"\tfor (const record of records) {",
			"\t\tfor (const msg of record.msgList) {",
			"\t\t\trelations[msg.msgType] = record.fType;",
			"\t\t}",
			"\t}",
			"\treturn relations;",
			"}, []);",
			"",
			"const relations = useMemo(() => getRecordRelations(records), [",
			"\tgetRecordRelations,",
			"]);",
			"",
			"/**",
			" * 渲染图标列",
			" * @param {string} key",
			" * @param {string} header",
			" */",
			"function renderIconColumn(key, header) {",
			"\treturn {",
			"\t\tkey,",
			"\t\theader,",
			"\t\twidth: 80,",
			"\t\trender: record => {",
			"\t\t\tif (!record.currentChannel || !record.currentChannel[key]) {",
			"\t\t\t\treturn null;",
			"\t\t\t}",
			"\t\t\treturn <Icon type=\"success\" />;",
			"\t\t},",
			"\t};",
			"}",
			"",
			"/**",
			" * 渲染操作列",
			" * @param {Set<string>} expandedSet",
			" * @param {(keys: string[]) => void} setExpandedKeys",
			" */",
			"function renderOperationColumn(expandedSet, setExpandedKeys) {",
			"\treturn ({ fType, msgList }) => {",
			"\t\tif (msgList) {",
			"\t\t\tconst type = String(fType);",
			"\t\t\tconst text = expandedSet.has(type) ? \"收起\" : \"展开\";",
			"\t\t\treturn (",
			"\t\t\t\t<Button",
			"\t\t\t\t\ttype=\"link\"",
			"\t\t\t\t\tonClick={() => {",
			"\t\t\t\t\t\tif (expandedSet.has(type)) {",
			"\t\t\t\t\t\t\texpandedSet.delete(type);",
			"\t\t\t\t\t\t} else {",
			"\t\t\t\t\t\t\texpandedSet.add(type);",
			"\t\t\t\t\t\t}",
			"\t\t\t\t\t\tsetExpandedKeys(Array.from(expandedSet));",
			"\t\t\t\t\t}}",
			"\t\t\t\t>",
			"\t\t\t\t\t<strong>{text}</strong>",
			"\t\t\t\t</Button>",
			"\t\t\t);",
			"\t\t}",
			"\t\treturn (",
			"\t\t\t<Button",
			"\t\t\t\ttype=\"link\"",
			"\t\t\t\tonClick={() =>",
			"\t\t\t\t\tModal.success({",
			"\t\t\t\t\t\tmessage: \"设置点啥\",",
			"\t\t\t\t\t\tdescription: \"我也不知道呀\",",
			"\t\t\t\t\t})",
			"\t\t\t\t}",
			"\t\t\t>",
			"\t\t\t\t设置",
			"\t\t\t</Button>",
			"\t\t);",
			"\t};",
			"}",
			"",
			"/**",
			" * 模拟数据",
			" */",
			"function getMockRecords() {",
			"\treturn [",
			"\t\t{",
			"\t\t\tname: \"财务消息\",",
			"\t\t\tdisplayWeight: 1000,",
			"\t\t\tmsgList: [",
			"\t\t\t\t{",
			"\t\t\t\t\tmsgType: 213,",
			"\t\t\t\t\tfType: 106,",
			"\t\t\t\t\tname: \"账户欠费通知\",",
			"\t\t\t\t\tcurrentChannel: {",
			"\t\t\t\t\t\tenableSiteMsg: true,",
			"\t\t\t\t\t\tenableEMail: true,",
			"\t\t\t\t\t\tenableSms: true,",
			"\t\t\t\t\t\tenableWX: true,",
			"\t\t\t\t\t},",
			"\t\t\t\t\treceivers:",
			"\t\t\t\t\t\t\"Coder体验账号, lewiszeng, vincehuang, cobipan, powellli, alexpang, asinli, neilsun, barry, hugooliu, ruippan, subAccount_huiping, frostzhao, condichen11, condichen22\",",
			"\t\t\t\t},",
			"\t\t\t\t{",
			"\t\t\t\t\tmsgType: 268,",
			"\t\t\t\t\tfType: 106,",
			"\t\t\t\t\tname: \"余额预警通知\",",
			"\t\t\t\t\tcurrentChannel: {",
			"\t\t\t\t\t\tenableSiteMsg: true,",
			"\t\t\t\t\t\tenableEMail: true,",
			"\t\t\t\t\t\tenableSms: true,",
			"\t\t\t\t\t\tenableWX: true,",
			"\t\t\t\t\t},",
			"\t\t\t\t\treceivers:",
			"\t\t\t\t\t\t\"Coder体验账号, lewiszeng, vincehuang, cobipan, frostzhao, condichen, condichen22\",",
			"\t\t\t\t},",
			"\t\t\t\t{",
			"\t\t\t\t\tmsgType: 215,",
			"\t\t\t\t\tfType: 106,",
			"\t\t\t\t\tname: \"账户提现通知\",",
			"\t\t\t\t\tcurrentChannel: {",
			"\t\t\t\t\t\tenableSiteMsg: false,",
			"\t\t\t\t\t\tenableEMail: false,",
			"\t\t\t\t\t\tenableSms: true,",
			"\t\t\t\t\t\tenableWX: false,",
			"\t\t\t\t\t},",
			"\t\t\t\t\treceivers: \"Coder体验账号, lewiszeng, vincehuang, cobipan, alexpang\",",
			"\t\t\t\t},",
			"\t\t\t\t{",
			"\t\t\t\t\tmsgType: 310,",
			"\t\t\t\t\tfType: 106,",
			"\t\t\t\t\tname: \"账单出账通知\",",
			"\t\t\t\t\tcurrentChannel: {",
			"\t\t\t\t\t\tenableSiteMsg: true,",
			"\t\t\t\t\t\tenableEMail: true,",
			"\t\t\t\t\t\tenableSms: true,",
			"\t\t\t\t\t\tenableWX: false,",
			"\t\t\t\t\t},",
			"\t\t\t\t\treceivers: \"Coder体验账号\",",
			"\t\t\t\t},",
			"\t\t\t],",
			"\t\t\tfType: \"106\",",
			"\t\t},",
			"\t\t{",
			"\t\t\tname: \"产品消息\",",
			"\t\t\tdisplayWeight: 900,",
			"\t\t\tmsgList: [",
			"\t\t\t\t{",
			"\t\t\t\t\tmsgType: 217,",
			"\t\t\t\t\tfType: 103,",
			"\t\t\t\t\tname: \"产品到期、回收通知\",",
			"\t\t\t\t\tcurrentChannel: {",
			"\t\t\t\t\t\tenableSiteMsg: true,",
			"\t\t\t\t\t\tenableEMail: false,",
			"\t\t\t\t\t\tenableSms: false,",
			"\t\t\t\t\t\tenableWX: true,",
			"\t\t\t\t\t},",
			"\t\t\t\t\treceivers: \"lewiszeng, vincehuang, alexpang, frostzhao\",",
			"\t\t\t\t},",
			"\t\t\t\t{",
			"\t\t\t\t\tmsgType: 219,",
			"\t\t\t\t\tfType: 103,",
			"\t\t\t\t\tname: \"产品自动续费通知\",",
			"\t\t\t\t\tcurrentChannel: {",
			"\t\t\t\t\t\tenableSiteMsg: false,",
			"\t\t\t\t\t\tenableEMail: true,",
			"\t\t\t\t\t\tenableSms: false,",
			"\t\t\t\t\t\tenableWX: false,",
			"\t\t\t\t\t},",
			"\t\t\t\t\treceivers: \"Coder体验账号, lewiszeng, alexpang\",",
			"\t\t\t\t},",
			"\t\t\t\t{",
			"\t\t\t\t\tmsgType: 283,",
			"\t\t\t\t\tfType: 103,",
			"\t\t\t\t\tname: \"CDM云数据迁移消息通知\",",
			"\t\t\t\t\tcurrentChannel: {",
			"\t\t\t\t\t\tenableSiteMsg: false,",
			"\t\t\t\t\t\tenableEMail: false,",
			"\t\t\t\t\t\tenableSms: true,",
			"\t\t\t\t\t\tenableWX: false,",
			"\t\t\t\t\t},",
			"\t\t\t\t\treceivers:",
			"\t\t\t\t\t\t\"Coder体验账号, lewiszeng, vincehuang, cobipan, powellli, daniclin, kurukhuang, alexpang, franklan, asinli\",",
			"\t\t\t\t},",
			"\t\t\t\t{",
			"\t\t\t\t\tmsgType: 208,",
			"\t\t\t\t\tfType: 103,",
			"\t\t\t\t\tname: \"CDN相关通知\",",
			"\t\t\t\t\tcurrentChannel: {",
			"\t\t\t\t\t\tenableSiteMsg: false,",
			"\t\t\t\t\t\tenableEMail: false,",
			"\t\t\t\t\t\tenableSms: true,",
			"\t\t\t\t\t\tenableWX: false,",
			"\t\t\t\t\t},",
			"\t\t\t\t\treceivers: \"Coder体验账号\",",
			"\t\t\t\t},",
			"\t\t\t\t{",
			"\t\t\t\t\tmsgType: 294,",
			"\t\t\t\t\tfType: 103,",
			"\t\t\t\t\tname: \"产品服务相关通知\",",
			"\t\t\t\t\tcurrentChannel: {",
			"\t\t\t\t\t\tenableSiteMsg: false,",
			"\t\t\t\t\t\tenableEMail: false,",
			"\t\t\t\t\t\tenableSms: false,",
			"\t\t\t\t\t\tenableWX: true,",
			"\t\t\t\t\t},",
			"\t\t\t\t\treceivers: \"Coder体验账号, frostzhao\",",
			"\t\t\t\t},",
			"\t\t\t\t{",
			"\t\t\t\t\tmsgType: 267,",
			"\t\t\t\t\tfType: 103,",
			"\t\t\t\t\tname: \"HTTPDNS相关通知\",",
			"\t\t\t\t\tcurrentChannel: {",
			"\t\t\t\t\t\tenableSiteMsg: false,",
			"\t\t\t\t\t\tenableEMail: true,",
			"\t\t\t\t\t\tenableSms: false,",
			"\t\t\t\t\t\tenableWX: false,",
			"\t\t\t\t\t},",
			"\t\t\t\t\treceivers:",
			"\t\t\t\t\t\t\"Coder体验账号, lewiszeng, vincehuang, cobipan, powellli, daniclin, kurukhuang, alexpang\",",
			"\t\t\t\t},",
			"\t\t\t\t{",
			"\t\t\t\t\tmsgType: 292,",
			"\t\t\t\t\tfType: 103,",
			"\t\t\t\t\tname: \"DNSPod邮件通知\",",
			"\t\t\t\t\tcurrentChannel: {",
			"\t\t\t\t\t\tenableSiteMsg: false,",
			"\t\t\t\t\t\tenableEMail: true,",
			"\t\t\t\t\t\tenableSms: false,",
			"\t\t\t\t\t\tenableWX: false,",
			"\t\t\t\t\t},",
			"\t\t\t\t\treceivers: \"Coder体验账号\",",
			"\t\t\t\t},",
			"\t\t\t\t{",
			"\t\t\t\t\tmsgType: 233,",
			"\t\t\t\t\tfType: 103,",
			"\t\t\t\t\tname: \"天御业务安全防护相关通知\",",
			"\t\t\t\t\tcurrentChannel: {",
			"\t\t\t\t\t\tenableSiteMsg: false,",
			"\t\t\t\t\t\tenableEMail: true,",
			"\t\t\t\t\t\tenableSms: false,",
			"\t\t\t\t\t\tenableWX: false,",
			"\t\t\t\t\t},",
			"\t\t\t\t\treceivers: \"Coder体验账号, lewiszeng, alexpang\",",
			"\t\t\t\t},",
			"\t\t\t\t{",
			"\t\t\t\t\tmsgType: 269,",
			"\t\t\t\t\tfType: 103,",
			"\t\t\t\t\tname: \"事件告警通知\",",
			"\t\t\t\t\tcurrentChannel: {",
			"\t\t\t\t\t\tenableSiteMsg: false,",
			"\t\t\t\t\t\tenableEMail: false,",
			"\t\t\t\t\t\tenableSms: true,",
			"\t\t\t\t\t\tenableWX: true,",
			"\t\t\t\t\t},",
			"\t\t\t\t\treceivers: \"Coder体验账号, frostzhao\",",
			"\t\t\t\t},",
			"\t\t\t\t{",
			"\t\t\t\t\tmsgType: 309,",
			"\t\t\t\t\tfType: 103,",
			"\t\t\t\t\tname: \"工单服务通知\",",
			"\t\t\t\t\tcurrentChannel: {",
			"\t\t\t\t\t\tenableSiteMsg: false,",
			"\t\t\t\t\t\tenableEMail: false,",
			"\t\t\t\t\t\tenableSms: false,",
			"\t\t\t\t\t\tenableWX: true,",
			"\t\t\t\t\t},",
			"\t\t\t\t\treceivers: \"Coder体验账号, frostzhao\",",
			"\t\t\t\t},",
			"\t\t\t\t{",
			"\t\t\t\t\tmsgType: 222,",
			"\t\t\t\t\tfType: 103,",
			"\t\t\t\t\tname: \"SSL证书相关通知\",",
			"\t\t\t\t\tcurrentChannel: {",
			"\t\t\t\t\t\tenableSiteMsg: false,",
			"\t\t\t\t\t\tenableEMail: false,",
			"\t\t\t\t\t\tenableSms: true,",
			"\t\t\t\t\t\tenableWX: false,",
			"\t\t\t\t\t},",
			"\t\t\t\t\treceivers: \"Coder体验账号\",",
			"\t\t\t\t},",
			"\t\t\t\t{",
			"\t\t\t\t\tmsgType: 232,",
			"\t\t\t\t\tfType: 103,",
			"\t\t\t\t\tname: \"官网服务通知\",",
			"\t\t\t\t\tcurrentChannel: {",
			"\t\t\t\t\t\tenableSiteMsg: false,",
			"\t\t\t\t\t\tenableEMail: false,",
			"\t\t\t\t\t\tenableSms: true,",
			"\t\t\t\t\t\tenableWX: true,",
			"\t\t\t\t\t},",
			"\t\t\t\t\treceivers: \"Coder体验账号, frostzhao\",",
			"\t\t\t\t},",
			"\t\t\t\t{",
			"\t\t\t\t\tmsgType: 256,",
			"\t\t\t\t\tfType: 103,",
			"\t\t\t\t\tname: \"URL安全解决方案\",",
			"\t\t\t\t\tcurrentChannel: {",
			"\t\t\t\t\t\tenableSiteMsg: false,",
			"\t\t\t\t\t\tenableEMail: false,",
			"\t\t\t\t\t\tenableSms: true,",
			"\t\t\t\t\t\tenableWX: false,",
			"\t\t\t\t\t},",
			"\t\t\t\t\treceivers: \"Coder体验账号\",",
			"\t\t\t\t},",
			"\t\t\t\t{",
			"\t\t\t\t\tmsgType: 264,",
			"\t\t\t\t\tfType: 103,",
			"\t\t\t\t\tname: \"渠道服务通知\",",
			"\t\t\t\t\tcurrentChannel: {",
			"\t\t\t\t\t\tenableSiteMsg: false,",
			"\t\t\t\t\t\tenableEMail: false,",
			"\t\t\t\t\t\tenableSms: true,",
			"\t\t\t\t\t\tenableWX: false,",
			"\t\t\t\t\t},",
			"\t\t\t\t\treceivers: \"Coder体验账号, kurukhuang\",",
			"\t\t\t\t},",
			"\t\t\t\t{",
			"\t\t\t\t\tmsgType: 279,",
			"\t\t\t\t\tfType: 103,",
			"\t\t\t\t\tname: \"证书两码发放\",",
			"\t\t\t\t\tcurrentChannel: {",
			"\t\t\t\t\t\tenableSiteMsg: false,",
			"\t\t\t\t\t\tenableEMail: true,",
			"\t\t\t\t\t\tenableSms: false,",
			"\t\t\t\t\t\tenableWX: false,",
			"\t\t\t\t\t},",
			"\t\t\t\t\treceivers: \"Coder体验账号\",",
			"\t\t\t\t},",
			"\t\t\t\t{",
			"\t\t\t\t\tmsgType: 302,",
			"\t\t\t\t\tfType: 103,",
			"\t\t\t\t\tname: \"云市场服务通知\",",
			"\t\t\t\t\tcurrentChannel: {",
			"\t\t\t\t\t\tenableSiteMsg: false,",
			"\t\t\t\t\t\tenableEMail: false,",
			"\t\t\t\t\t\tenableSms: true,",
			"\t\t\t\t\t\tenableWX: false,",
			"\t\t\t\t\t},",
			"\t\t\t\t\treceivers: \"Coder体验账号\",",
			"\t\t\t\t},",
			"\t\t\t],",
			"\t\t\tfType: \"103\",",
			"\t\t},",
			"\t\t{",
			"\t\t\tname: \"安全消息\",",
			"\t\t\tdisplayWeight: 800,",
			"\t\t\tmsgList: [",
			"\t\t\t\t{",
			"\t\t\t\t\tmsgType: 207,",
			"\t\t\t\t\tfType: 104,",
			"\t\t\t\t\tname: \"安全事件通知\",",
			"\t\t\t\t\tcurrentChannel: {",
			"\t\t\t\t\t\tenableSiteMsg: false,",
			"\t\t\t\t\t\tenableEMail: false,",
			"\t\t\t\t\t\tenableSms: true,",
			"\t\t\t\t\t\tenableWX: true,",
			"\t\t\t\t\t},",
			"\t\t\t\t\treceivers:",
			"\t\t\t\t\t\t\"Coder体验账号, lewiszeng, vincehuang, cobipan, powellli, daniclin, kurukhuang, alexpang, frostzhao\",",
			"\t\t\t\t},",
			"\t\t\t\t{",
			"\t\t\t\t\tmsgType: 303,",
			"\t\t\t\t\tfType: 104,",
			"\t\t\t\t\tname: \"内容违规通知\",",
			"\t\t\t\t\tcurrentChannel: {",
			"\t\t\t\t\t\tenableSiteMsg: false,",
			"\t\t\t\t\t\tenableEMail: true,",
			"\t\t\t\t\t\tenableSms: false,",
			"\t\t\t\t\t\tenableWX: false,",
			"\t\t\t\t\t},",
			"\t\t\t\t\treceivers: \"Coder体验账号\",",
			"\t\t\t\t},",
			"\t\t\t],",
			"\t\t\tfType: \"104\",",
			"\t\t},",
			"\t\t{",
			"\t\t\tname: \"腾讯云动态\",",
			"\t\t\tdisplayWeight: 700,",
			"\t\t\tmsgList: [",
			"\t\t\t\t{",
			"\t\t\t\t\tmsgType: 305,",
			"\t\t\t\t\tfType: 102,",
			"\t\t\t\t\tname: \"云+社区相关通知\",",
			"\t\t\t\t\tcurrentChannel: {",
			"\t\t\t\t\t\tenableSiteMsg: false,",
			"\t\t\t\t\t\tenableEMail: false,",
			"\t\t\t\t\t\tenableSms: false,",
			"\t\t\t\t\t\tenableWX: true,",
			"\t\t\t\t\t},",
			"\t\t\t\t\treceivers: \"Coder体验账号, frostzhao\",",
			"\t\t\t\t},",
			"\t\t\t\t{",
			"\t\t\t\t\tmsgType: 211,",
			"\t\t\t\t\tfType: 102,",
			"\t\t\t\t\tname: \"活动通知\",",
			"\t\t\t\t\tcurrentChannel: {",
			"\t\t\t\t\t\tenableSiteMsg: false,",
			"\t\t\t\t\t\tenableEMail: false,",
			"\t\t\t\t\t\tenableSms: true,",
			"\t\t\t\t\t\tenableWX: false,",
			"\t\t\t\t\t},",
			"\t\t\t\t\treceivers: \"Coder体验账号\",",
			"\t\t\t\t},",
			"\t\t\t],",
			"\t\t\tfType: \"102\",",
			"\t\t},",
			"\t];",
			"}",
			"${BLOCK_COMMENT_END}"			
		],
		"description": "Log output to console"
	},
	"表格_缩进": {
		"prefix": "tea-table(表格_缩进)",
		"body": [
			"<Table",
			"\trecords={records}",
			"\trecordKey=\"id\"",
			"\tcolumns={[",
			"\t\t{ key: \"id\", header: \"ID\" },",
			"\t\t{ key: \"content\", header: \"内容\" },",
			"\t]}",
			"\taddons={[",
			"\t\tindentable({",
			"\t\t\ttargetColumnKey: \"id\",",
			"\t\t\tindent: 50,",
			"\t\t\trelations: {",
			"\t\t\t\t\"1-1\": \"1\",",
			"\t\t\t\t\"2-1\": \"2\",",
			"\t\t\t\t\"2-1-1\": \"2-1\",",
			"\t\t\t},",
			"\t\t}),",
			"\t]}",
			"/>",
			"${BLOCK_COMMENT_START}",
			"const { indentable } = Table.addons;",
			"",
			"const records = [",
			"\t{ id: \"1\", content: \"内容 1\" },",
			"\t{ id: \"1-1\", content: \"内容 1-1\" },",
			"\t{ id: \"2\", content: \"内容 2\" },",
			"\t{ id: \"2-1\", content: \"内容 2-1\" },",
			"\t{ id: \"2-1-1\", content: \"内容 2-1-1\" },",
			"];",
			"${BLOCK_COMMENT_END}"			
		],
		"description": "Log output to console"
	},
	"表格_单选": {
		"prefix": "tea-table(表格_单选)",
		"body": [
			"<Table",
			"\trecords={cvmList}",
			"\trecordKey=\"instanceId\"",
			"\trowDisabled={record => record.status === \"stopped\"}",
			"\tcolumns={[",
			"\t\t{",
			"\t\t\tkey: \"instance\",",
			"\t\t\theader: \"ID/实例名\",",
			"\t\t\trender: cvm => (",
			"\t\t\t\t<>",
			"\t\t\t\t\t<p>",
			"\t\t\t\t\t\t<a>{cvm.instanceId}</a>",
			"\t\t\t\t\t</p>",
			"\t\t\t\t\t<p>{cvm.instanceName}</p>",
			"\t\t\t\t</>",
			"\t\t\t),",
			"\t\t},",
			"\t\t{",
			"\t\t\tkey: \"status\",",
			"\t\t\theader: \"状态\",",
			"\t\t\twidth: 100,",
			"\t\t\trender: cvm => {",
			"\t\t\t\tif (cvm.status === \"running\") {",
			"\t\t\t\t\treturn <span style={{ color: \"green\" }}>运行中</span>;",
			"\t\t\t\t}",
			"\t\t\t\tif (cvm.status === \"stopped\") {",
			"\t\t\t\t\treturn <span style={{ color: \"red\" }}>已关机</span>;",
			"\t\t\t\t}",
			"\t\t\t\treturn cvm.status;",
			"\t\t\t},",
			"\t\t},",
			"\t\t{",
			"\t\t\tkey: \"area\",",
			"\t\t\theader: \"可用区域\",",
			"\t\t},",
			"\t\t{",
			"\t\t\tkey: \"modal\",",
			"\t\t\theader: \"主机型号\",",
			"\t\t},",
			"\t\t{",
			"\t\t\tkey: \"publicIP\",",
			"\t\t\theader: \"IP 地址\",",
			"\t\t\talign: \"right\",",
			"\t\t},",
			"\t]}",
			"\taddons={[",
			"\t\tradioable({",
			"\t\t\tvalue: selectedKey,",
			"\t\t\tonChange: (key, context) => {",
			"\t\t\t\tconsole.log(key, context);",
			"\t\t\t\tsetSelectedKey(key);",
			"\t\t\t},",
			"\t\t\trowSelect: true,",
			"\t\t\trender: (element, { disabled }) => {",
			"\t\t\t\treturn disabled ? <Icon type=\"loading\" /> : element;",
			"\t\t\t},",
			"\t\t}),",
			"\t]}",
			"/>",
			"${BLOCK_COMMENT_START}",
			"const { radioable } = Table.addons;",
			"",
			"const cvmList = [",
			"\t{",
			"\t\tinstanceId: \"ins-4m99aio4\",",
			"\t\tinstanceName: \"Hongkong VPN\",",
			"\t\tstatus: \"running\",",
			"\t\tarea: \"香港一区\",",
			"\t\tmodal: \"标准型 S1\",",
			"\t\tpublicIP: \"119.28.142.24\",",
			"\t\tprivateIP: \"10.144.77.75\",",
			"\t},",
			"\t{",
			"\t\tinstanceId: \"ins-b3fakzpc\",",
			"\t\tinstanceName: \"Guangzhou Test\",",
			"\t\tarea: \"广州四区\",",
			"\t\tmodal: \"标准型 S5\",",
			"\t\tpublicIP: \"106.52.244.57\",",
			"\t\tprivateIP: \"172.16.18.40\",",
			"\t},",
			"\t{",
			"\t\tinstanceId: \"ins-3e7y5ww3\",",
			"\t\tinstanceName: \"Guangzhou Test\",",
			"\t\tstatus: \"stopped\",",
			"\t\tarea: \"广州三区\",",
			"\t\tmodal: \"标准型 S1\",",
			"\t\tpublicIP: \"112.30.42.241\",",
			"\t\tprivateIP: \"10.121.72.123\",",
			"\t},",
			"];",
			"",
			"const [selectedKey, setSelectedKey] = useState(null);",
			"${BLOCK_COMMENT_END}"			
		],
		"description": "Log output to console"
	},
	"表格_多选": {
		"prefix": "tea-table(表格_多选)",
		"body": [
			"<Table",
			"\trecords={cvmList}",
			"\trecordKey=\"instanceId\"",
			"\trowDisabled={record => record.status === \"stopped\"}",
			"\tcolumns={[",
			"\t\t{",
			"\t\t\tkey: \"instance\",",
			"\t\t\theader: \"ID/实例名\",",
			"\t\t\trender: cvm => (",
			"\t\t\t\t<>",
			"\t\t\t\t\t<p>",
			"\t\t\t\t\t\t<a>{cvm.instanceId}</a>",
			"\t\t\t\t\t</p>",
			"\t\t\t\t\t<p>{cvm.instanceName}</p>",
			"\t\t\t\t</>",
			"\t\t\t),",
			"\t\t},",
			"\t\t{",
			"\t\t\tkey: \"status\",",
			"\t\t\theader: \"状态\",",
			"\t\t\twidth: 100,",
			"\t\t\trender: cvm => {",
			"\t\t\t\tif (cvm.status === \"running\") {",
			"\t\t\t\t\treturn <span style={{ color: \"green\" }}>运行中</span>;",
			"\t\t\t\t}",
			"\t\t\t\tif (cvm.status === \"stopped\") {",
			"\t\t\t\t\treturn <span style={{ color: \"red\" }}>已关机</span>;",
			"\t\t\t\t}",
			"\t\t\t\treturn cvm.status;",
			"\t\t\t},",
			"\t\t},",
			"\t\t{",
			"\t\t\tkey: \"area\",",
			"\t\t\theader: \"可用区域\",",
			"\t\t},",
			"\t\t{",
			"\t\t\tkey: \"modal\",",
			"\t\t\theader: \"主机型号\",",
			"\t\t},",
			"\t\t{",
			"\t\t\tkey: \"publicIP\",",
			"\t\t\theader: \"IP 地址\",",
			"\t\t\talign: \"right\",",
			"\t\t},",
			"\t]}",
			"\taddons={[",
			"\t\tselectable({",
			"\t\t\tvalue: selectedKeys,",
			"\t\t\tonChange: (keys, context) => {",
			"\t\t\t\tconsole.log(keys, context);",
			"\t\t\t\tsetSelectedKeys(keys);",
			"\t\t\t},",
			"\t\t\trowSelect: true,",
			"\t\t\trender: (element, { disabled }) => {",
			"\t\t\t\treturn disabled ? <Icon type=\"loading\" /> : element;",
			"\t\t\t},",
			"\t\t}),",
			"\t]}",
			"/>",
			"${BLOCK_COMMENT_START}",
			"const { selectable } = Table.addons;",
			"",
			"const cvmList = [",
			"\t{",
			"\t\tinstanceId: \"ins-4m99aio4\",",
			"\t\tinstanceName: \"Hongkong VPN\",",
			"\t\tstatus: \"running\",",
			"\t\tarea: \"香港一区\",",
			"\t\tmodal: \"标准型 S1\",",
			"\t\tpublicIP: \"119.28.142.24\",",
			"\t\tprivateIP: \"10.144.77.75\",",
			"\t},",
			"\t{",
			"\t\tinstanceId: \"ins-b3fakzpc\",",
			"\t\tinstanceName: \"Guangzhou Test\",",
			"\t\tarea: \"广州四区\",",
			"\t\tmodal: \"标准型 S5\",",
			"\t\tpublicIP: \"106.52.244.57\",",
			"\t\tprivateIP: \"172.16.18.40\",",
			"\t},",
			"\t{",
			"\t\tinstanceId: \"ins-3e7y5ww3\",",
			"\t\tinstanceName: \"Guangzhou Test\",",
			"\t\tstatus: \"stopped\",",
			"\t\tarea: \"广州三区\",",
			"\t\tmodal: \"标准型 S1\",",
			"\t\tpublicIP: \"112.30.42.241\",",
			"\t\tprivateIP: \"10.121.72.123\",",
			"\t},",
			"];",
			"",
			"const [selectedKeys, setSelectedKeys] = useState([]);",
			"${BLOCK_COMMENT_END}"			
		],
		"description": "Log output to console"
	},
	"表格_移除": {
		"prefix": "tea-table(表格_移除)",
		"body": [
			"<Table",
			"\trecords={records.filter(({ name }) => !removedKeys.includes(name))}",
			"\trecordKey=\"name\"",
			"\tcolumns={[",
			"\t\t{ key: \"name\", header: \"姓名\" },",
			"\t\t{ key: \"age\", header: \"年龄\" },",
			"\t]}",
			"\taddons={[",
			"\t\tremoveable({",
			"\t\t\tonRemove: (key, context) => {",
			"\t\t\t\tconsole.log(key, context);",
			"\t\t\t\tsetRemoveKeys(keys => [...keys, key]);",
			"\t\t\t},",
			"\t\t}),",
			"\t]}",
			"/>",
			"${BLOCK_COMMENT_START}",
			"const { removeable } = Table.addons;",
			"",
			"const records = [",
			"\t{ name: \"Link\", age: 20 },",
			"\t{ name: \"Zelda\", age: 18 },",
			"\t{ name: \"Mario\", age: 38 },",
			"\t{ name: \"Luigi\", age: 48 },",
			"];",
			"",
			"const [removedKeys, setRemoveKeys] = useState([]);",
			"${BLOCK_COMMENT_END}"			
		],
		"description": "Log output to console"
	},
	"表格_滚动_固定表头": {
		"prefix": "tea-table(表格_滚动)",
		"body": [
			"\trecords={records}",
			"\trecordKey=\"name\"",
			"\tcolumns={[",
			"\t\t{ key: \"name\", header: \"姓名\" },",
			"\t\t{ key: \"age\", header: \"年龄\" },",
			"\t\t{",
			"\t\t\tkey: \"stage\",",
			"\t\t\theader: \"年龄段\",",
			"\t\t\trender: x => STAGE_TEXT[x.stage],",
			"\t\t},",
			"\t\t{",
			"\t\t\tkey: \"marriage\",",
			"\t\t\theader: \"婚姻状态\",",
			"\t\t\trender: x => MARRIAGE_TEXT[x.marriage],",
			"\t\t},",
			"\t\t{",
			"\t\t\tkey: \"desc\",",
			"\t\t\theader: \"描述\",",
			"\t\t\twidth: 2800,",
			"\t\t\trender: () =>",
			"\t\t\t\t\"Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.\",",
			"\t\t},",
			"\t]}",
			"\taddons={[",
			"\t\t// 支持表格滚动，高度超过 192 开始显示滚动条",
			"\t\tscrollable({",
			"\t\t\tmaxHeight: 192,",
			"\t\t\tminWidth: 3600,",
			"\t\t\tonScrollBottom: () => console.log(\"到达底部\"),",
			"\t\t}),",
			"\t]}",
			"/>",
			"${BLOCK_COMMENT_START}",
			"const { scrollable } = Table.addons;",
			"",
			"const records = [",
			"\t{ name: \"Mario\", age: 48, stage: \"teenager\", marriage: 0 },",
			"\t{ name: \"Luigi\", age: 38, stage: \"youth\", marriage: 0 },",
			"\t{ name: \"Koopa\", age: 28, stage: \"youth\", marriage: 1 },",
			"\t{ name: \"Yoshi\", age: 18, stage: \"youth\", marriage: 0 },",
			"\t{ name: \"Link\", age: 8, stage: \"middle-aged\", marriage: 2 },",
			"\t{ name: \"Zelda\", age: 58, stage: \"middle-aged\", marriage: 1 },",
			"\t{ name: \"Wario\", age: 68, stage: \"elder\", marriage: 3 },",
			"\t{ name: \"Pikachu\", age: 78, stage: \"elder\", marriage: 4 },",
			"];",
			"const MARRIAGE_TEXT = [\"未婚\", \"已婚\", \"离异\", \"再婚\", \"丧偶\"];",
			"const STAGE_TEXT = {",
			"\tteenager: \"少年\",",
			"\tyouth: \"青年\",",
			"\t\"middle-aged\": \"中年\",",
			"\telder: \"老年\",",
			"};",
			"${BLOCK_COMMENT_END}"	
		],
		"description": "Log output to console"
	},
	"表格_滚动_固定列": {
		"prefix": "tea-table(表格_滚动)",
		"body": [
			"<Table",
			"\trecords={[...records].sort(sortable.comparer(sorts))}",
			"\trecordKey=\"name\"",
			"\tcolumns={[",
			"\t\t{ key: \"select\", header: null, width: 26, fixed: \"left\" },",
			"\t\t{ key: \"name\", header: \"姓名\", width: 100, fixed: \"left\" },",
			"\t\t{ key: \"age\", header: \"年龄\", width: 100 },",
			"\t\t{",
			"\t\t\tkey: \"stage\",",
			"\t\t\theader: \"年龄段\",",
			"\t\t\trender: x => STAGE_TEXT[x.stage],",
			"\t\t},",
			"\t\t{",
			"\t\t\tkey: \"marriage\",",
			"\t\t\theader: \"婚姻状态\",",
			"\t\t\trender: x => MARRIAGE_TEXT[x.marriage],",
			"\t\t},",
			"\t\t{",
			"\t\t\tkey: \"desc\",",
			"\t\t\theader: \"描述\",",
			"\t\t\twidth: 2400,",
			"\t\t\trender: () =>",
			"\t\t\t\t\"Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.\",",
			"\t\t},",
			"\t\t{",
			"\t\t\tkey: \"opts\",",
			"\t\t\theader: \"操作\",",
			"\t\t\twidth: 100,",
			"\t\t\trender: () => <Button type=\"link\">修改</Button>,",
			"\t\t\tfixed: \"right\",",
			"\t\t},",
			"\t]}",
			"\taddons={[",
			"\t\tselectable({",
			"\t\t\tvalue: selectedKeys,",
			"\t\t\tonChange: keys => setSelectedKeys(keys),",
			"\t\t\ttargetColumnKey: \"select\",",
			"\t\t}),",
			"\t\tsortable({",
			"\t\t\t// 这两列支持排序，其中 age 列优先倒序",
			"\t\t\tcolumns: [\"name\", { key: \"age\", prefer: \"desc\" }],",
			"\t\t\tvalue: sorts,",
			"\t\t\tonChange: value => setSorts(value),",
			"\t\t}),",
			"\t\tscrollable({",
			"\t\t\tmaxHeight: 192,",
			"\t\t\tminWidth: 3200,",
			"\t\t}),",
			"\t]}",
			"/>",
			"${BLOCK_COMMENT_START}",
			"const { sortable, selectable, scrollable } = Table.addons;",
			"",
			"const records = [",
			"\t{ name: \"Mario\", age: 48, stage: \"teenager\", marriage: 0 },",
			"\t{ name: \"Luigi\", age: 38, stage: \"youth\", marriage: 0 },",
			"\t{ name: \"Koopa\", age: 28, stage: \"youth\", marriage: 1 },",
			"\t{ name: \"Yoshi\", age: 18, stage: \"youth\", marriage: 0 },",
			"\t{ name: \"Link\", age: 8, stage: \"middle-aged\", marriage: 2 },",
			"\t{ name: \"Zelda\", age: 58, stage: \"middle-aged\", marriage: 1 },",
			"\t{ name: \"Wario\", age: 68, stage: \"elder\", marriage: 3 },",
			"\t{ name: \"Pikachu\", age: 78, stage: \"elder\", marriage: 4 },",
			"];",
			"const MARRIAGE_TEXT = [\"未婚\", \"已婚\", \"离异\", \"再婚\", \"丧偶\"];",
			"const STAGE_TEXT = {",
			"\tteenager: \"少年\",",
			"\tyouth: \"青年\",",
			"\t\"middle-aged\": \"中年\",",
			"\telder: \"老年\",",
			"};",
			"",
			"// 当前排序列",
			"const [sorts, setSorts] = useState([]);",
			"// 多选",
			"const [selectedKeys, setSelectedKeys] = useState([]);",
			"${BLOCK_COMMENT_END}"
		],
		"description": "Log output to console"
	},
	"表格_滚动_虚拟滚动": {
		"prefix": "tea-table(表格_滚动)",
		"body": [
			"<Transfer",
			"\tleftCell={",
			"\t\t<Transfer.Cell",
			"\t\t\tscrollable={false}",
			"\t\t\ttitle=\"选择云服务器\"",
			"\t\t\ttip=\"支持按住 shift 键进行多选\"",
			"\t\t\theader={",
			"\t\t\t\t<SearchBox",
			"\t\t\t\t\tvalue={inputValue}",
			"\t\t\t\t\tonChange={value => setInputValue(value)}",
			"\t\t\t\t/>",
			"\t\t\t}",
			"\t\t>",
			"\t\t\t<SourceTable",
			"\t\t\t\tdataSource={cvmList.filter(",
			"\t\t\t\t\ti =>",
			"\t\t\t\t\t\ti.instanceId.includes(inputValue) ||",
			"\t\t\t\t\t\ti.instanceName.includes(inputValue)",
			"\t\t\t\t)}",
			"\t\t\t\ttargetKeys={targetKeys}",
			"\t\t\t\tonChange={keys => setTargetKeys(keys)}",
			"\t\t\t/>",
			"\t\t</Transfer.Cell>",
			"\t}",
			"\trightCell={",
			"\t\t<Transfer.Cell",
			"\t\t\tscrollable={false}",
			"\t\t\ttitle={`已选择 (${targetKeys.length})`}",
			"\t\t>",
			"\t\t\t<TargetTable",
			"\t\t\t\tdataSource={cvmList.filter(i => targetKeys.includes(i.instanceId))}",
			"\t\t\t\tonRemove={key => setTargetKeys(targetKeys.filter(i => i !== key))}",
			"\t\t\t/>",
			"\t\t</Transfer.Cell>",
			"\t}",
			"/>",
			"${BLOCK_COMMENT_START}",
			"const { selectable, removeable, scrollable } = Table.addons;",
			"",
			"const cvmList = Array(2000)",
			"\t.fill(null)",
			"\t.map((_, i) => ({",
			"\t\tinstanceId: `ins-${i}`,",
			"\t\tinstanceName: `name-${i}`,",
			"\t\tstatus: \"running\",",
			"\t}));",
			"",
			"const columns = [",
			"\t{",
			"\t\tkey: \"instance\",",
			"\t\theader: \"ID/实例名\",",
			"\t\trender: cvm => (",
			"\t\t\t<>",
			"\t\t\t\t<p>",
			"\t\t\t\t\t<a>{cvm.instanceId}</a>",
			"\t\t\t\t</p>",
			"\t\t\t\t<p>{cvm.instanceName}</p>",
			"\t\t\t</>",
			"\t\t),",
			"\t},",
			"\t{",
			"\t\tkey: \"status\",",
			"\t\theader: \"状态\",",
			"\t\twidth: 100,",
			"\t\trender: cvm => {",
			"\t\t\tswitch (cvm.status) {",
			"\t\t\t\tcase \"running\":",
			"\t\t\t\t\treturn <span style={{ color: \"green\" }}>运行中</span>;",
			"\t\t\t\tcase \"stopped\":",
			"\t\t\t\t\treturn <span style={{ color: \"red\" }}>已关机</span>;",
			"\t\t\t}",
			"\t\t\treturn cvm.status;",
			"\t\t},",
			"\t},",
			"];",
			"",
			"function SourceTable({ dataSource, targetKeys, onChange }) {",
			"\treturn (",
			"\t\t<Table",
			"\t\t\trecords={dataSource}",
			"\t\t\trecordKey=\"instanceId\"",
			"\t\t\trowDisabled={record => record.status === \"stopped\"}",
			"\t\t\trowClassName={record => record.status}",
			"\t\t\tcolumns={columns}",
			"\t\t\taddons={[",
			"\t\t\t\tscrollable({",
			"\t\t\t\t\tvirtualizedOptions: {",
			"\t\t\t\t\t\theight: 310,",
			"\t\t\t\t\t\titemHeight: 65,",
			"\t\t\t\t\t\tonScrollBottom: () => console.log(\"Bottom\"),",
			"\t\t\t\t\t},",
			"\t\t\t\t}),",
			"\t\t\t\tselectable({",
			"\t\t\t\t\tvalue: targetKeys,",
			"\t\t\t\t\tonChange,",
			"\t\t\t\t\trowSelect: true,",
			"\t\t\t\t}),",
			"\t\t\t]}",
			"\t\t/>",
			"\t);",
			"}",
			"",
			"function TargetTable({ dataSource, onRemove }) {",
			"\treturn (",
			"\t\t<Table",
			"\t\t\trecords={dataSource}",
			"\t\t\trecordKey=\"instanceId\"",
			"\t\t\tcolumns={columns}",
			"\t\t\taddons={[",
			"\t\t\t\tscrollable({",
			"\t\t\t\t\tvirtualizedOptions: {",
			"\t\t\t\t\t\theight: 340,",
			"\t\t\t\t\t\titemHeight: 65,",
			"\t\t\t\t\t},",
			"\t\t\t\t}),",
			"\t\t\t\tremoveable({ onRemove }),",
			"\t\t\t]}",
			"\t\t/>",
			"\t);",
			"}",
			"",
			"const [targetKeys, setTargetKeys] = useState([]);",
			"const [inputValue, setInputValue] = useState(\"\");",
			"${BLOCK_COMMENT_END}"			
		],
		"description": "Log output to console"
	},
	"表格_行/列合并": {
		"prefix": "tea-table(表格_行/列合并)",
		"body": [
			"<Table",
			"\trecords={records}",
			"\trecordKey=\"name\"",
			"\tbordered=\"all\"",
			"\tcolumns={[",
			"\t\t{ key: \"name\", header: \"姓名\" },",
			"\t\t{ key: \"age\", header: \"年龄\" },",
			"\t\t{ key: \"phone1\", header: \"电话\" },",
			"\t\t{ key: \"phone2\", header: \"-\" },",
			"\t]}",
			"\taddons={[",
			"\t\tmergeable({",
			"\t\t\theadColSpan: columnIndex => {",
			"\t\t\t\tswitch (columnIndex) {",
			"\t\t\t\t\tcase 2:",
			"\t\t\t\t\t\treturn 2;",
			"\t\t\t\t\tcase 3:",
			"\t\t\t\t\t\treturn 0;",
			"\t\t\t\t}",
			"\t\t\t\treturn 1;",
			"\t\t\t},",
			"\t\t\tcolSpan: (columnIndex, recordIndex) => {",
			"\t\t\t\tif (recordIndex === 4) {",
			"\t\t\t\t\tif (columnIndex > 0) {",
			"\t\t\t\t\t\treturn 0;",
			"\t\t\t\t\t}",
			"\t\t\t\t\treturn 4;",
			"\t\t\t\t}",
			"\t\t\t\treturn 1;",
			"\t\t\t},",
			"\t\t\trowSpan: (columnIndex, recordIndex) => {",
			"\t\t\t\tif (columnIndex === 2) {",
			"\t\t\t\t\tif (recordIndex === 1) {",
			"\t\t\t\t\t\treturn 3;",
			"\t\t\t\t\t}",
			"\t\t\t\t\tif (recordIndex > 1) {",
			"\t\t\t\t\t\treturn 0;",
			"\t\t\t\t\t}",
			"\t\t\t\t}",
			"\t\t\t\treturn 1;",
			"\t\t\t},",
			"\t\t}),",
			"\t]}",
			"/>",
			"${BLOCK_COMMENT_START}",
			"const { mergeable } = Table.addons;",
			"",
			"const records = [",
			"\t{ name: \"Link\", age: 20, phone1: \"0755-88888888\", phone2: \"18888888888\" },",
			"\t{ name: \"Zelda\", age: 18, phone1: \"0755-86013388\", phone2: \"18777777777\" },",
			"\t{ name: \"Mario\", age: 38, phone1: \"0755-86013388\", phone2: \"13888888888\" },",
			"\t{ name: \"Luigi\", age: 48, phone1: \"0755-86013388\", phone2: \"13666666666\" },",
			"\t{ name: \"...\" },",
			"];",
			"${BLOCK_COMMENT_END}"			
		],
		"description": "Log output to console"
	},
	"表格_表头分组": {
		"prefix": "tea-table(表格_表头分组)",
		"body": [
			"<Table",
			"\trecords={records}",
			"\trecordKey=\"id\"",
			"\tbordered=\"all\"",
			"\tcolumns={[",
			"\t\t{ key: \"id\", header: \"ID\", width: 32 },",
			"\t\t{ key: \"name\", header: \"姓名\" },",
			"\t\t{ key: \"age\", header: \"年龄\", width: 64 },",
			"\t\t{ key: \"landline\", header: \"固话\" },",
			"\t\t{ key: \"mobile\", header: \"手机\" },",
			"\t\t{ key: \"mail\", header: \"邮箱\" },",
			"\t]}",
			"\taddons={[",
			"\t\tgroupable({",
			"\t\t\theaderGroups: [",
			"\t\t\t\t{",
			"\t\t\t\t\tkey: \"phone\",",
			"\t\t\t\t\ttitle: \"电话\",",
			"\t\t\t\t\tchildren: [\"landline\", \"mobile\"],",
			"\t\t\t\t},",
			"\t\t\t\t{",
			"\t\t\t\t\tkey: \"contact\",",
			"\t\t\t\t\ttitle: \"联系方式\",",
			"\t\t\t\t\tchildren: [\"phone\", \"mail\"],",
			"\t\t\t\t},",
			"\t\t\t\t{",
			"\t\t\t\t\tkey: \"info\",",
			"\t\t\t\t\ttitle: \"个人信息\",",
			"\t\t\t\t\tchildren: [\"name\", \"age\", \"contact\"],",
			"\t\t\t\t},",
			"\t\t\t],",
			"\t\t}),",
			"\t]}",
			"/>",
			"${BLOCK_COMMENT_START}",
			"const { groupable } = Table.addons;",
			"",
			"const records = [",
			"\t{",
			"\t\tid: 1,",
			"\t\tname: \"Link\",",
			"\t\tage: 20,",
			"\t\tlandline: \"0755-88888888\",",
			"\t\tmobile: \"18888888888\",",
			"\t\tmail: \"link@qq.com\",",
			"\t},",
			"\t{",
			"\t\tid: 2,",
			"\t\tname: \"Zelda\",",
			"\t\tage: 18,",
			"\t\tlandline: \"0755-86013388\",",
			"\t\tmobile: \"18777777777\",",
			"\t\tmail: \"zelda@qq.com\",",
			"\t},",
			"\t{",
			"\t\tid: 3,",
			"\t\tname: \"Mario\",",
			"\t\tage: 38,",
			"\t\tlandline: \"0755-86013388\",",
			"\t\tmobile: \"13888888888\",",
			"\t\tmail: \"mario@qq.com\",",
			"\t},",
			"\t{",
			"\t\tid: 4,",
			"\t\tname: \"Luigi\",",
			"\t\tage: 48,",
			"\t\tlandline: \"0755-86013388\",",
			"\t\tmobile: \"13666666666\",",
			"\t\tmail: \"luigi@qq.com\",",
			"\t},",
			"];",
			"${BLOCK_COMMENT_END}"			
		],
		"description": "Log output to console"
	},
	"内置行拖拽排序": {
		"prefix": "tea-table(表格_行拖拽排序)",
		"body": [
			"<Table",
			"\trecords={records}",
			"\trecordKey=\"name\"",
			"\trowDisabled={record => record.name === \"张三\"}",
			"\tcolumns={[",
			"\t\t{ key: \"name\", header: \"姓名\" },",
			"\t\t{ key: \"age\", header: \"年龄\" },",
			"\t\t{",
			"\t\t\tkey: \"stage\",",
			"\t\t\theader: \"年龄段\",",
			"\t\t\trender: x => STAGE_TEXT[x.stage],",
			"\t\t},",
			"\t\t{",
			"\t\t\tkey: \"marriage\",",
			"\t\t\theader: \"婚姻状态\",",
			"\t\t\trender: x => MARRIAGE_TEXT[x.marriage],",
			"\t\t},",
			"\t]}",
			"\taddons={[",
			"\t\tdraggable({",
			"\t\t\tonDragEnd: (records, context) => {",
			"\t\t\t\tconsole.log(context);",
			"\t\t\t\tsetRecords(records);",
			"\t\t\t},",
			"\t\t}),",
			"\t]}",
			"/>",
			"${BLOCK_COMMENT_START}",
			"const { draggable } = Table.addons;",
			"",
			"const defaultRecords = [",
			"\t{ name: \"Mario\", age: 48, stage: \"teenager\", marriage: 0 },",
			"\t{ name: \"Luigi\", age: 38, stage: \"youth\", marriage: 0 },",
			"\t{ name: \"Koopa\", age: 28, stage: \"youth\", marriage: 1 },",
			"\t{ name: \"Yoshi\", age: 18, stage: \"youth\", marriage: 0 },",
			"\t{ name: \"Link\", age: 8, stage: \"middle-aged\", marriage: 2 },",
			"\t{ name: \"Zelda\", age: 58, stage: \"middle-aged\", marriage: 1 },",
			"\t{ name: \"Wario\", age: 68, stage: \"elder\", marriage: 3 },",
			"\t{ name: \"Pikachu\", age: 78, stage: \"elder\", marriage: 4 },",
			"];",
			"const MARRIAGE_TEXT = [\"未婚\", \"已婚\", \"离异\", \"再婚\", \"丧偶\"];",
			"const STAGE_TEXT = {",
			"\tteenager: \"少年\",",
			"\tyouth: \"青年\",",
			"\t\"middle-aged\": \"中年\",",
			"\telder: \"老年\",",
			"};",
			"",
			"const [records, setRecords] = useState(defaultRecords);",
			"${BLOCK_COMMENT_END}"			
		],
		"description": "Log output to console"
	},
	"第三方库行拖拽排序": {
		"prefix": "tea-table(表格_行拖拽排序)",
		"body": [
			"<Table",
			"\trecords={records}",
			"\trecordKey=\"name\"",
			"\trowDisabled={record => record.name === \"张三\"}",
			"\tcolumns={[",
			"\t\t{ key: \"name\", header: \"姓名\" },",
			"\t\t{ key: \"age\", header: \"年龄\" },",
			"\t\t{",
			"\t\t\tkey: \"stage\",",
			"\t\t\theader: \"年龄段\",",
			"\t\t\trender: x => STAGE_TEXT[x.stage],",
			"\t\t},",
			"\t\t{",
			"\t\t\tkey: \"marriage\",",
			"\t\t\theader: \"婚姻状态\",",
			"\t\t\trender: x => MARRIAGE_TEXT[x.marriage],",
			"\t\t},",
			"\t]}",
			"\taddons={[",
			"\t\tdraggable({",
			"\t\t\tmodule: rbd,",
			"\t\t\tonDragEnd: (records, context) => {",
			"\t\t\t\tsetRecords(records);",
			"\t\t\t},",
			"\t\t}),",
			"\t]}",
			"/>",
			"${BLOCK_COMMENT_START}",
			"const { draggable } = Table.addons;",
			"",
			"const defaultRecords = [",
			"\t{ name: \"Mario\", age: 48, stage: \"teenager\", marriage: 0 },",
			"\t{ name: \"Luigi\", age: 38, stage: \"youth\", marriage: 0 },",
			"\t{ name: \"Koopa\", age: 28, stage: \"youth\", marriage: 1 },",
			"\t{ name: \"Yoshi\", age: 18, stage: \"youth\", marriage: 0 },",
			"\t{ name: \"Link\", age: 8, stage: \"middle-aged\", marriage: 2 },",
			"\t{ name: \"Zelda\", age: 58, stage: \"middle-aged\", marriage: 1 },",
			"\t{ name: \"Wario\", age: 68, stage: \"elder\", marriage: 3 },",
			"\t{ name: \"Pikachu\", age: 78, stage: \"elder\", marriage: 4 },",
			"];",
			"const MARRIAGE_TEXT = [\"未婚\", \"已婚\", \"离异\", \"再婚\", \"丧偶\"];",
			"const STAGE_TEXT = {",
			"\tteenager: \"少年\",",
			"\tyouth: \"青年\",",
			"\t\"middle-aged\": \"中年\",",
			"\telder: \"老年\",",
			"};",
			"",
			"const [records, setRecords] = useState(defaultRecords);",
			"${BLOCK_COMMENT_END}"			
		],
		"description": "Log output to console"
	},
	"多层表格树状拖拽排序": {
		"prefix": "tea-table(表格_行拖拽排序)",
		"body": [
			"<Table",
			"\t// 配置行",
			"\trecords={records}",
			"\t// 配置行键值",
			"\trecordKey={record => {",
			"\t\t// 这里要注意，原始数据中数据类型全是字符串，不转成字符串会导致 key 值匹配不上",
			"\t\treturn String(record.id);",
			"\t}}",
			"\t// 配置列",
			"\tcolumns={[",
			"\t\t{",
			"\t\t\tkey: \"name\",",
			"\t\t\theader: \"消息类型\",",
			"\t\t\trender: record => record.name,",
			"\t\t\twidth: 250,",
			"\t\t},",
			"\t\trenderIconColumn(\"enableSiteMsg\", \"站内信\"),",
			"\t\trenderIconColumn(\"enableEMail\", \"邮件\"),",
			"\t\trenderIconColumn(\"enableSms\", \"短信\"),",
			"\t\trenderIconColumn(\"enableWX\", \"微信\"),",
			"\t\t{",
			"\t\t\tkey: \"receivers\",",
			"\t\t\theader: \"接收人\",",
			"\t\t\trender: record => record.receivers || null,",
			"\t\t},",
			"\t\t{",
			"\t\t\tkey: \"settings\",",
			"\t\t\theader: \"操作\",",
			"\t\t\twidth: 100,",
			"\t\t\trender: renderOperationColumn(expandedSet, setExpandedKeys),",
			"\t\t},",
			"\t]}",
			"\t// 配置插件",
			"\taddons={[",
			"\t\texpandable({",
			"\t\t\t// 已经展开的产品",
			"\t\t\texpandedKeys,",
			"\t\t\t// 产品展开为消息行",
			"\t\t\texpand: record => record.childrenList || null,",
			"\t\t\t// 发生展开行为时，回调更新展开键值",
			"\t\t\tonExpandedKeysChange: keys => setExpandedKeys(keys),",
			"\t\t\t// 只有产品行允许展开",
			"\t\t\tshouldRecordExpandable: record => Boolean(record.childrenList),",
			"\t\t\ttargetColumnKey: \"name\",",
			"\t\t}),",
			"\t\tindentable({",
			"\t\t\t// 缩进放在「消息类型」列上",
			"\t\t\ttargetColumnKey: \"name\",",
			"\t\t\t// 提供层级关系",
			"\t\t\trelations,",
			"\t\t}),",
			"\t\tdraggable({",
			"\t\t\texpandedKeys,",
			"\t\t\trelations,",
			"\t\t\tdragType: \"tree\",",
			"\t\t\tchildrenColName: \"childrenList\",",
			"\t\t\tonExpandedKeysChange: keys => setExpandedKeys(keys),",
			"\t\t\tonDragEnd: (records, dragContext) => {",
			"\t\t\t\tconsole.log(dragContext);",
			"\t\t\t\tsetRecords(records);",
			"\t\t\t},",
			"\t\t}),",
			"\t]}",
			"/>",
			"${BLOCK_COMMENT_START}",
			"const { expandable, indentable, draggable } = Table.addons;",
			"",
			"const recordData = getMockRecords();",
			"",
			"const [records, setRecords] = useState(recordData || []);",
			"",
			"// 当前展开的产品",
			"const [expandedKeys, setExpandedKeys] = useState([",
			"\t// 默认展开第一个产品",
			"\tString(records[0].id),",
			"]);",
			"",
			"const expandedSet = new Set(expandedKeys);",
			"",
			"/**",
			" * 生成子孙关系信息",
			" */",
			"const getRecordRelations = records => {",
			"\t/**",
			"\t * @type {import('@tencent/tea-component/lib/checktree').CheckTreeRelation}",
			"\t */",
			"\tconst relations = {};",
			"\tconst getRelations = (records, parentId = \"\") => {",
			"\t\tfor (const record of records) {",
			"\t\t\tif (parentId) {",
			"\t\t\t\trelations[record.id] = parentId;",
			"\t\t\t}",
			"\t\t\tif (record.childrenList && Array.isArray(record.childrenList)) {",
			"\t\t\t\trecord.childrenList.forEach(item => {",
			"\t\t\t\t\trelations[item.id] = record.id;",
			"\t\t\t\t\tif (item.childrenList && Array.isArray(item.childrenList)) {",
			"\t\t\t\t\t\tgetRelations(item.childrenList, item.id);",
			"\t\t\t\t\t}",
			"\t\t\t\t});",
			"\t\t\t}",
			"\t\t}",
			"\t};",
			"\tgetRelations(records);",
			"",
			"\treturn relations;",
			"};",
			"",
			"const relations = getRecordRelations(records);",
			"",
			"/**",
			" * 渲染图标列",
			" * @param {string} key",
			" * @param {string} header",
			" */",
			"function renderIconColumn(key, header) {",
			"\treturn {",
			"\t\tkey,",
			"\t\theader,",
			"\t\twidth: 80,",
			"\t\trender: record => {",
			"\t\t\tif (!record.currentChannel || !record.currentChannel[key]) {",
			"\t\t\t\treturn null;",
			"\t\t\t}",
			"\t\t\treturn <Icon type=\"success\" />;",
			"\t\t},",
			"\t};",
			"}",
			"",
			"/**",
			" * 渲染操作列",
			" * @param {Set<string>} expandedSet",
			" * @param {(keys: string[]) => void} setExpandedKeys",
			" */",
			"function renderOperationColumn(expandedSet, setExpandedKeys) {",
			"\treturn ({ id, childrenList }) => {",
			"\t\tif (childrenList) {",
			"\t\t\tconst type = String(id);",
			"\t\t\tconst text = expandedSet.has(type) ? \"收起\" : \"展开\";",
			"\t\t\treturn (",
			"\t\t\t\t<Button",
			"\t\t\t\t\ttype=\"link\"",
			"\t\t\t\t\tonClick={() => {",
			"\t\t\t\t\t\tif (expandedSet.has(type)) {",
			"\t\t\t\t\t\t\texpandedSet.delete(type);",
			"\t\t\t\t\t\t} else {",
			"\t\t\t\t\t\t\texpandedSet.add(type);",
			"\t\t\t\t\t\t}",
			"\t\t\t\t\t\tsetExpandedKeys(Array.from(expandedSet));",
			"\t\t\t\t\t}}",
			"\t\t\t\t>",
			"\t\t\t\t\t<strong>{text}</strong>",
			"\t\t\t\t</Button>",
			"\t\t\t);",
			"\t\t}",
			"\t\treturn (",
			"\t\t\t<Button",
			"\t\t\t\ttype=\"link\"",
			"\t\t\t\tonClick={() =>",
			"\t\t\t\t\tModal.success({",
			"\t\t\t\t\t\tmessage: \"设置点啥\",",
			"\t\t\t\t\t\tdescription: \"我也不知道呀\",",
			"\t\t\t\t\t})",
			"\t\t\t\t}",
			"\t\t\t>",
			"\t\t\t\t设置",
			"\t\t\t</Button>",
			"\t\t);",
			"\t};",
			"}",
			"",
			"/**",
			" * 模拟数据",
			" */",
			"function getMockRecords() {",
			"\treturn [",
			"\t\t{",
			"\t\t\tid: \"1001\",",
			"\t\t\tparentId: \"\",",
			"\t\t\tname: \"财务消息\",",
			"\t\t\tdisplayWeight: 1000,",
			"\t\t\tchildrenList: [",
			"\t\t\t\t{",
			"\t\t\t\t\tid: \"2001\",",
			"\t\t\t\t\tparentId: \"1001\",",
			"\t\t\t\t\tname: \"账户欠费通知\",",
			"\t\t\t\t\tcurrentChannel: {",
			"\t\t\t\t\t\tenableSiteMsg: true,",
			"\t\t\t\t\t\tenableEMail: true,",
			"\t\t\t\t\t\tenableSms: true,",
			"\t\t\t\t\t\tenableWX: true,",
			"\t\t\t\t\t},",
			"\t\t\t\t\treceivers: \"Coder体验账号, lewiszeng, vincehuang, cobipan\",",
			"\t\t\t\t},",
			"\t\t\t],",
			"\t\t},",
			"\t\t{",
			"\t\t\tid: \"1002\",",
			"\t\t\tparentId: null,",
			"\t\t\tname: \"产品消息\",",
			"\t\t\tdisplayWeight: 900,",
			"\t\t\tchildrenList: [",
			"\t\t\t\t{",
			"\t\t\t\t\tid: \"2003\",",
			"\t\t\t\t\tparentId: \"1002\",",
			"\t\t\t\t\tname: \"产品到期、回收通知\",",
			"\t\t\t\t\tcurrentChannel: {",
			"\t\t\t\t\t\tenableSiteMsg: true,",
			"\t\t\t\t\t\tenableEMail: false,",
			"\t\t\t\t\t\tenableSms: false,",
			"\t\t\t\t\t\tenableWX: true,",
			"\t\t\t\t\t},",
			"\t\t\t\t\treceivers: \"lewiszeng, vincehuang, alexpang, frostzhao\",",
			"\t\t\t\t\tchildrenList: [",
			"\t\t\t\t\t\t{",
			"\t\t\t\t\t\t\tid: \"3001\",",
			"\t\t\t\t\t\t\tparentId: \"2003\",",
			"\t\t\t\t\t\t\tname: \"产品新功能上线提醒\",",
			"\t\t\t\t\t\t\tcurrentChannel: {",
			"\t\t\t\t\t\t\t\tenableSiteMsg: true,",
			"\t\t\t\t\t\t\t\tenableEMail: false,",
			"\t\t\t\t\t\t\t\tenableSms: false,",
			"\t\t\t\t\t\t\t\tenableWX: true,",
			"\t\t\t\t\t\t\t},",
			"\t\t\t\t\t\t\treceivers: \"lewiszeng, vincehuang, alexpang, frostzhao\",",
			"\t\t\t\t\t\t},",
			"\t\t\t\t\t\t{",
			"\t\t\t\t\t\t\tid: \"3002\",",
			"\t\t\t\t\t\t\tparentId: \"2003\",",
			"\t\t\t\t\t\t\tname: \"产品即将被隔离\",",
			"\t\t\t\t\t\t\tcurrentChannel: {",
			"\t\t\t\t\t\t\t\tenableSiteMsg: false,",
			"\t\t\t\t\t\t\t\tenableEMail: true,",
			"\t\t\t\t\t\t\t\tenableSms: false,",
			"\t\t\t\t\t\t\t\tenableWX: false,",
			"\t\t\t\t\t\t\t},",
			"\t\t\t\t\t\t\treceivers: \"Coder体验账号, lewiszeng, alexpang\",",
			"\t\t\t\t\t\t},",
			"\t\t\t\t\t],",
			"\t\t\t\t},",
			"\t\t\t\t{",
			"\t\t\t\t\tid: \"2004\",",
			"\t\t\t\t\tparentId: \"1002\",",
			"\t\t\t\t\tname: \"产品已停服\",",
			"\t\t\t\t\tcurrentChannel: {",
			"\t\t\t\t\t\tenableSiteMsg: false,",
			"\t\t\t\t\t\tenableEMail: true,",
			"\t\t\t\t\t\tenableSms: false,",
			"\t\t\t\t\t\tenableWX: false,",
			"\t\t\t\t\t},",
			"\t\t\t\t\treceivers: \"Coder体验账号, lewiszeng, alexpang\",",
			"\t\t\t\t},",
			"\t\t\t],",
			"\t\t},",
			"\t];",
			"}",
			"${BLOCK_COMMENT_END}"			
		],
		"description": "Log output to console"
	},
	"表格_列拖拽排序": {
		"prefix": "tea-table(表格_列拖拽排序)",
		"body": [
			"<Table",
			"\trecords={[...records].sort(sortable.comparer(sorts))}",
			"\trecordKey=\"name\"",
			"\trowDisabled={record => record.name === \"张三\"}",
			"\tcolumns={columns}",
			"\taddons={[",
			"\t\tcolumnsDraggable({",
			"\t\t\tonDragEnd: columns => {",
			"\t\t\t\tsetColumns(columns);",
			"\t\t\t},",
			"\t\t}),",
			"\t\tsortable({",
			"\t\t\tcolumns: [\"name\"],",
			"\t\t\tvalue: sorts,",
			"\t\t\tonChange: value => setSorts(value),",
			"\t\t}),",
			"\t]}",
			"/>",
			"${BLOCK_COMMENT_START}",
			"const { columnsDraggable, sortable } = Table.addons;",
			"",
			"const records = [",
			"\t{ name: \"Mario\", age: 48, stage: \"teenager\", marriage: 0 },",
			"\t{ name: \"Luigi\", age: 38, stage: \"youth\", marriage: 0 },",
			"\t{ name: \"Koopa\", age: 28, stage: \"youth\", marriage: 1 },",
			"\t{ name: \"Yoshi\", age: 18, stage: \"youth\", marriage: 0 },",
			"\t{ name: \"Link\", age: 8, stage: \"middle-aged\", marriage: 2 },",
			"\t{ name: \"Zelda\", age: 58, stage: \"middle-aged\", marriage: 1 },",
			"\t{ name: \"Wario\", age: 68, stage: \"elder\", marriage: 3 },",
			"\t{ name: \"Pikachu\", age: 78, stage: \"elder\", marriage: 4 },",
			"];",
			"const MARRIAGE_TEXT = [\"未婚\", \"已婚\", \"离异\", \"再婚\", \"丧偶\"];",
			"const STAGE_TEXT = {",
			"\tteenager: \"少年\",",
			"\tyouth: \"青年\",",
			"\t\"middle-aged\": \"中年\",",
			"\telder: \"老年\",",
			"};",
			"const defaultColumns = [",
			"\t{ key: \"name\", header: \"姓名\" },",
			"\t{ key: \"age\", header: \"年龄\" },",
			"\t{",
			"\t\tkey: \"stage\",",
			"\t\theader: \"年龄段\",",
			"\t\trender: x => STAGE_TEXT[x.stage],",
			"\t},",
			"\t{",
			"\t\tkey: \"marriage\",",
			"\t\theader: \"婚姻状态\",",
			"\t\trender: x => MARRIAGE_TEXT[x.marriage],",
			"\t},",
			"];",
			"",
			"const [sorts, setSorts] = useState([]);",
			"",
			"const [columns, setColumns] = useState(defaultColumns);",
			"${BLOCK_COMMENT_END}"			
		],
		"description": "Log output to console"
	},
	"表格_列宽度调整": {
		"prefix": "tea-table(表格_列宽度调整)",
		"body": [
			"<Table",
			"\trecords={[...records].sort(sortable.comparer(sorts))}",
			"\trecordKey=\"name\"",
			"\trowDisabled={record => record.name === \"张三\"}",
			"\tcolumns={columns}",
			"\taddons={[",
			"\t\tcolumnsResizable({",
			"\t\t\tonResizeEnd: columns => {",
			"\t\t\t\tsetColumns(columns);",
			"\t\t\t},",
			"\t\t\tminWidth: 100,",
			"\t\t\tmaxWidth: 1000,",
			"\t\t}),",
			"\t\tsortable({",
			"\t\t\tcolumns: [\"name\"],",
			"\t\t\tvalue: sorts,",
			"\t\t\tonChange: value => setSorts(value),",
			"\t\t}),",
			"\t\tpageable(),",
			"\t]}",
			"/>",
			"${BLOCK_COMMENT_START}",
			"const { columnsResizable, sortable, pageable } = Table.addons;",
			"",
			"const records = [",
			"\t{ name: \"Mario\", age: 48, stage: \"teenager\", marriage: 0 },",
			"\t{ name: \"Luigi\", age: 38, stage: \"youth\", marriage: 0 },",
			"\t{ name: \"Koopa\", age: 28, stage: \"youth\", marriage: 1 },",
			"\t{ name: \"Yoshi\", age: 18, stage: \"youth\", marriage: 0 },",
			"\t{ name: \"Link\", age: 8, stage: \"middle-aged\", marriage: 2 },",
			"\t{ name: \"Zelda\", age: 58, stage: \"middle-aged\", marriage: 1 },",
			"\t{ name: \"Wario\", age: 68, stage: \"elder\", marriage: 3 },",
			"\t{ name: \"Pikachu\", age: 78, stage: \"elder\", marriage: 4 },",
			"];",
			"const MARRIAGE_TEXT = [\"未婚\", \"已婚\", \"离异\", \"再婚\", \"丧偶\"];",
			"const STAGE_TEXT = {",
			"\tteenager: \"少年\",",
			"\tyouth: \"青年\",",
			"\t\"middle-aged\": \"中年\",",
			"\telder: \"老年\",",
			"};",
			"",
			"const defaultColumns = [",
			"\t{ key: \"name\", header: \"姓名\", width: 300 },",
			"\t{ key: \"age\", header: \"年龄\" },",
			"\t{",
			"\t\tkey: \"stage\",",
			"\t\theader: \"年龄段\",",
			"\t\trender: x => STAGE_TEXT[x.stage],",
			"\t},",
			"\t{",
			"\t\tkey: \"marriage\",",
			"\t\theader: \"婚姻状态\",",
			"\t\trender: x => MARRIAGE_TEXT[x.marriage],",
			"\t},",
			"];",
			"",
			"const [sorts, setSorts] = useState([]);",
			"",
			"const [columns, setColumns] = useState(defaultColumns);",
			"${BLOCK_COMMENT_END}"	
		],
		"description": "Log output to console"
	},
	"前端分页": {
		"prefix": "tea-table(表格_分页)",
		"body": [
			"<Table",
			"\t// eslint-disable-next-line",
			"\trecords={data}",
			"\trecordKey=\"id\"",
			"\tcolumns={[",
			"\t\t{ key: \"id\", header: \"ID\", width: 86 },",
			"\t\t{ key: \"title\", header: \"Todo\" },",
			"\t\t{",
			"\t\t\tkey: \"completed\",",
			"\t\t\theader: \"Completed\",",
			"\t\t\twidth: 120,",
			"\t\t\talign: \"center\",",
			"\t\t\trender: x => (x.completed ? <Icon type=\"success\" /> : null),",
			"\t\t},",
			"\t]}",
			"\taddons={[",
			"\t\tpageable(),",
			"\t\tscrollable({ maxHeight: 480, scrollToTopOnChange: true }),",
			"\t]}",
			"/>",
			"${BLOCK_COMMENT_START}",
			"const { pageable, scrollable } = Table.addons;",
			"const data = [",
			"\t{",
			"\t\tuserId: 1,",
			"\t\tid: 1,",
			"\t\ttitle: \"delectus aut autem\",",
			"\t\tcompleted: false,",
			"\t}",
			"]",
			"${BLOCK_COMMENT_END}"			
		],
		"description": "Log output to console"
	},
	"动态加载": {
		"prefix": "tea-table(表格_分页)",
		"body": [
			"<Table",
			"\trecords={records}",
			"\trecordKey=\"id\"",
			"\tcolumns={[",
			"\t\t{ key: \"id\", header: \"ID\", width: 86 },",
			"\t\t{ key: \"content\", header: \"Content\" },",
			"\t]}",
			"\taddons={[",
			"\t\tpageable({",
			"\t\t\trecordCount: total,",
			"\t\t\tonPagingChange: query => fetch(query),",
			"\t\t}),",
			"\t\tautotip({",
			"\t\t\tisLoading: loading,",
			"\t\t}),",
			"\t\tscrollable({ maxHeight: 480, minHeight: 480 }),",
			"\t]}",
			"/>",
			"${BLOCK_COMMENT_START}",
			"const { pageable, autotip, scrollable } = Table.addons;",
			"const [total, setTotal] = useState(0);",
			"const [records, setRecords] = useState([]);",
			"const [loading, setLoading] = useState(true);",
			"",
			"useEffect(() => {",
			"\tfetch();",
			"}, []);",
			"",
			"async function fetch({ pageIndex = 1, pageSize = 10 } = {}) {",
			"\tsetLoading(true);",
			"\tsetRecords([]);",
			"\tconst { records, total } = await new Promise(resolve => {",
			"\t\tsetTimeout(",
			"\t\t\t() =>",
			"\t\t\t\tresolve({",
			"\t\t\t\t\trecords: Array(pageSize)",
			"\t\t\t\t\t\t.fill(null)",
			"\t\t\t\t\t\t.map((_, i) => ({",
			"\t\t\t\t\t\t\tid: (pageIndex - 1) * pageSize + i + 1,",
			"\t\t\t\t\t\t\tcontent:",
			"\t\t\t\t\t\t\t\t\"Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua.\",",
			"\t\t\t\t\t\t})),",
			"\t\t\t\t\ttotal: 200,",
			"\t\t\t\t}),",
			"\t\t\t1500",
			"\t\t);",
			"\t});",
			"\tsetTotal(total);",
			"\tsetRecords(records);",
			"\tsetLoading(false);",
			"}",
			"${BLOCK_COMMENT_END}"			
		],
		"description": "Log output to console"
	},
	"表格_行提示": {
		"prefix": "tea-table(表格_行提示)",
		"body": [
			"<Table",
			"\trecords={cvmList}",
			"\trecordKey=\"instanceId\"",
			"\trowDisabled={record => record.status === \"stopped\"}",
			"\trowClassName={record => record.status}",
			"\tcolumns={[",
			"\t\t{",
			"\t\t\tkey: \"instance\",",
			"\t\t\theader: \"ID/实例名\",",
			"\t\t\trender: cvm => (",
			"\t\t\t\t<>",
			"\t\t\t\t\t<p>",
			"\t\t\t\t\t\t<a>{cvm.instanceId}</a>",
			"\t\t\t\t\t</p>",
			"\t\t\t\t\t<p>{cvm.instanceName}</p>",
			"\t\t\t\t</>",
			"\t\t\t),",
			"\t\t},",
			"\t\t{",
			"\t\t\tkey: \"status\",",
			"\t\t\theader: \"状态\",",
			"\t\t\twidth: 100,",
			"\t\t\trender: cvm => {",
			"\t\t\t\tif (cvm.status === \"running\") {",
			"\t\t\t\t\treturn <span style={{ color: \"green\" }}>运行中</span>;",
			"\t\t\t\t}",
			"\t\t\t\tif (cvm.status === \"stopped\") {",
			"\t\t\t\t\treturn <span style={{ color: \"red\" }}>已关机</span>;",
			"\t\t\t\t}",
			"\t\t\t\treturn cvm.status;",
			"\t\t\t},",
			"\t\t},",
			"\t\t{",
			"\t\t\tkey: \"area\",",
			"\t\t\theader: \"可用区域\",",
			"\t\t},",
			"\t\t{",
			"\t\t\tkey: \"modal\",",
			"\t\t\theader: \"主机型号\",",
			"\t\t},",
			"\t\t{",
			"\t\t\tkey: \"publicIP\",",
			"\t\t\theader: \"IP 地址\",",
			"\t\t\talign: \"right\",",
			"\t\t},",
			"\t]}",
			"\taddons={[",
			"\t\trowtooltip({",
			"\t\t\ttooltip: record =>",
			"\t\t\t\trecord.status === \"stopped\" ? \"已关机，无法操作\" : null,",
			"\t\t}),",
			"\t]}",
			"/>",
			"${BLOCK_COMMENT_START}",
			"const { rowtooltip } = Table.addons;",
			"",
			"const cvmList = [",
			"\t{",
			"\t\tinstanceId: \"ins-4m99aio4\",",
			"\t\tinstanceName: \"Hongkong VPN\",",
			"\t\tstatus: \"running\",",
			"\t\tarea: \"香港一区\",",
			"\t\tmodal: \"标准型 S1\",",
			"\t\tpublicIP: \"119.28.142.24\",",
			"\t\tprivateIP: \"10.144.77.75\",",
			"\t},",
			"\t{",
			"\t\tinstanceId: \"ins-3e7y5ww3\",",
			"\t\tinstanceName: \"Guangzhou Test\",",
			"\t\tstatus: \"stopped\",",
			"\t\tarea: \"广州三区\",",
			"\t\tmodal: \"标准型 S1\",",
			"\t\tpublicIP: \"112.30.42.241\",",
			"\t\tprivateIP: \"10.121.72.123\",",
			"\t},",
			"];",
			"${BLOCK_COMMENT_END}"			
		],
		"description": "Log output to console"
	},
	"表格_类名/样式": {
		"prefix": "tea-table(表格_类名/样式)",
		"body": [
			"<Table",
			"\trecords={cvmList}",
			"\trecordKey=\"instanceId\"",
			"\tcolumns={[",
			"\t\t{",
			"\t\t\tkey: \"instance\",",
			"\t\t\theader: \"ID/实例名\",",
			"\t\t\trender: cvm => (",
			"\t\t\t\t<>",
			"\t\t\t\t\t<p>",
			"\t\t\t\t\t\t<a>{cvm.instanceId}</a>",
			"\t\t\t\t\t</p>",
			"\t\t\t\t\t<p>{cvm.instanceName}</p>",
			"\t\t\t\t</>",
			"\t\t\t),",
			"\t\t},",
			"\t\t{",
			"\t\t\tkey: \"status\",",
			"\t\t\theader: \"状态\",",
			"\t\t\twidth: 100,",
			"\t\t\trender: cvm => {",
			"\t\t\t\tif (cvm.status === \"running\") {",
			"\t\t\t\t\treturn <span style={{ color: \"green\" }}>运行中</span>;",
			"\t\t\t\t}",
			"\t\t\t\tif (cvm.status === \"stopped\") {",
			"\t\t\t\t\treturn <span style={{ color: \"red\" }}>已关机</span>;",
			"\t\t\t\t}",
			"\t\t\t\treturn cvm.status;",
			"\t\t\t},",
			"\t\t},",
			"\t\t{",
			"\t\t\tkey: \"area\",",
			"\t\t\theader: \"可用区域\",",
			"\t\t},",
			"\t\t{",
			"\t\t\tkey: \"modal\",",
			"\t\t\theader: \"主机型号\",",
			"\t\t},",
			"\t\t{",
			"\t\t\tkey: \"publicIP\",",
			"\t\t\theader: \"IP 地址\",",
			"\t\t\talign: \"right\",",
			"\t\t},",
			"\t]}",
			"\taddons={[",
			"\t\tstylize({",
			"\t\t\tclassName: \"my-table\",",
			"\t\t\tstyle: { outline: \"2px solid yellow\" },",
			"\t\t\theadClassName: \"my-head\",",
			"\t\t\theadStyle: { border: \"2px solid green\" },",
			"\t\t\tbodyClassName: \"my-body\",",
			"\t\t\tbodyStyle: { background: \"#ffb9b9\" },",
			"\t\t}),",
			"\t]}",
			"/>",
			"${BLOCK_COMMENT_START}",
			"const { stylize } = Table.addons;",
			"",
			"const cvmList = [",
			"\t{",
			"\t\tinstanceId: \"ins-4m99aio4\",",
			"\t\tinstanceName: \"Hongkong VPN\",",
			"\t\tstatus: \"running\",",
			"\t\tarea: \"香港一区\",",
			"\t\tmodal: \"标准型 S1\",",
			"\t\tpublicIP: \"119.28.142.24\",",
			"\t\tprivateIP: \"10.144.77.75\",",
			"\t},",
			"\t{",
			"\t\tinstanceId: \"ins-3e7y5ww3\",",
			"\t\tinstanceName: \"Guangzhou Test\",",
			"\t\tstatus: \"stopped\",",
			"\t\tarea: \"广州三区\",",
			"\t\tmodal: \"标准型 S1\",",
			"\t\tpublicIP: \"112.30.42.241\",",
			"\t\tprivateIP: \"10.121.72.123\",",
			"\t},",
			"];",
			"${BLOCK_COMMENT_END}"			
		],
		"description": "Log output to console"
	},
	"表格_props注入": {
		"prefix": "tea-table(表格_props注入)",
		"body": [
			"<Table",
			"\trecords={cvmList}",
			"\trecordKey=\"instanceId\"",
			"\tcolumns={[",
			"\t\t{",
			"\t\t\tkey: \"instance\",",
			"\t\t\theader: \"ID/实例名\",",
			"\t\t\trender: cvm => (",
			"\t\t\t\t<>",
			"\t\t\t\t\t<p>",
			"\t\t\t\t\t\t<a>{cvm.instanceId}</a>",
			"\t\t\t\t\t</p>",
			"\t\t\t\t\t<p>{cvm.instanceName}</p>",
			"\t\t\t\t</>",
			"\t\t\t),",
			"\t\t},",
			"\t\t{",
			"\t\t\tkey: \"status\",",
			"\t\t\theader: \"状态\",",
			"\t\t\twidth: 100,",
			"\t\t\trender: cvm => {",
			"\t\t\t\tif (cvm.status === \"running\") {",
			"\t\t\t\t\treturn <span style={{ color: \"green\" }}>运行中</span>;",
			"\t\t\t\t}",
			"\t\t\t\tif (cvm.status === \"stopped\") {",
			"\t\t\t\t\treturn <span style={{ color: \"red\" }}>已关机</span>;",
			"\t\t\t\t}",
			"\t\t\t\treturn cvm.status;",
			"\t\t\t},",
			"\t\t},",
			"\t\t{",
			"\t\t\tkey: \"area\",",
			"\t\t\theader: \"可用区域\",",
			"\t\t},",
			"\t\t{",
			"\t\t\tkey: \"modal\",",
			"\t\t\theader: \"主机型号\",",
			"\t\t},",
			"\t\t{",
			"\t\t\tkey: \"publicIP\",",
			"\t\t\theader: \"IP 地址\",",
			"\t\t\talign: \"right\",",
			"\t\t},",
			"\t]}",
			"\taddons={[",
			"\t\t// 支持 props 注入",
			"\t\tinjectable({",
			"\t\t\tcell: (props, context) => ({",
			"\t\t\t\tonClick: e => console.log(\"Cell Click\", e, props, context),",
			"\t\t\t\tstyle: {",
			"\t\t\t\t\t...(props.style || {}),",
			"\t\t\t\t\tbackground:",
			"\t\t\t\t\t\tcontext.columnIndex === 0 && context.recordIndex === 0",
			"\t\t\t\t\t\t\t? \"#cfffcf\"",
			"\t\t\t\t\t\t\t: undefined,",
			"\t\t\t\t},",
			"\t\t\t}),",
			"\t\t\trow: (props, context) => ({",
			"\t\t\t\tonClick: e => console.log(\"Row Click\", e, props, context),",
			"\t\t\t\tstyle: {",
			"\t\t\t\t\t...(props.style || {}),",
			"\t\t\t\t\tbackground: context.recordIndex === 1 ? \"#ffcaca\" : undefined,",
			"\t\t\t\t},",
			"\t\t\t}),",
			"\t\t}),",
			"\t]}",
			"/>",
			"${BLOCK_COMMENT_START}",
			"const { injectable } = Table.addons;",
			"",
			"const cvmList = [",
			"\t{",
			"\t\tinstanceId: \"ins-4m99aio4\",",
			"\t\tinstanceName: \"Hongkong VPN\",",
			"\t\tstatus: \"running\",",
			"\t\tarea: \"香港一区\",",
			"\t\tmodal: \"标准型 S1\",",
			"\t\tpublicIP: \"119.28.142.24\",",
			"\t\tprivateIP: \"10.144.77.75\",",
			"\t},",
			"\t{",
			"\t\tinstanceId: \"ins-3e7y5ww3\",",
			"\t\tinstanceName: \"Guangzhou Test\",",
			"\t\tstatus: \"stopped\",",
			"\t\tarea: \"广州三区\",",
			"\t\tmodal: \"标准型 S1\",",
			"\t\tpublicIP: \"112.30.42.241\",",
			"\t\tprivateIP: \"10.121.72.123\",",
			"\t},",
			"];",
			"${BLOCK_COMMENT_END}"			
		],
		"description": "Log output to console"
	}
}